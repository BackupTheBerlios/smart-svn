-- phpMyAdmin SQL Dump
-- version 2.6.4
-- http://www.phpmyadmin.net
-- 
-- Host: 127.0.0.1
-- Generation Time: Sep 29, 2005 at 11:19 AM
-- Server version: 4.1.10
-- PHP Version: 5.0.3
-- 
-- Database: `smart3`
-- 

-- 
-- Dumping data for table `smart_article_article`
-- 

INSERT INTO `smart_article_article` VALUES (23, 42, 4, 0, 'en', '2005-09-02 13:20:00', '2005-09-02 13:20:39', '2005-09-15 14:23:06', 'Actions', '', '', '', '', '    <p>Dieses Modul stallt eine Reihe von Action-Klassen zur Verf&uuml;gung die in Projekt-Views verwendet werden k&ouml;nnen.<br />     </p>           <h5>getArticle</h5>         <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Daten eines Artikels<br />     </p>             <p><strong>Syntax:</strong></p>             <pre>$this-&gt;model-&gt;action(''article'', ''getArticle'',<br />                         array(''id_article'' =&gt; integer,<br />                               ''result''     =&gt; &amp; array(),<br />                               ''fields''     =&gt; array(''title'',''overtitle'',<br />                                                     ''subtitle'',''header'',<br />                                                     ''description'',''body'',<br />                                                     ''ps'',''pubdate'',<br />                                                     ''articledate'',''modifydate'',<br />                                                     ''logo'',''media_folder'') ));</pre>   <h5>&nbsp;</h5> <h5>&nbsp;</h5> <h5>getArticles</h5>                <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Daten von Artikeln die sich unterhalb eines Navigationsknoten befinden<br />     </p>       <p><strong>Syntax:</strong></p>        <pre>$this-&gt;model-&gt;action(''article'', ''getArticles'',<br />                             array(''id_node'' =&gt; integer,<br />                                   ''result''  =&gt; &amp; array,<br />                                   ''status''  =&gt; array(''&gt;|&lt;|=|&gt;=|&lt;=|!='', 0|1|2|3|4),// optional<br />                                   ''order''   =&gt; array(''rank|title|<br />                                                articledate|pubdate|modifydate<br />                                                overtitle|subtitle'', ''asc|desc''),  // optional<br />                                   ''fields''  =&gt; array(''title'',''overtitle'',<br />                                                      ''subtitle'',''header'',<br />                                                      ''description'',''body'',<br />                                                      ''ps'',''pubdate'',<br />                                                      ''articledate'',''modifydate'',<br />                                                      ''logo'',''media_folder'') ));</pre>    <p>&nbsp;</p>    <h5><strong>search</strong></h5>   <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Daten von Artikeln die einem Suchkriterium entsprechen<br />     </p>      <p><strong>Syntax:</strong></p>      <pre>$this-&gt;model-&gt;action(''article'', ''search'',<br />                             array(''result''  =&gt; &amp; array,<br />                                   ''search''  =&gt; string,   // search string<br />                                   ''status''  =&gt; array( ''&gt;|&lt;|=|&gt;=|&lt;=|!='',<br />                                                       0|1|2|3|4 ),// optional<br />                                   ''order''   =&gt; array(''rank|title|<br />                                                articledate|pubdate|modifydate<br />                                                overtitle|subtitle'', ''asc|desc''),  // optional<br />                                   ''fields''  =&gt; array(''title'',''overtitle'',''id_node'',<br />                                                      ''subtitle'',''header'',<br />                                                      ''description'',''body'',<br />                                                      ''ps'',''pubdate'',<br />                                                      ''articledate'',''modifydate'',<br />                                                      ''logo'',''media_folder'') ));</pre>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (2, 20, 4, 0, 'en', '2005-09-01 16:24:00', '2005-09-01 16:24:56', '2005-09-19 10:10:01', 'Installation', '', '', '', '', '<div class="text"><p>The installation of Smart3 is simple. Upload the extracted files to a folder somewere under the document root of the webserver. Create a MySql 4.1 DataBase. Point your browser to the admin.php file. You should see a setup formular. Follow the instructions.</p> <p>The following folders must be writeable by php scripts:</p>   <ul><li>/cache <br />   </li><li>/config</li><li>/data</li><li>/data/article</li> <li>/data/common</li><li>/data/common/captcha</li><li>/data/misc</li><li>/data/navigation</li><li>/data/user<br />   </li><li>/logs</li></ul> <p>&nbsp;</p><p>If it is the first time you use Smart3 and you want to test it you should select utf-8 as character set and let the tables prefix as it is. After successfull submiting the form you are forwarded to the login of Smart3. </p><p>For testing you can fill the database with the content of this manual after the successfull installation. Execute the following sql file using <a href="http://www.phpmyadmin.net/" target="_blank" title="Mysql Admin Tool">phpMyAdmin</a>:</p><p>/sql/smart3.sql </p><p>You can find the public views and templates in:</p><p><strong>/views_smart</strong></p><p><strong>/templates_smart </strong></p><p> </p><p>Enjoy! </p></div>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (3, 20, 4, 1, 'en', '2005-09-01 16:27:00', '2005-09-01 16:27:19', '2005-09-19 10:14:29', 'The Action Class', '', '', '', '', '<p>An action class represents the model of a modul. Every model related operations are executed by actions. An action class is indirectly executed by the methode action() of the model class:</p>   <pre><strong>$model-&gt;action</strong>(''modulename'',''actionname'', &amp; $data_array ); </pre>   <p>The method of the model class include the target action class file, makes an instance of this class, execute its validate() methode and if successfull its perform() method.</p>   <h4>Data validation </h4>   <p>An action class has a defensive character. This means, that before the perform() methode works on and with the data passed as an array, the vallidate() methode checks if the content of this data array is valide.</p>   <pre>public function validate( $data = FALSE ){}; </pre>   <p>The validate() methode must return bool TRUE so that the perform() methode is executet by the model action methode.</p>   <h4>Design of an Action Class<br /> </h4>   <p>An action class always depends (extends) on a parent class &quot;SmartAction&quot;. The class name must follow the convention:</p>   <p>class Action[Modulname][Actionname] extends SmartAction {}</p>   <p>The file name and folder of such a class must follow the convention:</p>   <p>/modules/xxx/action/Action[Modulename][Actionname].php</p>   <p>Once a file with the related action class code is in the right module <strong>/action</strong> folder, you can use such an action from within any part of the system.</p> <p>Here a minimalistic action class: </p>   <pre>class ActionCommonTest extends SmartAction<br />{<br />    /**<br />     * perform<br />     *<br />     * @param mixed $data<br />     */<br />    public function perform( $data = FALSE )<br />    {<br />    }<br />    <br />    /**<br />     * Validate data passed to this action<br />     * @param mixed $data<br />     * @return bool<br />     */<br />    public function validate( $data = FALSE )<br />    {<br />        return TRUE;<br />    }    <br />} </pre>   <p>When saving this class as /modules/common/action/ActionCommonTest.php and you try to use it, it does nothing.</p>   <pre>$this-&gt;model-&gt;action( ''common'', ''test'', array() );</pre>   <p> Therefore her an action class which trims an given string:<br /> </p>   <pre> class ActionCommonTrim extends SmartAction<br /> {<br />    /**<br />     * Trim a string<br />     *<br />     * @param mixed $data<br />     */<br />    public function perform( $data = FALSE )<br />    {<br />        $data[''result''] = trim( $data[''str''] ); <br />    }<br />    <br />    /**<br />     * Validate data passed to this action<br />     */<br />    public function validate( $data = FALSE )<br />    {<br />        if(!isset($data[''error'']))<br />        {<br />            throw new SmartModelException(''Missing &quot;error&quot; var''); <br />        }<br /><br />        if(!isset($data[''result'']))<br />        {<br />            $data[''error''] = &quot;array ''result'' key is not defined!&quot;;<br />            return FALSE;<br />        }<br /><br />        if(!isset($data[''str'']))<br />        {<br />            $data[''error''] = &quot;array ''str'' key is not defined!&quot;;<br />            return FALSE;<br />        }<br /><br />        if(!is_string($data[''str'']))<br />        {<br />            $data[''error''] = &quot;array ''str'' value is not from type string!&quot;;<br />            return FALSE;<br />        }<br />        return TRUE;<br />    }    <br />}</pre>   <p>Save this class as /modules/common/action/ActionCommonTrim.php and use it as follows from within a public view class:</p>     <pre>// init variables<br />$trimmed_string = '''';<br />$error = '''';<br /><br />$this-&gt;model-&gt;action( ''common'', ''trim'',<br />                      array(''result'' =&gt; &amp; $trimmed_string,<br />                            ''str''    =&gt; ''  This is a test    '',<br />                            ''error''  =&gt; &amp; $error)); <br /><br />if(!empty($error))<br />{<br />    echo $error;<br />} <br />else<br />{<br />    echo $trimmed_string;<br />} </pre>   <p>The biggest part is the code of the validate() methode. There are more possible error handling ways. </p>   <ul> <li>An action class couldnt be executed at all without disturbing the whole system. In this case you have to throw an exception. This happens if a view programmer does an action call in a wrong manner (wrong parameter type). It''s smilar to an php fatal error.</li><li>The action caller handle the error it self. Here the validate methode assign an given error array with the error messages. The validate methode must return bool FALSE.</li> </ul>   <p>It is important to know that if an action should return some data you have to pass the result array as a reference:</p>   <pre>$model-&gt;action( ''xxx'', ''yyy'', array( ''result'' =&gt; <strong>&amp; $result_array</strong>, ''error'' =&gt; <strong>&amp; $error_array</strong> ) ); </pre>   <h4>Class variables </h4>   <p>The model instance assign the following variables of an action class:</p>   <ul> <li>$this-&gt;model - Instance of the model class. You need this to execute other action classes from within the current action class.<br /> </li><li>$this-&gt;config - Global configuration array.</li><li>$this-&gt;constructorData - Data that is passed to the action class constructor.</li> </ul>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (4, 20, 4, 2, 'en', '2005-09-01 16:28:00', '2005-09-01 16:28:41', '2005-09-27 14:08:37', 'The View Class', '', '', '', '', '<p>It is the charge of the controller to include this class, to make an instance and to execute, in a well defined order, some methods of a view class. Your charge (the view programmer) is to fill the view methods with code that reacts on a web request. In other words; your make such a view class alive. </p>   <p>The order in which the controller execute the view methods:</p>     <ul> <li><strong> auth()</strong> - if needed you can include here some authentication stuff. (optional)<br /> </li><li><strong>prependFilterChain()</strong> - ... example: spam boot detection, logging, filtering the superglobal request variables. (optional)<br /> </li><li><strong>perform() </strong>- Here the real stuff happens. (optional)<br /> </li><li><strong>appendFilterChain( &amp; $tplBufferContent )</strong> - This methode is executed after a template was rendered. So you can do some work on the template output. (optional)<br /> </li> </ul>   <p>Furthermore there are a couple of class variables which you should keep in mind:</p>     <ul> <li><strong> $tplVar</strong> - In this array you have to assign all variables that are used in a template. Ex.: $this-&gt;tplVar[''title''] = ''Hello World''; You can use this variable in a template as $tpl[''title''].</li><li><strong>$viewVar</strong> - In this array you have to assign all variables that may be used in nested views. <br /> </li><li><strong>$model</strong> - The instance of the model class. Needed to execute actions. Ex.: $this-&gt;model-&gt;action(''common'',''test'');</li><li><strong>$session</strong> - The instance of the session class<br /> </li><li><strong>$config</strong> - Array that contains all global config variables.</li><li><strong>$template</strong> - A string variable in which you can define the name of the template if it is else than the default name.</li><li><strong>$renderTemplate</strong> - This var is from type BOOL. If it is FALSE then no template is going to render.</li><li><strong>$templateFolder</strong> - If the template folder is an other one than the default you have to define the absolute path here.</li><li><strong>$templateEngine</strong> - Here you can define the template engine type if you want to use an other than defined in the configuration array. Currently there are 2 types:&nbsp; ''SmartTplContainerPhp'' (default) and ''SmartTplContainerSmarty''</li> <li><strong>$viewData</strong> - It is possible that the controller pass some data to the view. You will find this data here.</li><li><strong>$cacheExpire</strong> - You can define the time in seconds the template cache expires. 0 means cache disabled.</li><li><strong>$</strong><strong>cacheId</strong> - Usually the cache ID is generated by the system. But here you can define your own cache ID.<br />   </li>  </ul>   <p>You can find the public view classes in the root folder <strong>/views_xxx</strong>. Where xxx is a name of your choice. It is possible to create more public view folders. The global config array contains a variable with the current active view folder.</p>     <h5>Example of a view class.</h5>     <p>This example show you a part of the view class in ViewNode.php file. The job of this view is to retrive data of a requested navigation node, its child nodes and the branch of this node. The methode &quot;prependFilterChain()&quot; checks if the superglobal var &quot;id_node&quot; contains only numbers. If not an error template is rendered. This methode furthermore sends a http header to disable browser caching.<br /> </p>     <pre>class ViewNode extends SmartView<br />{<br />    /**<br />     * Cache expire time in seconds for this view<br />     * 0 = cache disabled<br />     */<br />    public $cacheExpire = 3600;<br />    <br />    /**<br />     * Execute the view of the &quot;node&quot; template<br />     */<br />    function perform()<br />    { <br />        // init variables (see private function below)<br />        $this-&gt;initVars();<br />          <br />        // get requested node content<br />        $this-&gt;model-&gt;action(''navigation'',''getNode'', <br />                             array(''result''  =&gt; &amp; $this-&gt;tplVar[''node''],<br />                                   ''id_node'' =&gt; (int)$this-&gt;current_id_node,<br />                                   ''fields''  =&gt; array(''title'',''body'',<br />                                                      ''id_node'',''media_folder'')));<br /><br />        // get child nodes content of the requested node<br />        // only with status=2, means active      <br />        $this-&gt;model-&gt;action(''navigation'',''getChilds'', <br />                             array(''result''  =&gt; &amp; $this-&gt;tplVar[''childNodes''],<br />                                   ''id_node'' =&gt; (int)$this-&gt;current_id_node,<br />                                   ''status''  =&gt; array(''='',2),<br />                                   ''fields''  =&gt; array(''title'',''short_text'',''id_node'')));<br /> <br />        // get navigation node branch content of the requested node<br />        $this-&gt;model-&gt;action(''navigation'',''getBranch'', <br />                             array(''result''  =&gt; &amp; $this-&gt;tplVar[''nodeBranch''],<br />                                   ''id_node'' =&gt; (int)$this-&gt;current_id_node,<br />                                   ''fields''  =&gt; array(''title'',''id_node'')));                   <br />    }<br /><br />    /**<br />     * prepend filter chain<br />     *<br />     */<br />    public function prependFilterChain()<br />    {<br />        // fetch the current id_node. <br />        // If no id_node defined, not a string or not number chars<br />        // this view class loads the error template<br />        //<br />        if( !isset($_REQUEST[''id_node''])     || <br />            !is_string($_REQUEST[''id_node'']) || <br />            preg_match(&quot;/[^0-9]+/&quot;,$_REQUEST[''id_node'']) ) <br />        {<br />            $this-&gt;template  = ''error'';     <br />        }<br />        else<br />        {<br />            $this-&gt;current_id_node = (int)$_REQUEST[''id_node''];          <br />        }<br />        <br />        // filter action of the common module to prevent browser caching<br />        $this-&gt;model-&gt;action( ''common'', ''filterDisableBrowserCache'');    <br />    }<br /><br />    /**<br />     * append filter chain<br />     *<br />     */<br />    public function appendFilterChain( &amp; $outputBuffer )<br />    {<br />        // filter action of the common module that trims the html output<br />        $this-&gt;model-&gt;action( ''common'', ''filterTrim'', array(''str'' =&gt; &amp; $outputBuffer) );        <br />    }<br /><br />    /**<br />     * init some variables<br />     *<br />     */    <br />    private function initVars()<br />    {<br />        // template array variables<br />        $this-&gt;tplVar[''node'']       = array();<br />        $this-&gt;tplVar[''childNodes''] = array();<br />        $this-&gt;tplVar[''nodeBranch''] = array();<br />        <br />        // template var with charset used for the html pages<br />        $this-&gt;tplVar[''charset''] = &amp; $this-&gt;config[''charset''];<br />    }<br />}<br /> </pre>     <p>In bigger projects there is may a more closer focus on both filter methods. It would be usefull to develop a modul to manage filter actions for every public view. That means in every public filter methods you will find only one action that contacts the filter manager which do the real job.</p> <p>Example of the content of a prependFilterChain() methode would be some thing similar like:</p>     <pre>$this-&gt;model-&gt;action(''filtermanager'', ''runPrependFilters'',array(''view'' =&gt; ''xxx'')); </pre>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (5, 20, 4, 3, 'en', '2005-09-01 16:29:00', '2005-09-01 16:29:33', '2005-09-29 10:07:52', 'The Template', '', '', '', '', '<p>The template is a file in which you can define how the data assigned by the related view class is represented. This can be as an html page, pdf page, simple text page, downloads, xml or what ever. Smart3 use by default php as template language. The use of other templates engines is possible.</p> <p>You can find public templates in the <strong>/templates_xxx</strong> folder. It is possible to use more template folders to check different layouts. You can define in the global configuration array which template folder is active. The file name of a template must follow the convention:</p>   <pre>tpl.[Template name].php </pre>   <p>You can use the following variables in templates:</p>   <ul> <li><strong>$tpl</strong> - In this array you can find all variables assigned by the related view class.</li><li><strong>$viewLoader-&gt;xxx()</strong> - With this methode you can include an other view with name ''xxx'' from within a template. <br />   </li><li><strong>php functions - </strong>You can use all php functions except if it is restricted to some selected functions by the tokenanalyzer. See <a title="Smart Konfiguration" target="_self" href="?id_node=20&amp;id_article=6&amp;view=article">configuration</a>.</li> </ul>   <p>Take a closer look to the function $viewLoader-&gt;xxx(). With this function you can include an other view from within a template. This is an alternative to the php function include() which should be disabled if there are more developers who are going to work on a project. <strong>xxx</strong> stays for the name of the view to include. <strong>ViewXxx.php.</strong></p>   <p>You have to learn to use php very carefull in templates. Include as less as possible procedural code in templates. Try to do such jobs in the related view classes. Common php functions and constructs that you can use are, if,else,elseif,endif,foreach, endforeach, echo, count a.s.o.</p> <h4>Smarty</h4>   <p>Smart3 use by default <a href="http://www.php.net" target="_blank">php</a>  as template engine. It does a perfect job. However as an alternative engine you have the choice to activate <a href="http://smarty.php.net" target="_blank">Smarty</a>. There are 2 ways to enable Smarty as template engine:</p>   <ol> <li>Set in the configuration file /config/my_config.php the variable as follows: <br /> $SmartConfig[''public_template_engine''] = ''SmartTplContainerSmarty'';<br /> Now the project use Smarty in all templates.</li><li>Set view class variable as follows:<br /> public $templateEngine = ''SmartTplContainerSmarty'';<br />Each view can have its own template renderer.</li> </ol> <p>The view class array $this-&gt;tplVars contains all templates variables. You can use the content of this array in Smarty templates as follows:&nbsp; {$tpl.xxx}. (Study the Smarty examples in the public view and template foders). But you can use directly the Smarty instance from within the view classes:<br />  <strong>$this-&gt;viewVar[''smarty'']</strong> contains the Smarty instance. Further informations about Smarty <a target="_blank" href="http://smarty.php.net">here</a>.</p><p>&nbsp;</p>   <p> </p>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (6, 20, 4, 4, 'en', '2005-09-01 16:30:00', '2005-09-01 16:30:13', '2005-09-03 17:53:01', 'The Global Configuration Array', '', '', '', '', '<p>Smart3 use and needs a configuration array to work in a proper way and to gives the administrator or the modul programmer the possibility to finetune the framework.</p>   <p>There are 2 ways to change the configuration array or to add some values:</p>      <ol> <li>You will find in the root folder <strong>/config</strong> a file <strong>my_config_dist.php. </strong>You have to rename this file in <strong>my_config.php</strong>. Here you can overwrite the default settings.</li><li>Some modules overwrite or provide an admin interface to overwrite some configuration settings.</li> </ol>   <p>The order in which Smart3 fetch the configuration array values is:</p>    <ol> <li>First it loads the default array values, <br />   </li><li>then it loads the array values in my_config.php if it is present,<br />   </li><li>then the modules can overwrite some variables. </li> </ol>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (7, 20, 4, 6, 'en', '2005-09-01 16:31:00', '2005-09-01 16:31:10', '2005-09-15 14:50:02', 'Roadmap', '', '', '', '', '<p>First we have to bring Smart3 out of the alpha stage. There are some problem to solve and one among those is this of the PHPCodeAnalyzer class.</p> <p>We need one or more web page designers who help us to rewrite the admin layout and to check its usability.</p> <p>Currently we use the tiny mice html editor. The plan is to include pear''s text_wiki as an alternative. So text_wiki specialists are welcome.</p> <p>Furthermore there are some modules in a planning stage:</p>   <ul> <li><strike><strong>Articles modul</strong></strike><strong> </strong>done<br />    </li><li><strike><strong>Links modul</strong></strike><strong> </strong>done<br />    </li><li><strong>Keywords modul</strong></li><li><strong>Filters modul</strong> </li> </ul>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (8, 20, 4, 7, 'en', '2005-09-01 16:32:00', '2005-09-01 16:32:30', '2005-09-15 14:50:29', 'Contribute', '', '', '', '', 'Smart3 is looking for high motivated programmers, designers, editors and translators. If you have some time left you can contact me at: <a title="Contact Email" target="_self" href="mailto:smart@open-publisher.net">smart@open-publisher.net</a>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (9, 23, 4, 0, 'en', '2005-09-01 16:36:00', '2005-09-01 16:36:03', '2005-09-01 16:36:18', 'Actions', '', '', '', '', '<p>Here you will find the description and usage of a few (not all) common action classes which you can use in public view classes. There are a few more action which are used for the admin views.</p>   <p>The parameters which have always the same meanings:</p>   <ul> <li><div><strong>''id_node''</strong> - Navigtion node ID to which the action is related<br /> </div></li><li><div><strong>''result''</strong> - A reference to an defined array in that the class store the result. <br />Ex.: &amp;$this-&gt;tplVar </div></li><li><div><strong>''fields''</strong> - Array with the names of the node database fields. The possible fields are: ''id_node'', ''id_parent'', ''id_sector'', ''id_view'', ''status'', ''rank'', ''title'', ''short_text'', ''body'', ''format'', ''logo'', ''media_folder''</div></li><li><div><strong>''status''</strong> - In this array you can define the status of the node to retrive. The first element define the relation. The following relations are allowed: ''&lt;'',''&gt;'',''='',''&gt;='',''&lt;=''. The second element define the status value. Allowed values are 1 or 2. Example: array(''&gt;'',1). <strong>1 means inaktiv. 2 means activ</strong>.</div></li><li><div><strong>''order''</strong> - If the result contains more nodes you can define here the order of those nodes. The first element define the field on which the nodes are ordered. Allowed fields are <strong>''title'',''rank''</strong>. The second element define the order. Allowed values are <strong>''asc'',''desc''</strong>. Example: array(''title'',''asc''). Default order is: ''rank'' ''asc''.<br /><br /></div></li> </ul>   <p>An action class always validate the data passed in the array (the third argument). If the validation fails an action class produce an exception. It depends on the error configuration if an error is displaed or logged. You will fin log entries in the <strong>/logs</strong> folder. </p>   <p> </p>   <h5>getNode</h5>   <p><strong>Description:</strong> Fill an array with the content of a node<br /> </p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''navigation'', ''getNode'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array(),<br />                               ''fields''  =&gt; array() ));<br /> </pre>   <h5>getChilds</h5>   <p><strong>Description:</strong> Fill an array with the content of child nodes of a given node.</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''navigation'', ''getChilds'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''status''  =&gt; array,       // optional<br />                               ''order''   =&gt; array,       // optional<br />                               ''fields''  =&gt; array() ));<br /> </pre>   <h5>getBranch</h5>   <p><strong>Description:</strong> Fill an array with the content of the branch nodes of a given node<br /> </p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''navigation'', ''getBanch'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array() ));</pre>   <h5>getTree</h5>   <p><strong>Description:</strong> Fill an array with the content of the nodes of a (sub)tree of a given node. id_node=0 means the whole nodetree.<br /> </p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''navigation'', ''getTree'',<br />                         array(''id_node'' =&gt; integer, // optional<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array() ));<br />  </pre>   <h5>getAllThumbs</h5>   <p><strong>Description:</strong> Fill an array with the image thumbnails data of a given node<br /> </p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''navigation'', ''getAllThumbs'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_pic'',''id_node'',''title'',<br />                                                  ''description'',''file'',''height'',<br />                                                  ''width'',''rank'',''mime'',''size'') ));<br /> </pre>   <h5>getAllFiles</h5>   <p><strong>Description:</strong> Fill an array with files data of a given node.</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''navigation'', ''getAllFiles'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_file'',''id_node'',''title'',<br />                                                  ''description'',''file'',''rank'',<br />                                                  ''mime'',''size'')));<br /> </pre>   <h5>getPicture</h5>   <p><strong>Description:</strong> Fill an array with the data of a given node image</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''navigation'', ''getPicture'',<br />                         array(''id_pic'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_pic'',''id_node'',''title'',<br />                                                  ''description'',''file'',''height'',<br />                                                  ''width'',''rank'',''mime'',<br />                                                  ''size'',''media_folder'') ));<br /> </pre>   <h5>getFile</h5>   <p><strong>Description:</strong> Fill an array with the data of a given node file</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''navigation'', ''getFile'',<br />                         array(''id_file'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_file'',''id_node'',''title'',<br />                                                  ''description'',''file'',''rank'',<br />                                                  ''mime'',''size'',''media_folder'')));</pre> ', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (10, 25, 4, 0, 'en', '2005-09-01 16:37:00', '2005-09-01 16:37:13', '2005-09-02 13:38:32', 'Actions', '', '', '', '', '<p>Here you will find the description and usage of a few (not all) common action classes of the misc module which you can use in public view classes. There are a few more action which are used for the admin views.</p>     <p>Action call parameters that have always the same meanings:</p>     <ul> <li><div><strong>''id_text''</strong> - ID of the text to which the action is related<br /> </div></li><li><div><strong>''result''</strong> - A reference to an defined array in that the class store the result. Ex.: &amp;$this-&gt;tplVar </div></li><li><div><strong>''fields''</strong> - Array with the names of the text database fields. The possible fields are: ''id_text'',''status'',''title'',''short_text'',''body'',''media_folder''</div></li><li><div><strong>''status''</strong> - In this array you can define the status condition a text must accomplish to be retrived. The first element define the relation. The following relations are allowed: ''&lt;'',''&gt;'',''='',''&gt;='',''&lt;=''. The second element define the status value. Allowed values are 1 or 2. Example: array(''&gt;'',1). <strong>1 means inaktiv. 2 means activ</strong>.</div></li><li><div><strong>''order''</strong> - If the result contains more textes you can define here the condition of the order of those textes. The first element define the field on which the textes are ordered. Allowed fields are <strong>''title'',''status''</strong>. The second element define the order. Allowed values are <strong>''asc'',''desc''</strong>. Example: array(''title'',''asc''). Default order is: ''title'' ''asc''.<br /><br /></div></li> </ul>     <p>An action class always validate the data passed in the array (the third argument). If the validation fails an action class produce an exception. It depends on the error configuration if an error is displayed or logged. You will find the log entries in the <strong>/logs</strong> folder. </p>     <h5>getText</h5>   <p><strong>Description:</strong> Fill an array with the content of a text</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''misc'', ''getText'',<br />                     array(''id_text'' =&gt; integer,<br />                           ''result''  =&gt; &amp; array(),<br />                           ''fields''  =&gt; array() ));</pre>   <h5>getTextes</h5>   <p><strong>Description:</strong> Fill an array with the content of one or more textes</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''misc'', ''getTextes'',<br />                     array(''ids''    =&gt; array(id_x,id_y,id_z,..,..,..),<br />                           ''result'' =&gt; &amp; array(),<br />                           ''order''  =&gt; array(),<br />                           ''fields'' =&gt; array() ));</pre>   <h5>getAllThumbs</h5>   <p><strong>Description:</strong> Fill an array with the image thumbnails data of a given text</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''misc'', ''getAllThumbs'',<br />                         array(''id_text'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_pic'',''id_text'',''title'',<br />                                                  ''description'',''file'',''height'',<br />                                                  ''width'',''rank'',''mime'',''size'') ));<br /> </pre>   <h5>getAllFiles</h5>   <p><strong>Description:</strong> Fill an array with files data of a given text</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''misc'', ''getAllFiles'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_file'',''id_text'',''title'',<br />                                                  ''description'',''file'',''rank'',<br />                                                  ''mime'',''size'')));<br /> </pre>   <h5>getPicture</h5>   <p><strong>Description:</strong> Fill an array with the data of a given text image</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''misc'', ''getPicture'',<br />                         array(''id_pic'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_pic'',''id_text'',''title'',<br />                                                  ''description'',''file'',''height'',<br />                                                  ''width'',''rank'',''mime'',<br />                                                  ''size'',''media_folder'') ));<br /> </pre>   <h5>getFile</h5>   <p><strong>Description:</strong> Fill an array with the data of a given text file</p>   <p><strong>Usage:</strong></p>   <pre>$this-&gt;model-&gt;action(''misc'', ''getFile'',<br />                         array(''id_file'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_file'',''id_text'',''title'',<br />                                                  ''description'',''file'',''rank'',<br />                                                  ''mime'',''size'',''media_folder'')));</pre>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (11, 22, 4, 0, 'en', '2005-09-01 16:38:00', '2005-09-01 16:38:07', '2005-09-01 16:38:37', 'Modules License', '', '', '', '', '<p>The modules are distributed under the following license: </p>   <pre>    GNU GENERAL PUBLIC LICENSE<br />		       Version 2, June 1991<br /><br /> Copyright (C) 1989, 1991 Free Software Foundation, Inc.<br />                       51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA<br /> Everyone is permitted to copy and distribute verbatim copies<br /> of this license document, but changing it is not allowed.<br /><br />			    Preamble<br /><br />  The licenses for most software are designed to take away your<br />freedom to share and change it.  By contrast, the GNU General Public<br />License is intended to guarantee your freedom to share and change free<br />software--to make sure the software is free for all its users.  This<br />General Public License applies to most of the Free Software<br />Foundation''s software and to any other program whose authors commit to<br />using it.  (Some other Free Software Foundation software is covered by<br />the GNU Library General Public License instead.)  You can apply it to<br />your programs, too.<br /><br />  When we speak of free software, we are referring to freedom, not<br />price.  Our General Public Licenses are designed to make sure that you<br />have the freedom to distribute copies of free software (and charge for<br />this service if you wish), that you receive source code or can get it<br />if you want it, that you can change the software or use pieces of it<br />in new free programs; and that you know you can do these things.<br /><br />  To protect your rights, we need to make restrictions that forbid<br />anyone to deny you these rights or to ask you to surrender the rights.<br />These restrictions translate to certain responsibilities for you if you<br />distribute copies of the software, or if you modify it.<br /><br />  For example, if you distribute copies of such a program, whether<br />gratis or for a fee, you must give the recipients all the rights that<br />you have.  You must make sure that they, too, receive or can get the<br />source code.  And you must show them these terms so they know their<br />rights.<br /><br />  We protect your rights with two steps: (1) copyright the software, and<br />(2) offer you this license which gives you legal permission to copy,<br />distribute and/or modify the software.<br /><br />  Also, for each author''s protection and ours, we want to make certain<br />that everyone understands that there is no warranty for this free<br />software.  If the software is modified by someone else and passed on, we<br />want its recipients to know that what they have is not the original, so<br />that any problems introduced by others will not reflect on the original<br />authors'' reputations.<br /><br />  Finally, any free program is threatened constantly by software<br />patents.  We wish to avoid the danger that redistributors of a free<br />program will individually obtain patent licenses, in effect making the<br />program proprietary.  To prevent this, we have made it clear that any<br />patent must be licensed for everyone''s free use or not licensed at all.<br /><br />  The precise terms and conditions for copying, distribution and<br />modification follow.<br /><br />		    GNU GENERAL PUBLIC LICENSE<br />   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br /><br />  0. This License applies to any program or other work which contains<br />a notice placed by the copyright holder saying it may be distributed<br />under the terms of this General Public License.  The &quot;Program&quot;, below,<br />refers to any such program or work, and a &quot;work based on the Program&quot;<br />means either the Program or any derivative work under copyright law:<br />that is to say, a work containing the Program or a portion of it,<br />either verbatim or with modifications and/or translated into another<br />language.  (Hereinafter, translation is included without limitation in<br />the term &quot;modification&quot;.)  Each licensee is addressed as &quot;you&quot;.<br /><br />Activities other than copying, distribution and modification are not<br />covered by this License; they are outside its scope.  The act of<br />running the Program is not restricted, and the output from the Program<br />is covered only if its contents constitute a work based on the<br />Program (independent of having been made by running the Program).<br />Whether that is true depends on what the Program does.<br /><br />  1. You may copy and distribute verbatim copies of the Program''s<br />source code as you receive it, in any medium, provided that you<br />conspicuously and appropriately publish on each copy an appropriate<br />copyright notice and disclaimer of warranty; keep intact all the<br />notices that refer to this License and to the absence of any warranty;<br />and give any other recipients of the Program a copy of this License<br />along with the Program.<br /><br />You may charge a fee for the physical act of transferring a copy, and<br />you may at your option offer warranty protection in exchange for a fee.<br /><br />  2. You may modify your copy or copies of the Program or any portion<br />of it, thus forming a work based on the Program, and copy and<br />distribute such modifications or work under the terms of Section 1<br />above, provided that you also meet all of these conditions:<br /><br />    a) You must cause the modified files to carry prominent notices<br />    stating that you changed the files and the date of any change.<br /><br />    b) You must cause any work that you distribute or publish, that in<br />    whole or in part contains or is derived from the Program or any<br />    part thereof, to be licensed as a whole at no charge to all third<br />    parties under the terms of this License.<br /><br />    c) If the modified program normally reads commands interactively<br />    when run, you must cause it, when started running for such<br />    interactive use in the most ordinary way, to print or display an<br />    announcement including an appropriate copyright notice and a<br />    notice that there is no warranty (or else, saying that you provide<br />    a warranty) and that users may redistribute the program under<br />    these conditions, and telling the user how to view a copy of this<br />    License.  (Exception: if the Program itself is interactive but<br />    does not normally print such an announcement, your work based on<br />    the Program is not required to print an announcement.)<br /><br />These requirements apply to the modified work as a whole.  If<br />identifiable sections of that work are not derived from the Program,<br />and can be reasonably considered independent and separate works in<br />themselves, then this License, and its terms, do not apply to those<br />sections when you distribute them as separate works.  But when you<br />distribute the same sections as part of a whole which is a work based<br />on the Program, the distribution of the whole must be on the terms of<br />this License, whose permissions for other licensees extend to the<br />entire whole, and thus to each and every part regardless of who wrote it.<br /><br />Thus, it is not the intent of this section to claim rights or contest<br />your rights to work written entirely by you; rather, the intent is to<br />exercise the right to control the distribution of derivative or<br />collective works based on the Program.<br /><br />In addition, mere aggregation of another work not based on the Program<br />with the Program (or with a work based on the Program) on a volume of<br />a storage or distribution medium does not bring the other work under<br />the scope of this License.<br /><br />  3. You may copy and distribute the Program (or a work based on it,<br />under Section 2) in object code or executable form under the terms of<br />Sections 1 and 2 above provided that you also do one of the following:<br /><br />    a) Accompany it with the complete corresponding machine-readable<br />    source code, which must be distributed under the terms of Sections<br />    1 and 2 above on a medium customarily used for software interchange; or,<br /><br />    b) Accompany it with a written offer, valid for at least three<br />    years, to give any third party, for a charge no more than your<br />    cost of physically performing source distribution, a complete<br />    machine-readable copy of the corresponding source code, to be<br />    distributed under the terms of Sections 1 and 2 above on a medium<br />    customarily used for software interchange; or,<br /><br />    c) Accompany it with the information you received as to the offer<br />    to distribute corresponding source code.  (This alternative is<br />    allowed only for noncommercial distribution and only if you<br />    received the program in object code or executable form with such<br />    an offer, in accord with Subsection b above.)<br /><br />The source code for a work means the preferred form of the work for<br />making modifications to it.  For an executable work, complete source<br />code means all the source code for all modules it contains, plus any<br />associated interface definition files, plus the scripts used to<br />control compilation and installation of the executable.  However, as a<br />special exception, the source code distributed need not include<br />anything that is normally distributed (in either source or binary<br />form) with the major components (compiler, kernel, and so on) of the<br />operating system on which the executable runs, unless that component<br />itself accompanies the executable.<br /><br />If distribution of executable or object code is made by offering<br />access to copy from a designated place, then offering equivalent<br />access to copy the source code from the same place counts as<br />distribution of the source code, even though third parties are not<br />compelled to copy the source along with the object code.<br /><br />  4. You may not copy, modify, sublicense, or distribute the Program<br />except as expressly provided under this License.  Any attempt<br />otherwise to copy, modify, sublicense or distribute the Program is<br />void, and will automatically terminate your rights under this License.<br />However, parties who have received copies, or rights, from you under<br />this License will not have their licenses terminated so long as such<br />parties remain in full compliance.<br /><br />  5. You are not required to accept this License, since you have not<br />signed it.  However, nothing else grants you permission to modify or<br />distribute the Program or its derivative works.  These actions are<br />prohibited by law if you do not accept this License.  Therefore, by<br />modifying or distributing the Program (or any work based on the<br />Program), you indicate your acceptance of this License to do so, and<br />all its terms and conditions for copying, distributing or modifying<br />the Program or works based on it.<br /><br />  6. Each time you redistribute the Program (or any work based on the<br />Program), the recipient automatically receives a license from the<br />original licensor to copy, distribute or modify the Program subject to<br />these terms and conditions.  You may not impose any further<br />restrictions on the recipients'' exercise of the rights granted herein.<br />You are not responsible for enforcing compliance by third parties to<br />this License.<br /><br />  7. If, as a consequence of a court judgment or allegation of patent<br />infringement or for any other reason (not limited to patent issues),<br />conditions are imposed on you (whether by court order, agreement or<br />otherwise) that contradict the conditions of this License, they do not<br />excuse you from the conditions of this License.  If you cannot<br />distribute so as to satisfy simultaneously your obligations under this<br />License and any other pertinent obligations, then as a consequence you<br />may not distribute the Program at all.  For example, if a patent<br />license would not permit royalty-free redistribution of the Program by<br />all those who receive copies directly or indirectly through you, then<br />the only way you could satisfy both it and this License would be to<br />refrain entirely from distribution of the Program.<br /><br />If any portion of this section is held invalid or unenforceable under<br />any particular circumstance, the balance of the section is intended to<br />apply and the section as a whole is intended to apply in other<br />circumstances.<br /><br />It is not the purpose of this section to induce you to infringe any<br />patents or other property right claims or to contest validity of any<br />such claims; this section has the sole purpose of protecting the<br />integrity of the free software distribution system, which is<br />implemented by public license practices.  Many people have made<br />generous contributions to the wide range of software distributed<br />through that system in reliance on consistent application of that<br />system; it is up to the author/donor to decide if he or she is willing<br />to distribute software through any other system and a licensee cannot<br />impose that choice.<br /><br />This section is intended to make thoroughly clear what is believed to<br />be a consequence of the rest of this License.<br /><br />  8. If the distribution and/or use of the Program is restricted in<br />certain countries either by patents or by copyrighted interfaces, the<br />original copyright holder who places the Program under this License<br />may add an explicit geographical distribution limitation excluding<br />those countries, so that distribution is permitted only in or among<br />countries not thus excluded.  In such case, this License incorporates<br />the limitation as if written in the body of this License.<br /><br />  9. The Free Software Foundation may publish revised and/or new versions<br />of the General Public License from time to time.  Such new versions will<br />be similar in spirit to the present version, but may differ in detail to<br />address new problems or concerns.<br /><br />Each version is given a distinguishing version number.  If the Program<br />specifies a version number of this License which applies to it and &quot;any<br />later version&quot;, you have the option of following the terms and conditions<br />either of that version or of any later version published by the Free<br />Software Foundation.  If the Program does not specify a version number of<br />this License, you may choose any version ever published by the Free Software<br />Foundation.<br /><br />  10. If you wish to incorporate parts of the Program into other free<br />programs whose distribution conditions are different, write to the author<br />to ask for permission.  For software which is copyrighted by the Free<br />Software Foundation, write to the Free Software Foundation; we sometimes<br />make exceptions for this.  Our decision will be guided by the two goals<br />of preserving the free status of all derivatives of our free software and<br />of promoting the sharing and reuse of software generally.<br /><br />			    NO WARRANTY<br /><br />  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY<br />FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN<br />OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES<br />PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED<br />OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF<br />MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS<br />TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE<br />PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,<br />REPAIR OR CORRECTION.<br /><br />  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br />WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR<br />REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,<br />INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING<br />OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED<br />TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY<br />YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER<br />PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE<br />POSSIBILITY OF SUCH DAMAGES.<br /><br />		     END OF TERMS AND CONDITIONS<br /><br />	    How to Apply These Terms to Your New Programs<br /><br />  If you develop a new program, and you want it to be of the greatest<br />possible use to the public, the best way to achieve this is to make it<br />free software which everyone can redistribute and change under these terms.<br /><br />  To do so, attach the following notices to the program.  It is safest<br />to attach them to the start of each source file to most effectively<br />convey the exclusion of warranty; and each file should have at least<br />the &quot;copyright&quot; line and a pointer to where the full notice is found.<br /><br />    <br />    Copyright (C)   <br /><br />    This program is free software; you can redistribute it and/or modify<br />    it under the terms of the GNU General Public License as published by<br />    the Free Software Foundation; either version 2 of the License, or<br />    (at your option) any later version.<br /><br />    This program is distributed in the hope that it will be useful,<br />    but WITHOUT ANY WARRANTY; without even the implied warranty of<br />    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br />    GNU General Public License for more details.<br /><br />    You should have received a copy of the GNU General Public License<br />    along with this program; if not, write to the Free Software<br />    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA<br /><br /><br />Also add information on how to contact you by electronic and paper mail.<br /><br />If the program is interactive, make it output a short notice like this<br />when it starts in an interactive mode:<br /><br />    Gnomovision version 69, Copyright (C) year name of author<br />    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w''.<br />    This is free software, and you are welcome to redistribute it<br />    under certain conditions; type `show c'' for details.<br /><br />The hypothetical commands `show w'' and `show c'' should show the appropriate<br />parts of the General Public License.  Of course, the commands you use may<br />be called something other than `show w'' and `show c''; they could even be<br />mouse-clicks or menu items--whatever suits your program.<br /><br />You should also get your employer (if you work as a programmer) or your<br />school, if any, to sign a &quot;copyright disclaimer&quot; for the program, if<br />necessary.  Here is a sample; alter the names:<br /><br />  Yoyodyne, Inc., hereby disclaims all copyright interest in the program<br />  `Gnomovision'' (which makes passes at compilers) written by James Hacker.<br /><br />  , 1 April 1989<br />  Ty Coon, President of Vice<br /><br />This General Public License does not permit incorporating your program into<br />proprietary programs.  If your program is a subroutine library, you may<br />consider it more useful to permit linking proprietary applications with the<br />library.  If this is what you want to do, use the GNU Library General<br />Public License instead of this License.</pre> ', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (12, 2, 4, 0, 'en', '2005-09-01 16:39:00', '2005-09-01 16:39:43', '2005-09-15 13:57:27', 'Installation', '', '', '', '', '<p>Die Installation des Frameworks mit den ausgelieferten Modulen sollte schnell und einfach durchzuf&uuml;hren sein. Die entpackte Dateien m&uuml;ssen in das Verzeichniss kopiert werden auf den der Webserver Zugriff hat. Es muss eine MySql 4.1 Datenbank f&uuml;r das Projekt erstellt werden.</p> <p>Folgende Ordner m&uuml;ssen von php Skripten beschreibbar sein:</p>   <ul> <li>/cache <br />   </li><li>/config</li><li>/data</li><li>/data/article</li> <li>/data/common</li><li>/data/common/captcha</li><li>/data/misc</li><li>/data/navigation</li><li>/data/user<br />   </li><li>/logs<br />   </li> </ul>    <p>Danach Rufen sie admin.php im Wurzelordner auf und folgen den Installationsanweisungen. M&ouml;chten sie das System erst einmal testen sollten sie unter &quot;Insert sample content&quot; (Beispielinhalt) die Checkbox &quot;yes&quot; aktivieren. Der Beispielinhalt besteht aus der kompletten Smart3 Dokumentation.</p>   <p>Falls die Installation erfolgreich abgeschlossen wurde werden sie zum Login weitergeleitet wo Sie sich dann mit &quot;superuser&quot;, dem gerade erstellten Passwort und der Ziffernfolge im Bild einloggen k&ouml;nnen.</p>    <p>In den Smart3 Ordnern <strong>/views_smart</strong> und <strong>/templates_smart</strong> liegen ein paar vorinstallierte Views und den entsprechenden Templates die als Beispiel dazu dienen sich mit dem System vertraut zu machen und sofort loslegen zu k&ouml;nnen. Diese installierten Dateien wurden erstellt um eine klassisches Webprojekt zu realisieren und sind auf den Beispielinhalt abgestimmt. Diese k&ouml;nnen sie dann an ihre eigenen Bed&uuml;rfnisse anpassen. F&uuml;r eigene Projekte sollte sie jedoch einen neuen View- bzw Templateordner erstellen damit die Dateien nicht bei einem Smart3 Upgrade &uuml;berschrieben werden. </p> <p>/templates_meinProjekt</p> <p>/views_meinProjekt </p> Im Modul Options der Administration k&ouml;nnen sie dann diese beiden Ordner aktivieren.', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (13, 2, 4, 1, 'en', '2005-09-01 16:40:00', '2005-09-01 16:40:32', '2005-09-01 16:40:50', 'Die Action Klasse', '', '', '', '', '<p>Um das Einbinden und Erstellen der Instanz einer Actionklasse braucht man sich nicht zu k&uuml;mmern. Actionklassen sind Teile des Models und darum werden sie auch &uuml;ber eine Instanz des Models aufgerufen:</p>   <pre>$this-&gt;model-&gt;action( ''modulname'', ''actionname'', array() ); </pre>   <p>Diese Instanz steht in Viewklassen und auch in Actionklassen selbst zur Verf&uuml;gung. Die Model-Action-Methode f&uuml;hrt zuerst die <strong>validate()</strong> Methode und wenn diese TRUE zur&uuml;ckgibt die <strong>perform()</strong> Methode einer Actionkalsse aus. Actionklassen liegen in dem jeweiligen Modulordner <strong>/actions</strong>. <br /> </p>   <h4>Datenvalidierung</h4>   <p>Actionklassen haben einen defensiven Charakter. D.h. Daten die der Actionklasse &uuml;bergeben werden, sollten von dieser auf ihre G&uuml;ltigkeit &uuml;berpr&uuml;ft werden. Genau darin liegt der Zweck der validate() Methode einer Actionklasse die vom Model ausgef&uuml;hrt wird. </p>   <pre>public function validate( $data = FALSE ){}; </pre>   <p>Die $data Variable wird dieser Methode als Parameter &uuml;bergeben. Diese Variable ist dieselbe wie der dritte Parameter mit der diese Actionklasse aufgerufen wurde und enh&auml;lt alle Daten die f&uuml;r das Funktionieren n&ouml;tig sind:</p>   <pre>$this-model-&gt;action(''modulename'' , ''actionname'', <strong>$data</strong> ); </pre>   <p>Die validate() Methode muss TRUE zur&uuml;ckgeben damit die Hauptmethode perform() ausgef&uuml;hrt wird in der die eigentliche Aufgabe einer Actionklasse ausgef&uuml;hrt wird.</p>    <h4>Design einer Actionklasse </h4>    <p>Eine Actionklasse wird immer von einer Klasse SmartAction abgeleitet. Der Klassenname muss folgender Konvention entsprechen:</p>   <p>Action[Modulname][Definitionsname dieser Klasse]</p>   <p>Die Datei die diese Klasse enth&auml;lt muss mit dem selben Namen wie der Klassennamen abgespeichert werden und mit der zus&auml;tzlichen Endung .php im <strong>/actions</strong> Ordner des jeweiligen Moduls. Der Speicherort der folgenden Klasse w&auml;re dann:<br /> modules/common/action/ActionCommonTest.php</p>   <p>Danach kann diese vom System benutzt werden. Sie braucht also nicht extras registriert zu werden.<br /> </p>    <pre>class ActionCommonTest extends SmartAction<br />{<br />    /**<br />     * perform<br />     *<br />     * @param mixed $data<br />     */<br />    public function perform( $data = FALSE )<br />    {<br />    }<br />    <br />    /**<br />     * Validate data passed to this action<br />     * @param mixed $data<br />     * @return bool<br />     */<br />    public function validate( $data = FALSE )<br />    {<br />        return TRUE;<br />    }    <br />} <br /></pre>   <p>Dieses Beispiel einer Actionklasse zeigt die Methoden die darin enthalten sein k&ouml;nnen. Falls sie diese Klasse jetzt abspeichern als common/actions/ActionCommonTest.php und nachfolgend aufrufen, passiert nichts, weil in der perform() Methode nichts ausgef&uuml;hrt wird.</p>   <pre>$this-&gt;model-&gt;action( ''common'', ''test'', array() ); </pre>   <p> Deswegen hier ein Beispiel einer Klasse die Leerzeichen bevor und hinter einer &uuml;bergebenen Zeichenkette wegnimmt:<br /> </p>   <pre> class ActionCommonTrim extends SmartAction<br /> {<br />    /**<br />     * Trim a string<br />     *<br />     * @param mixed $data<br />     */<br />    public function perform( $data = FALSE )<br />    {<br />        $data[''result''] = trim( $data[''str''] ); <br />    }<br />    <br />    /**<br />     * Validate data passed to this action<br />     */<br />    public function validate( $data = FALSE )<br />    {<br />        if(!isset($data[''error'']))<br />        {<br />            throw new SmartModelException(''Missing &quot;error&quot; var''); <br />        }<br /><br />        if(!isset($data[''result'']))<br />        {<br />            $data[''error''] = &quot;array ''result'' key is not defined!&quot;;<br />            return FALSE<br />        }<br /><br />        if(!isset($data[''str'']))<br />        {<br />            $data[''error''] = &quot;array ''str'' key is not defined!&quot;;<br />            return FALSE;<br />        }<br /><br />        if(!is_string($data[''str'']))<br />        {<br />            $data[''error''] = &quot;array ''str'' value is not type string!&quot;;<br />            return FALSE;<br />        }<br />        return TRUE;<br />    }    <br />}</pre>   <p>Aufgerufen wird diese Klasse mit:</p>   <pre>// init variables<br />$trimmed_string = '''';<br />$error = '''';<br /><br />$this-&gt;model-&gt;action( ''common'', ''trim'',<br />                      array(''result'' =&gt; &amp; $trimmed_string,<br />                            ''str''    =&gt; ''  Dieses ist ein Test    '',<br />                            ''error''  =&gt; &amp; $error)); <br /><br />if(!empty($error))<br />{<br />    echo $error;<br />} <br />else<br />{<br />    echo $trimmed_string;<br />} <br /></pre>   <p>Die meiste Arbeit besteht darin die validate() Methode zu erstellen. Weil hier alle Daten auf ihre G&uuml;ltigkeit &uuml;berpr&uuml;ft werden sollen, damit die perform() Methode die eigentliche Aufgabe, n&auml;hmlich eine Zeichenkette zu trimmen, ausf&uuml;hren kann. </p> <p>Es gib verschiedene M&ouml;glichkeiten was passieren soll wenn Daten ung&uuml;ltig sind. Im Falle wo eine saubere Programmausf&uuml;hrung nicht gew&auml;hrleistet werden kann sollte eine Exception erstellt werden. Das System f&auml;ngt diese ab und erstellt ein Logeintrag und leitet zu einer Errorseite weiter auf der die Fehlermeldung erscheint. Dieses ist hier der Fall wenn eine error Variable nicht definiert wurde. Bei den anderen Validierungsmassnahmen wird das error Array mit den Fehlermeldungen geschrieben die sie dann selbst behandeln. Mit Ausnahme einer Exception sollte bei einem Validierungsfehler die Methode FALSE zur&uuml;ckgeben, damit perform() nicht ausgef&uuml;hrt wird. Andernfalls TRUE.</p> <p>Wichtig ist zu beachten, dass wenn eine Actionklasse Werte zur&uuml;ckgeben soll diese in einer Variable abgespeichert werden, die dem Daten-Array als Refernz zu &uuml;bergeben werden muss.</p>   <h4>Klassenvariablen </h4>   <p>Die Model Instanz &uuml;bergibt der Actionklasse folgende Klassen variablen:</p>   <ul> <li>$this-&gt;model - Instanz der Modelklasse. Wird unter anderem dazu ben&ouml;tigt eine weitere Action auszuf&uuml;hren.<br /> </li><li>$this-&gt;config - Globales Konfigurationsarray.</li><li>$this-&gt;constructorData - Daten die an den Actionklassen-Contructor &uuml;bergeben wurde, was eher selten der Fall sein d&uuml;rfte.<br />   </li> </ul> ', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (14, 2, 4, 3, 'en', '2005-09-01 16:41:00', '2005-09-01 16:41:12', '2005-09-29 09:58:03', 'Die Template (Vorlage)', '', '', '', '', '<p>Eine Template (Vorlage) ist nichts weiter als eine Datei in der festgelegt wird wie die Daten die von der Viewklasse aufbereitet wurden dargestellt werden sollen. Dieses kann in From einer HTML, PDF, XML, Text oder was auch immer sein. Smart3 wird mit einem PHP Templateparser ausgestatten. In den Templates kommt also php zum Einsatz. Es ist jedoch auch m&ouml;glich eine andere Templateengine zu benutzen. Dazu sp&auml;ter mehr. </p> <p>Templates f&uuml;r Projekte liegen im <strong>/templates_xxx</strong> Ordner. Es ist somit m&ouml;glich mehrere Templateordner zu betreiben in denen z.B. f&uuml;r ein Webprojekt verschieden Layouts ausgetestet werden k&ouml;nnen. Der aktive Templateordner wird im globalen Konfigurationsarray festgelegt. Der Name der Templatedatei muss folgender Konvention entsprechen:</p>   <pre>tpl.[Template Name].php </pre>   <p>In Templates stehen, wenn der in Smart3 verwendete php Templateparser benutzt wird, folgende Variablen und Funktionen zur verf&uuml;gung:</p>   <ul> <li><strong>$tpl</strong> - In diesem Array stehen alle Daten die von der entsprechenden Viewklasse aufbereitet wurde.</li><li><strong>$viewLoader-&gt;xxx()</strong> - Einbinden einer View mit Namen ''xxx'' <br />   </li><li><strong>php Funktionen - </strong>Dieses ist aus Sicherheitsgr&uuml;nden nicht immer w&uuml;nschenswert. Deshalb wurde in Smart3 ein Tokenanalyzer integriert, der, wenn er aktiv ist, nur ganz bestimmte im Konfigurationsarray festgelegte php Funktionen zul&auml;st. Siehe <a title="Smart Konfiguration" target="_self" href="?id_node=2&amp;id_article=16&amp;view=article">Konfiguration</a>.</li> </ul> <p> Einer n&auml;heren Betrachtung bedarf die Funktion $viewLoader-&gt;xxx(). Durch diese Funktion wird von innerhalb einer Template eine andere View und ihre dazugeh&ouml;rige Template eingebunden. Diese Funktion steht als Alternative zu include(), die aus Sicherheitsgr&uuml;nden nicht empfehlenswert ist. <strong>xxx</strong> steht f&uuml;r den Namen der View die eingebunden werden soll. Der Name muss also exakt mit der View &uuml;bereinstimmen damit es funktioniert. Also <strong>ViewXxx.php.</strong></p> <p>Man sollte es sich zum Prinzip machen so wenig wie m&ouml;glich prozeduraler Code in die Templates reinzuschreiben. Dieser sollte wenn m&ouml;glich in die Viewklassen verlegt werden. Also wenn Daten irgenwelche Textfilter durchlaufen m&uuml;ssen, etwa um email Adressen f&uuml;r Spamboots unkenntlich zu machen, so sollte dieses in der entsprechenden Viewklasse passieren. Es ist allerdings klar, das man in Templates nicht um if,else,endif,foreach, endforeach, echo herumkommt. Viel mehr sollte es allerdings nicht sein. Templates sind kein Tummelplatz f&uuml;r phpProgrammierer, sondern Designer m&uuml;ssen damit klarkommen. Darum muss der ViewProgrammierer dem Templatedesigner Klarheit dar&uuml;ber geben welche Daten und in welcher From ihm zur Verf&uuml;gung stehen.</p>   <h4>Ich m&ouml;chte eine andere Template Engine benutzten<br /> </h4>   <p>Smart3 kommt mit einem php Template Renderer. Dieser besteht aus einer Klasse SmartTplContainerPhp, die in der Datei /smart/includes/SmartTplContainerPhp.php liegt. Im globalen Konfigurationsarray wird festgelegt, dass diese Klasse f&uuml;r das Renderen von Templates benutzt wird. </p>   <pre> $SmartConfig[''public_template_engine''] = ''SmartTplContainerPhp'';</pre><p> Um eine andere Klasse zu benutzen muss dieses im Konfigurationsarray umge&auml;nder werden. Und diese Klasse muss sich nat&uuml;rlich im Ordner smart/includes befinden.</p><p>Als Neuerung wurde Smarty als Alternativengine hinzugef&uuml;gt.&nbsp;</p> <h4>Smarty</h4> <p>Es gibt 2 M&ouml;glichkeiten um Smarty als Templateengine zu aktivieren:</p> <ol>   <li>In der Konfigurationsdatei /config/my_config.php die Variable&nbsp; auf <br /> $SmartConfig[''public_template_engine''] = ''SmartTplContainerSmarty'';<br /> zu setzen. Hierbei wird bei allen Templates Smarty benutzt.</li>   <li>In der Viewklasse folgende Klassenvariable zu setzen:<br /> public $templateEngine = ''SmartTplContainerSmarty'';<br /> Somit kann man individuel f&uuml;r jede View die Templateengine setzen.</li> </ol> <p>Die in der Viewklasse im Array $this-&gt;tplVars enthaltenen Variablen werden somit vom Smarty Container automatisch &uuml;bernommen. In den Templates steht dieses Array dann folgen zur Verf&uuml;gung {$tpl.xxx}. (Als Beispiel sollten sie die Smarty Views und Templates betrachten.) In den Viewklassen &auml;ndert sich somit fast nichts gegen&uuml;ber wenn php als Templateengine benutzt wird. Es sollte jedoch auch m&ouml;glich sein innerhalb der Viewklassen direkt &uuml;ber die Smartyinstanz Templatevariablen zu setzen.<br /> <strong>$this-&gt;viewVar[''smarty'']</strong> enth&auml;lt die Smartyinstanz. F&uuml;r weiter Infos zu Smarty erhalten direkt <a href="http://smarty.php.net" target="_blank">von dieser Webseite</a> .</p> <h5>Hinweis&nbsp;</h5> <p>Falls sie Smarty einsetzen wollen, sollten sie im globalen Konfigurationsarray &quot;error_reporting&quot; auf E_ALL herrunterstellen. Smarty ist php4 Code und veranlasst das System unter E_STRICT viele Meldungen zu erstellen.<br /> </p>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (15, 2, 4, 2, 'en', '2005-09-01 16:41:00', '2005-09-01 16:41:51', '2005-09-27 14:04:11', 'Die View Klasse', '', '', '', '', '<p>In dieser Klasse wird zum grossen Teil festgelegt wie eine Anfrage an das System beantwortet wird. Im klassischen Fall einer Webseite w&auml;re das die Daten zu sammeln die f&uuml;r die Darstellung einer angefragten Webseite ben&ouml;tigt werden. Um das Einbinden und das Erstellen einer Instanz einer Viewklsse braucht man sich nicht zu k&uuml;mmern. Der Controller &uuml;bernimmt das alles. Anschliessend f&uuml;hrt der Controller die Methoden dieser Klasse in einer bestimmten Reihenfolge aus. Diese Reihenfolge ist:</p>   <ul> <li><strong> auth()</strong> - Falls n&ouml;tig kann hier ein Authentifizierungs-Mechanismus eingebaut werden.</li><li><strong>prependFilterChain()</strong> - Hier kann Code ausgef&uuml;hrt werden bevor der eigentlichen Hauptmethode. Z.B. http Headers senden, Spamboots abfangen usw.</li><li><strong>perform() </strong>- Die eigentliche Hauptmethode.</li><li><strong>appendFilterChain( &amp; $tplBufferContent )</strong> - Diese Methode wird ausgef&uuml;hrt nachdem eine Template gerendert wurde. $tplBufferContent enth&auml;lt den Inhalt einer gerenderten Template. Eine M&ouml;gliche Anwendung w&auml;re Kommentare aus Templates zu entfernen.</li> </ul> <p>Deweiteren gibt es folgende Klassenvariablen die man sich merken sollte:</p>   <ul> <li><strong> $tplVar</strong> - Dies ist das Array das s&auml;mtliche Datenvariablen enth&auml;lt die in der Template eingef&uuml;gt werden k&ouml;nnen. Ex.: $this-&gt;tplVar[''title''] = ''Hello World''; steht in der Template als $tpl[''title''] zur Verf&uuml;gung.</li><li><strong>$viewVar</strong> - In diesem Array k&ouml;nnen alle Daten abgelegt werden die in einer View oder mehreren Views verwendet werden. Dieses ist sehr n&uuml;tzlich bei Daten die in allen verschachtelten Views zur Verf&uuml;gung stehen m&uuml;ssen.</li><li><strong>$model</strong> - Die Instanz der Model Klasse. Wird ben&ouml;tigt um eine Action auszuf&uuml;hren. Ex.: $this-&gt;model-&gt;action(''common'',''test'');</li><li><strong>$session</strong> - Die Instanz der Session Klasse</li><li><strong>$config</strong> - Dieses Array enth&auml;lt s&auml;mtliche Konfigurationsdaten.</li><li><strong>$template</strong> - Dieser String enth&auml;lt den Name der Template die mit dieser View verkn&uuml;pft ist. Im Prinzip geht der Controller davon aus, dass die Template den selben Name hat wie die Viewklasse. Ist immer unbedingt anzugeben wenn die Template einen anderen Name hat.</li><li><strong>$renderTemplate</strong> - Ist vom Type BOOL. Steht diese aus FALSE wird keine Template gerendert.</li><li><strong>$templateEngine</strong> - F&uuml;r jede View kann individuell die Templateengine festgelegt werden. Zur Zeit gibt es&nbsp; 2 Engines:&nbsp; ''SmartTplContainerPhp'' (Voreinstellung) und ''SmartTplContainerSmarty'' <br />   </li> <li><strong>$templateFolder</strong> - Hier kann man den Pfad zum Templateordner angeben wenn dieser eine Anderer sein soll wie im Konfigurationsarray angegeben.</li><li><strong>$viewData</strong> - Es kann vorkommen, dass einer View Instanz vom Controller Daten &uuml;bergeben werden. Diese stehen dann in dieser Variable.</li><li><strong>$cacheExpire</strong> - Bestimmt die Zeit in Sekunden wo die Template zwischengespeichert (gecacht) wird. 0 bedeutet, dass die Template nicht gecacht werden soll.</li><li><strong>$cacheId</strong> - ID der Cachedatei. Wird normalerweise vom System erstellt. <br />   </li>  </ul> <p>View Klassen die zum erstellen eines Webprojektes ben&ouml;tig werden stehen im Wurzelordner <strong>/views_xxx</strong> . Wobei xxx ein beliebiger Name sein kann. Es ist somit m&ouml;glich mehere View Ordner paralell zu betreiben. Das gobale Konfigurationsarray enh&auml;lt den Ordnername der gerade aktiv ist.</p>   <h5>Beispiel einer ViewKlasse.</h5>   <p>Diese Beispiel zeigt einen Auszug aus der Viewklasse in ViewNode.php. Also es geht hier darum die Daten des angefragten Navigationsknoten zu erhalten, ebenso wie die Daten der Unterknoten (child), der Knotenast (wie bei yahoo) und entsprechende Templatevariablen mit diesen Daten zu beschreiben. Besonders beachtet sollte man die prependFilterChain() Methode. Hier wird gepr&uuml;ft ob die id_node, also die Navigationsknoten ID nur Ziffern enth&auml;lt. Falls nicht wird die Error Template gerendert.</p>   <pre>class ViewNode extends SmartView<br />{<br />    /**<br />     * Cache expire time in seconds for this view<br />     * 0 = cache disabled<br />     */<br />    public $cacheExpire = 3600;<br />    <br />    /**<br />     * Execute the view of the &quot;node&quot; template<br />     */<br />    function perform()<br />    { <br />        // init variables (see private function below)<br />        $this-&gt;initVars();<br />          <br />        // get requested node content<br />        $this-&gt;model-&gt;action(''navigation'',''getNode'', <br />                             array(''result''  =&gt; &amp; $this-&gt;tplVar[''node''],<br />                                   ''id_node'' =&gt; $this-&gt;current_id_node,<br />                                   ''fields''  =&gt; array(''title'',''body'',''id_node'',''media_folder'')));<br /><br />        // get child nodes content of the requested node<br />        // only with status=2, means active      <br />        $this-&gt;model-&gt;action(''navigation'',''getChilds'', <br />                             array(''result''  =&gt; &amp; $this-&gt;tplVar[''childNodes''],<br />                                   ''id_node'' =&gt; $this-&gt;current_id_node,<br />                                   ''status''  =&gt; array(''='',2),<br />                                   ''fields''  =&gt; array(''title'',''short_text'',''id_node'')));<br /> <br />        // get navigation node branch content of the requested node<br />        $this-&gt;model-&gt;action(''navigation'',''getBranch'', <br />                             array(''result''  =&gt; &amp; $this-&gt;tplVar[''nodeBranch''],<br />                                   ''id_node'' =&gt; $this-&gt;current_id_node,<br />                                   ''fields''  =&gt; array(''title'',''id_node'')));                   <br />    }<br /><br />    /**<br />     * authentication<br />     *<br />     */<br />    public function auth()<br />    {<br />    }<br /><br />    /**<br />     * prepend filter chain<br />     *<br />     */<br />    public function prependFilterChain()<br />    {<br />        // fetch the current id_node. If no id_node defined or not numeric<br />        // this view class loads the error template<br />        if( !isset($_REQUEST[''id_node'']) || preg_match(&quot;/[^0-9]+/&quot;,$_REQUEST[''id_node'']) ) <br />        {<br />            $this-&gt;template  = ''error'';     <br />        }<br />        else<br />        {<br />            $this-&gt;current_id_node    = (int)$_REQUEST[''id_node''];          <br />        }<br />        <br />        // filter action of the common module to prevent browser caching<br />        $this-&gt;model-&gt;action( ''common'', ''filterDisableBrowserCache'');    <br />    }<br /><br />    /**<br />     * append filter chain<br />     *<br />     */<br />    public function appendFilterChain( &amp; $outputBuffer )<br />    {<br />        // filter action of the common module that trims the html output<br />        $this-&gt;model-&gt;action( ''common'', ''filterTrim'', array(''str'' =&gt; &amp; $outputBuffer) );        <br />    }<br /><br />    /**<br />     * init some variables<br />     *<br />     */    <br />    private function initVars()<br />    {<br />        // template array variables<br />        $this-&gt;tplVar[''node'']       = array();<br />        $this-&gt;tplVar[''childNodes''] = array();<br />        $this-&gt;tplVar[''nodeBranch''] = array();<br />        <br />        // template var with charset used for the html pages<br />        $this-&gt;tplVar[''charset''] = &amp; $this-&gt;config[''charset''];<br />    }<br />}<br /> </pre>   <p>Vor allem bei gr&ouml;sseren Projekten kommt den zwei Filter Methoden gr&ouml;ssere Bedeutung zu. So ist es vorstellbar ein Modul zu entwickeln das Filtereinstellungen jeder Viewklasse verwalten k&ouml;nnte. D.h. in jeder Filtermethode einer Viewklasse w&auml;ren dann jeweils nur ein Actionaufruf. Beispiel f&uuml;r den Inhalt einer prependFilterChain() Methode w&auml;re dann:</p>   <pre>$this-&gt;model-&gt;action(''filtermanager'', ''runPrependFilters'',array(''view'' =&gt; ''xxx'')); </pre>   <p>Mit Sicherheit wird in n&auml;chster Zeit ein solches Modul kommen. </p>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (16, 2, 4, 4, 'en', '2005-09-01 16:42:00', '2005-09-01 16:42:41', '2005-09-01 16:42:57', 'Konfiguration', '', '', '', '', '<p>Smart3 greift auf ein php Konfigurationsarray zur&uuml;ck das es dazu ben&ouml;tigt um intern korrekt zu funktionieren und um dem Administrator bzw Modulprogrammierer eines Projektes die M&ouml;glichkeit zu geben auf das Verhalten des Systems Einfluss zu nehmen.</p> <p>Es gibt zwei M&ouml;glichkeiten die Konfigurationsvariablen zu ver&auml;ndern:</p>    <ol> <li>Im Wurzel-Ordner <strong>/config</strong> steht die Datei <strong>my_config_dist.php. </strong>Diese Datei muss in <strong>my_config.php</strong> umbenannt werden. Darin kann man die Default-Konfiguration von Smart3 &uuml;berschreiben indem man den darin enthaltenen Variablen andere Werte zuweist.</li><li>Indem man Module entwickelt die das Konfigurationsarray &uuml;berschreiben. Einige Module &uuml;berschreiben Konfigurationsvariablen.<br /> </li> </ol> ', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (17, 2, 4, 5, 'en', '2005-09-01 16:43:00', '2005-09-01 16:43:29', '2005-09-15 14:03:09', 'Die Smart3 Projekt Views und Vorlagen', '', '', '', '', '<p>In den Wurzelordnern /templates_smart und /views_smart stehen View Klassen bzw ihre entsprechenden Templates die auf ein klassisches Webprojekt zugeschnitten sind. Diese k&ouml;nnen sie als Vorlage benutzten um ihre eigenen Projekte zu erstellen. Sie sollten allerdings ihre Projektviews bzw Templates in Ordnern mit neuem Namen abspeichern. Z.B. /views_myproject /templates_myproject. Ansonsten werden beim n&auml;chsten Update ihre ver&auml;nderten Dateien &uuml;berschrieben. <br />  </p> <p>Es sind folgende Views und Templates vorhanden in alphabetischer Reihenfolge:</p>   <ul> <li><strong>ViewArticle.php</strong> bzw <strong>tpl.article.php</strong> -  Hier werden die Daten des angefragten Artikels erstellt bzw in der korrespondierenden Vorlage angezeigt.</li><li><strong>ViewError.php</strong> bzw <strong>tpl.error.php</strong> -  Steht im Konfiguartionsarray die Fehlerbehandlung auf Schow, so werden hier&uuml;ber Fehlermeldungen ausgegeben.</li> <li><strong>ViewHeader.php</strong> bzw <strong>tpl.header.php</strong> - Hier wird der Kopf zentral f&uuml;r jede Webseite erstellt. Diese View wird von innerhalb jeder anderen Template die den Kopf ben&ouml;tigt eingebunden.<br /> </li><li><strong>ViewIndex.php</strong> bzw <strong>tpl.index.php</strong> - Daten zur Eingangsseite und ihr Aussehen werden hier bestimmt.</li><li><strong>ViewLogout.php</strong> - Hat sich ein Webbesucher vorher &uuml;ber das Administrationsinterface eingelogt so erscheint auf der &ouml;ffentlichen Webseite ein Link um sich auszuloggen. &Uuml;ber diesen Link wir die Logout View aufgerufen die die entsprechende Prozedur ausf&uuml;hrt. Diese View ben&ouml;tigt keine Template.</li><li> <strong>ViewMainNavigation.php</strong> bzw <strong>tpl.mainNavigation.php</strong> - Hier werden die Hauptnavigations Links der rechten Spalte zentral f&uuml;r jede Webseite erstellt. Jede andere Template die diese Links ben&ouml;tigt bindet diese an entsprechender Stelle ein.<br /> </li><li><strong>ViewNode.php</strong> bzw <strong>tpl.node.php</strong> - Hier werden die Daten zu dem erfragten Navigationsknoden und seinen Unterknoten gesammelt und dargestellt. Fast jede Webseite (also Knoten) des ganzen Webprojektes wird &uuml;ber diese View dargestellt.</li><li><strong>ViewPicture.php</strong> bzw <strong>tpl.picture.php</strong> - Enth&auml;lt ein Text ein Thumbnail-Bild und klickt man darauf so wird diese View aktiviert die das Bild in ganzer Gr&ouml;sse darstellt.</li><li><strong>ViewSearch.php</strong> bzw <strong>tpl.search.php - </strong>Hier werden alle Artikeltitel mit den jeweiligen Navigationsknoten angezeigt die einem Suchkriterium entsprechen.<br />   </li> <li><strong>ViewSimpleNode.php</strong> bzw <strong>tpl.simpleNode.php</strong> - F&uuml;r Knoten die keine Unterknoten enthalten, also wo nur der darin enthaltener Text dargestellt werden soll ben&ouml;tigen diese View.</li><li><strong>ViewSitemap.php</strong> bzw <strong>tpl.sitemap.php</strong> - Hier werden alle Naviagtionsknoten hierarschisch dargestellt.</li> </ul>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (18, 2, 4, 6, 'en', '2005-09-01 16:44:00', '2005-09-01 16:44:13', '2005-09-15 14:06:22', 'Roadmap', '', '', '', '', '<p>Erstmal muss Smart3 ausgiebig getestet werden und gegebenfalls notwendigen &Auml;nderungen unterworfen werden um aus dem Alphastadium herrauszukommen. Also stabil und zuverl&auml;ssig. Es gibt noch einige Fragen zu kl&auml;ren und das im speziellen mit der PHPCodeAnalyzer Klasse die einige Probleme bereitet.<br />  </p>   <p>Bei den Modulen sollte zudem das Layout &uuml;berarbeitet werden bzw die Benutzerfreundlichkeit. Dieses &uuml;berlasse ich gerne jenen die mehr davon verstehen als ich selbst.</p>   <p>Insofern ben&ouml;tigt kommt <a title="Tiny Mice HTML Editor" target="_blank" href="http://tinymce.moxiecode.com/">TinyMice</a> als Editor zum Einsatz. Als Alternative ist <a target="_blank" href="">PEAR text_wiki</a> geplant. Beide L&ouml;sungen haben ihre Vor- und Nachteile. Einen Idealweg gibt es nicht. Tiny Mice hat den Vorteil, dass er benutzerfreundlich ist. Der Nachteil ist, dass man html Code in der Datenbank hat, was Schwierigkeiten bereitet wenn man die Daten weiterverarbeiten m&ouml;chte. Pear Text_wiki ist eben nicht so benutzerfreundlich weil man Layoutver&auml;nderungen am Text nicht sehen kann und zudem kryptische Anweisungen in den Text schreiben muss. Der Vorteil ist, dass sich die Daten im nachhinein besser weiterverarbeiten lassen.<br /> </p>   <p>In Planung sind folgende Module:</p>     <ul> <li><strike><strong>Artikel Modul</strong></strike> -  wobei jeder Artikel einem Navigationsknoten untergeordnet werden kann (done)<br />    </li><li><strike><strong>Links Modul</strong></strike> - gleiches wie oben (done)<br />    </li><li><strong>Schl&uuml;sselwort Modul</strong> - Durch dieses wird es m&ouml;glich Elemente horrizontal untereinander zu verbinden. Es lassen sich so komplexe Zusammenh&auml;nge herstellen und darstellen.</li><li><strong>Filter Modul</strong> - Hier geht es um die Administration von FilterActions die in den unterschiedlichen ViewKlassen zum Einsatz kommen. </li> </ul>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (19, 2, 4, 7, 'en', '2005-09-01 16:44:00', '2005-09-01 16:44:46', '2005-09-01 16:45:05', 'Mitmachen', '', '', '', '', '<p>Zur Zeit arbeitet nur ein Einziger am Smart3 Projekt. Wer Zeit, Lust, Energie und das n&ouml;tige KnowHow hat am Projekt mitzuarbeiten sollte sich &uuml;ber diese Email melden: <a href="mailto:smart@open-publisher.net" target="_self" title="Mitmachen Email">smart@open-publisher.net</a></p> <p>Gefragt sind Leute die sich in mindestens einem der folgenden Fachgebiete auskennen:<br />  </p>   <ul> <li>Webseitendesign (Umsetzung) f&uuml;r die Administrationsoberfl&auml;che<br />   </li><li>Webseiten Usability<br />   </li><li>Gute PHP5 Kentnisse.</li><li>Gute MySql Kentnisse. Am Besten mit der Version 4.1</li><li>Redaktionelle &Uuml;berarbeitung der Dokumentation bzw &Uuml;bersetzung ins Englische, Franz&ouml;sische<br />   </li><li>Geduld, und den n&ouml;tigen Willen das Projekt vorran zu bringen.<br />   </li> </ul>  Ziel ist es die bestehenden Module auszubauen bzw Neue zu erstellen.<br />  <br /> ', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (20, 9, 4, 0, 'en', '2005-09-01 16:45:00', '2005-09-01 16:45:39', '2005-09-01 16:45:57', 'Actions', '', '', '', '', '<p>Hier befindet sich eine Liste der Actionklassen des Navigationsmodul die zum erstellen der Views benutzt werden k&ouml;nnen. Es gibt noch eine Reihe weiterer Klassen, die aber nur f&uuml;r die Views im Administrationsbereich verwendung finden.</p> <p>Die Parameter der Actionaufrufe haben immer die selbe Bedeutung. Erkl&auml;rung folgender Parameter:</p> <ul> <li><div><strong>''id_node''</strong> - Navigationsknotenpunkt ID auf die sich die Action bezieht</div></li><li><div><strong>''result''</strong> - Hier muss die Referenz eines vorher definierten leeren Arrays &uuml;bergeben werden. <br />Ex.: &amp;$this-&gt;tplVar </div></li><li><div><strong>''fields''</strong> - Array mit den Namen der Knoten Datenbank-Felder. Die m&ouml;glichen Felder eines Knoten sind: ''id_node'', ''id_parent'', ''id_sector'', ''id_view'', ''status'', ''rank'', ''title'', ''short_text'', ''body'', ''format'', ''logo'', ''media_folder''</div></li><li><div><strong>''status''</strong> - In diesem array wird definiert welchen Status der oder die Knoten haben m&uuml;ssen. Das erste Element im Array definiert die Beziehung. Eine von den folgenden sind m&ouml;glich: ''&lt;'',''&gt;'',''='',''&gt;='',''&lt;=''. Das zweite element definiert den Statuswert. entweder 1 oder 2. Beispiel: array(''&gt;'',1). Der oder die Knoten m&uuml;ssen einen Status gr&ouml;sser als 1 haben. <strong>1 bedeutet inaktiv. 2 bedeutet activ</strong>.</div></li><li><div><strong>''order''</strong> - Kann das Resultat aus meheren Knoten bestehen so wird in einem Array festgelegt wie die Reihenfolge des Resultates sortiert wird. Das erste Element im array definiert nach welchem Feld sortiert wird. M&ouml;gliche Felder sind <strong>''title'',''rank''</strong>. Das zweite Element definiert die Reihenfolge. M&ouml;gliche Werte sind <strong>''asc'',''desc''</strong>. Also f&uuml;r aufsteigend und absteigend. Beispiel: array(''title'',''asc''). Wird order nicht angegeben so wird nach ''rank'' ''asc'' das Resultat sortiert.<br /><br /></div></li> </ul> <p>Eine Actionklasse pr&uuml;ft immer die Parameter auf ihre G&uuml;ltigkeit. Sollten Parameter nicht das richtige Format haben oder Parameter die fehlen, so erstellt die Klasse eine Exception. D.h. der Programablauf wird umgeleietet. Entweder wird eine Fehlermeldung angezeigt. Oder es nur ein Logeintrag geschrieben im Wurzelordner <strong>/logs. </strong>Es h&auml;ngt davon ab wie die Konfigurationsvariablen f&uuml;r die Fehlerbehandlungengesetzt sind. </p> <p> </p> <h5>getNode</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit dem Inhalt eines Knotens</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''navigation'', ''getNode'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array(),<br />                               ''fields''  =&gt; array() ));<br /> </pre> <h5>getChilds</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit dem Inhalt der Kindsknoten eines Knotens</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''navigation'', ''getChilds'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''status''  =&gt; array,       // optional<br />                               ''order''   =&gt; array,       // optional<br />                               ''fields''  =&gt; array() ));<br /> </pre> <h5>getBranch</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit dem Inhalt jedem Knoten de Baumastes auf dem der Knoten sich befindet</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''navigation'', ''getBanch'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array() ));</pre> <h5>getTree</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit dem Inhalt des Knotenbaumes. Wird id_node angegeben so wird der Baum ab diesem Konten zur&uuml;ckgegeben.</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''navigation'', ''getTree'',<br />                         array(''id_node'' =&gt; integer, // optional<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array() ));<br />  </pre> <h5>getAllThumbs</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Bilderdaten eines Knotens</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''navigation'', ''getAllThumbs'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_pic'',''id_node'',''title'',<br />                                                  ''description'',''file'',''height'',<br />                                                  ''width'',''rank'',''mime'',''size'') ));<br /> </pre> <h5>getAllFiles</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Dateidaten eines Knoten</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''navigation'', ''getAllFiles'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_file'',''id_node'',''title'',<br />                                                  ''description'',''file'',''rank'',<br />                                                  ''mime'',''size'')));<br /> </pre> <h5>getPicture</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Daten eines Bildes</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''navigation'', ''getPicture'',<br />                         array(''id_pic'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_pic'',''id_node'',''title'',<br />                                                  ''description'',''file'',''height'',<br />                                                  ''width'',''rank'',''mime'',<br />                                                  ''size'',''media_folder'') ));<br /> </pre> <h5>getFile</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Daten einer Datei</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''navigation'', ''getFile'',<br />                         array(''id_file'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_file'',''id_node'',''title'',<br />                                                  ''description'',''file'',''rank'',<br />                                                  ''mime'',''size'',''media_folder'')));</pre> ', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (21, 12, 4, 0, 'en', '2005-09-01 16:46:00', '2005-09-01 16:46:30', '2005-09-03 10:14:22', 'Actions', '', '', '', '', '<p>Durch die Actions dieses Moduls kann man auf den Inhalt der Texte zugreifen.<!--StartFragment --><!--StartFragment --></p> <p>Die Parameter der Actionaufrufe haben immer die selbe Bedeutung. Erkl&auml;rung folgender Parameter:</p> <ul> <li><div><strong>''id_text''</strong> - Text ID auf die sich die Action bezieht</div></li><li><div><strong>''result''</strong> - Hier muss die Referenz eines vorher definierten leeren Arrays &uuml;bergeben werden. <br />Ex.: &amp;$this-&gt;tplVar </div></li><li><div><strong>''fields''</strong> - Array mit den Namen der Knoten Datenbank-Felder. Die m&ouml;glichen Felder eines Textes sind: ''id_text'',''status'',''title'',''short_text'',''body'',''media_folder''</div></li><li><div><!--StartFragment --> <strong>''order''</strong> - Besteht das Resultat aus meheren Texten so wird in einem Array festgelegt wie die Reihenfolge des Resultates sortiert wird. Das erste Element im array definiert nach welchem Feld sortiert wird. M&ouml;gliche Felder sind <strong>''title'',''status''</strong>. Das zweite Element definiert die Reihenfolge. M&ouml;gliche Werte sind <strong>''asc'',''desc''</strong>. Also f&uuml;r aufsteigend und absteigend. Beispiel: array(''title'',''asc''). Wird order nicht angegeben so wird nach ''title'' ''asc'' das Resultat sortiert.<br /></div></li><li><div><strong>''status''</strong> - In diesem array wird definiert welchen Status der oder die Knoten haben m&uuml;ssen. Das erste Element im Array definiert die Beziehung. Eine von den folgenden sind m&ouml;glich: ''&lt;'',''&gt;'',''='',''&gt;='',''&lt;=''. Das zweite element definiert den Statuswert. entweder 1 oder 2. Beispiel: array(''&gt;'',1). Der oder die Knoten m&uuml;ssen einen Status gr&ouml;sser als 1 haben. <strong>1 bedeutet inaktiv. 2 bedeutet activ</strong>.<br /><br /></div></li> </ul> <p>Eine Actionklasse pr&uuml;ft immer die Parameter auf ihre G&uuml;ltigkeit. Sollten Parameter nicht das richtige Format haben oder Parameter die fehlen, so erstellt die Klasse eine Exception. D.h. der Programablauf wird umgeleitet. Entweder wird eine Fehlermeldung angezeigt. Oder es nur ein Logeintrag geschrieben im Wurzelordner <strong>/logs. </strong>Es h&auml;ngt davon ab wie die Konfigurationsvariablen f&uuml;r die Fehlerbehandlungengesetzt sind. </p> <h5>getText</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit dem Inhalt eines Textes</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''misc'', ''getText'',<br />                     array(''id_text'' =&gt; integer,<br />                           ''result''  =&gt; &amp; array(),<br />                           ''fields''  =&gt; array() ));</pre> <h5>getTextes</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit dem Inhalt mehrer Texte</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''misc'', ''getTextes'',<br />                     array(''ids''    =&gt; array(id_x,id_y,id_z,..,..,..),<br />                           ''result'' =&gt; &amp; array(),<br />                           ''order''  =&gt; array(),<br />                           ''fields'' =&gt; array() ));</pre> <h5>getAllThumbs</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Bilderdaten eines Textes</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''misc'', ''getAllThumbs'',<br />                         array(''id_text'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_pic'',''id_text'',''title'',<br />                                                  ''description'',''file'',''height'',<br />                                                  ''width'',''rank'',''mime'',''size'') ));<br /> </pre> <h5>getAllFiles</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Dateidaten eines Textes</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''misc'', ''getAllFiles'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_file'',''id_text'',''title'',<br />                                                  ''description'',''file'',''rank'',<br />                                                  ''mime'',''size'')));<br /> </pre> <h5>getPicture</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Daten eines Text-Bildes</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''misc'', ''getPicture'',<br />                         array(''id_pic'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_pic'',''id_text'',''title'',<br />                                                  ''description'',''file'',''height'',<br />                                                  ''width'',''rank'',''mime'',<br />                                                  ''size'',''media_folder'') ));<br /> </pre> <h5>getFile</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit den Daten einer Text-Datei</p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''misc'', ''getFile'',<br />                         array(''id_file'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''fields''  =&gt; array(''id_file'',''id_text'',''title'',<br />                                                  ''description'',''file'',''rank'',<br />                                                  ''mime'',''size'',''media_folder'')));</pre> ', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (24, 43, 4, 0, 'en', '2005-09-02 13:34:00', '2005-09-02 13:34:15', '2005-09-03 10:33:36', 'Actions', '', '', '', '', '<p>This module provide a couple of action classes which you can use in public views. <br /> </p>       <h5>getArticle</h5>     <p><strong>Description:</strong> Fill an array with the content of an article<br /> </p>     <p><strong>Usage:</strong></p>     <pre>$this-&gt;model-&gt;action(''article'', ''getArticle'',<br />                     array(''id_article'' =&gt; integer,<br />                           ''result''     =&gt; &amp; array(),<br />                           ''fields''     =&gt; array(''title'',''overtitle'',<br />                                                 ''subtitle'',''header'',<br />                                                 ''description'',''body'',<br />                                                 ''ps'',''pubdate'',<br />                                                 ''articledate'',''modifydate'',<br />                                                 ''logo'',''media_folder'') ));</pre>   <h5>&nbsp;</h5> <h5>&nbsp;</h5> <h5>getArticles</h5>      <p><strong>Description:</strong> Fill an array with the content of articles that are linked to a navigation node. Default order is ''rank asc''<br /> </p>      <p><strong>Usage:</strong></p>      <pre>$this-&gt;model-&gt;action(''article'', ''getArticles'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''status''  =&gt; array(''&gt;|&lt;|=|&gt;=|&lt;=|!='', 0|1|2|3|4),// optional<br />                               ''order''   =&gt; array(''rank|title|<br />                                            articledate|pubdate|modifydate<br />                                            overtitle|subtitle'', ''asc|desc''),  // optional<br />                               ''fields''  =&gt; array(''title'',''overtitle'',<br />                                                  ''subtitle'',''header'',<br />                                                  ''description'',''body'',<br />                                                  ''ps'',''pubdate'',<br />                                                  ''articledate'',''modifydate'',<br />                                                  ''logo'',''media_folder'') ));</pre> <h5>&nbsp;</h5> <h5>search</h5>               <p><strong>Description:</strong> Fill an array with the data of articles that match a search string<br /> </p>  <p><strong><strong>Usage:</strong></strong></p>  <strong>      </strong> <pre>$this-&gt;model-&gt;action(''article'', ''search'',<br />                         array(''result''  =&gt; &amp; array,<br />                               ''search''  =&gt; string,   // search string<br />                               ''status''  =&gt; array(''&gt;|&lt;|=|&gt;=|&lt;=|!='', 0|1|2|3|4),// optional<br />                               ''order''   =&gt; array(''rank|title|<br />                                            articledate|pubdate|modifydate<br />                                            overtitle|subtitle'', ''asc|desc''),  // optional<br />                               ''fields''  =&gt; array(''title'',''overtitle'',''id_node'',<br />                                                  ''subtitle'',''header'',<br />                                                  ''description'',''body'',<br />                                                  ''ps'',''pubdate'',<br />                                                  ''articledate'',''modifydate'',<br />                                                  ''logo'',''media_folder'') ));</pre>', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (22, 6, 4, 0, 'en', '2005-09-01 16:47:00', '2005-09-01 16:47:29', '2005-09-01 16:47:54', 'Modul-Lizenz', '', '', '', '', '<p>Die mit Smart3 ausgelieferten <strong>Module</strong> stehen unter folgender Lizenz:</p>   <pre>		    GNU GENERAL PUBLIC LICENSE<br />		       Version 2, June 1991<br /><br /> Copyright (C) 1989, 1991 Free Software Foundation, Inc.<br />                       51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA<br /> Everyone is permitted to copy and distribute verbatim copies<br /> of this license document, but changing it is not allowed.<br /><br />			    Preamble<br /><br />  The licenses for most software are designed to take away your<br />freedom to share and change it.  By contrast, the GNU General Public<br />License is intended to guarantee your freedom to share and change free<br />software--to make sure the software is free for all its users.  This<br />General Public License applies to most of the Free Software<br />Foundation''s software and to any other program whose authors commit to<br />using it.  (Some other Free Software Foundation software is covered by<br />the GNU Library General Public License instead.)  You can apply it to<br />your programs, too.<br /><br />  When we speak of free software, we are referring to freedom, not<br />price.  Our General Public Licenses are designed to make sure that you<br />have the freedom to distribute copies of free software (and charge for<br />this service if you wish), that you receive source code or can get it<br />if you want it, that you can change the software or use pieces of it<br />in new free programs; and that you know you can do these things.<br /><br />  To protect your rights, we need to make restrictions that forbid<br />anyone to deny you these rights or to ask you to surrender the rights.<br />These restrictions translate to certain responsibilities for you if you<br />distribute copies of the software, or if you modify it.<br /><br />  For example, if you distribute copies of such a program, whether<br />gratis or for a fee, you must give the recipients all the rights that<br />you have.  You must make sure that they, too, receive or can get the<br />source code.  And you must show them these terms so they know their<br />rights.<br /><br />  We protect your rights with two steps: (1) copyright the software, and<br />(2) offer you this license which gives you legal permission to copy,<br />distribute and/or modify the software.<br /><br />  Also, for each author''s protection and ours, we want to make certain<br />that everyone understands that there is no warranty for this free<br />software.  If the software is modified by someone else and passed on, we<br />want its recipients to know that what they have is not the original, so<br />that any problems introduced by others will not reflect on the original<br />authors'' reputations.<br /><br />  Finally, any free program is threatened constantly by software<br />patents.  We wish to avoid the danger that redistributors of a free<br />program will individually obtain patent licenses, in effect making the<br />program proprietary.  To prevent this, we have made it clear that any<br />patent must be licensed for everyone''s free use or not licensed at all.<br /><br />  The precise terms and conditions for copying, distribution and<br />modification follow.<br /><br />		    GNU GENERAL PUBLIC LICENSE<br />   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br /><br />  0. This License applies to any program or other work which contains<br />a notice placed by the copyright holder saying it may be distributed<br />under the terms of this General Public License.  The &quot;Program&quot;, below,<br />refers to any such program or work, and a &quot;work based on the Program&quot;<br />means either the Program or any derivative work under copyright law:<br />that is to say, a work containing the Program or a portion of it,<br />either verbatim or with modifications and/or translated into another<br />language.  (Hereinafter, translation is included without limitation in<br />the term &quot;modification&quot;.)  Each licensee is addressed as &quot;you&quot;.<br /><br />Activities other than copying, distribution and modification are not<br />covered by this License; they are outside its scope.  The act of<br />running the Program is not restricted, and the output from the Program<br />is covered only if its contents constitute a work based on the<br />Program (independent of having been made by running the Program).<br />Whether that is true depends on what the Program does.<br /><br />  1. You may copy and distribute verbatim copies of the Program''s<br />source code as you receive it, in any medium, provided that you<br />conspicuously and appropriately publish on each copy an appropriate<br />copyright notice and disclaimer of warranty; keep intact all the<br />notices that refer to this License and to the absence of any warranty;<br />and give any other recipients of the Program a copy of this License<br />along with the Program.<br /><br />You may charge a fee for the physical act of transferring a copy, and<br />you may at your option offer warranty protection in exchange for a fee.<br /><br />  2. You may modify your copy or copies of the Program or any portion<br />of it, thus forming a work based on the Program, and copy and<br />distribute such modifications or work under the terms of Section 1<br />above, provided that you also meet all of these conditions:<br /><br />    a) You must cause the modified files to carry prominent notices<br />    stating that you changed the files and the date of any change.<br /><br />    b) You must cause any work that you distribute or publish, that in<br />    whole or in part contains or is derived from the Program or any<br />    part thereof, to be licensed as a whole at no charge to all third<br />    parties under the terms of this License.<br /><br />    c) If the modified program normally reads commands interactively<br />    when run, you must cause it, when started running for such<br />    interactive use in the most ordinary way, to print or display an<br />    announcement including an appropriate copyright notice and a<br />    notice that there is no warranty (or else, saying that you provide<br />    a warranty) and that users may redistribute the program under<br />    these conditions, and telling the user how to view a copy of this<br />    License.  (Exception: if the Program itself is interactive but<br />    does not normally print such an announcement, your work based on<br />    the Program is not required to print an announcement.)<br /><br />These requirements apply to the modified work as a whole.  If<br />identifiable sections of that work are not derived from the Program,<br />and can be reasonably considered independent and separate works in<br />themselves, then this License, and its terms, do not apply to those<br />sections when you distribute them as separate works.  But when you<br />distribute the same sections as part of a whole which is a work based<br />on the Program, the distribution of the whole must be on the terms of<br />this License, whose permissions for other licensees extend to the<br />entire whole, and thus to each and every part regardless of who wrote it.<br /><br />Thus, it is not the intent of this section to claim rights or contest<br />your rights to work written entirely by you; rather, the intent is to<br />exercise the right to control the distribution of derivative or<br />collective works based on the Program.<br /><br />In addition, mere aggregation of another work not based on the Program<br />with the Program (or with a work based on the Program) on a volume of<br />a storage or distribution medium does not bring the other work under<br />the scope of this License.<br /><br />  3. You may copy and distribute the Program (or a work based on it,<br />under Section 2) in object code or executable form under the terms of<br />Sections 1 and 2 above provided that you also do one of the following:<br /><br />    a) Accompany it with the complete corresponding machine-readable<br />    source code, which must be distributed under the terms of Sections<br />    1 and 2 above on a medium customarily used for software interchange; or,<br /><br />    b) Accompany it with a written offer, valid for at least three<br />    years, to give any third party, for a charge no more than your<br />    cost of physically performing source distribution, a complete<br />    machine-readable copy of the corresponding source code, to be<br />    distributed under the terms of Sections 1 and 2 above on a medium<br />    customarily used for software interchange; or,<br /><br />    c) Accompany it with the information you received as to the offer<br />    to distribute corresponding source code.  (This alternative is<br />    allowed only for noncommercial distribution and only if you<br />    received the program in object code or executable form with such<br />    an offer, in accord with Subsection b above.)<br /><br />The source code for a work means the preferred form of the work for<br />making modifications to it.  For an executable work, complete source<br />code means all the source code for all modules it contains, plus any<br />associated interface definition files, plus the scripts used to<br />control compilation and installation of the executable.  However, as a<br />special exception, the source code distributed need not include<br />anything that is normally distributed (in either source or binary<br />form) with the major components (compiler, kernel, and so on) of the<br />operating system on which the executable runs, unless that component<br />itself accompanies the executable.<br /><br />If distribution of executable or object code is made by offering<br />access to copy from a designated place, then offering equivalent<br />access to copy the source code from the same place counts as<br />distribution of the source code, even though third parties are not<br />compelled to copy the source along with the object code.<br /><br />  4. You may not copy, modify, sublicense, or distribute the Program<br />except as expressly provided under this License.  Any attempt<br />otherwise to copy, modify, sublicense or distribute the Program is<br />void, and will automatically terminate your rights under this License.<br />However, parties who have received copies, or rights, from you under<br />this License will not have their licenses terminated so long as such<br />parties remain in full compliance.<br /><br />  5. You are not required to accept this License, since you have not<br />signed it.  However, nothing else grants you permission to modify or<br />distribute the Program or its derivative works.  These actions are<br />prohibited by law if you do not accept this License.  Therefore, by<br />modifying or distributing the Program (or any work based on the<br />Program), you indicate your acceptance of this License to do so, and<br />all its terms and conditions for copying, distributing or modifying<br />the Program or works based on it.<br /><br />  6. Each time you redistribute the Program (or any work based on the<br />Program), the recipient automatically receives a license from the<br />original licensor to copy, distribute or modify the Program subject to<br />these terms and conditions.  You may not impose any further<br />restrictions on the recipients'' exercise of the rights granted herein.<br />You are not responsible for enforcing compliance by third parties to<br />this License.<br /><br />  7. If, as a consequence of a court judgment or allegation of patent<br />infringement or for any other reason (not limited to patent issues),<br />conditions are imposed on you (whether by court order, agreement or<br />otherwise) that contradict the conditions of this License, they do not<br />excuse you from the conditions of this License.  If you cannot<br />distribute so as to satisfy simultaneously your obligations under this<br />License and any other pertinent obligations, then as a consequence you<br />may not distribute the Program at all.  For example, if a patent<br />license would not permit royalty-free redistribution of the Program by<br />all those who receive copies directly or indirectly through you, then<br />the only way you could satisfy both it and this License would be to<br />refrain entirely from distribution of the Program.<br /><br />If any portion of this section is held invalid or unenforceable under<br />any particular circumstance, the balance of the section is intended to<br />apply and the section as a whole is intended to apply in other<br />circumstances.<br /><br />It is not the purpose of this section to induce you to infringe any<br />patents or other property right claims or to contest validity of any<br />such claims; this section has the sole purpose of protecting the<br />integrity of the free software distribution system, which is<br />implemented by public license practices.  Many people have made<br />generous contributions to the wide range of software distributed<br />through that system in reliance on consistent application of that<br />system; it is up to the author/donor to decide if he or she is willing<br />to distribute software through any other system and a licensee cannot<br />impose that choice.<br /><br />This section is intended to make thoroughly clear what is believed to<br />be a consequence of the rest of this License.<br /><br />  8. If the distribution and/or use of the Program is restricted in<br />certain countries either by patents or by copyrighted interfaces, the<br />original copyright holder who places the Program under this License<br />may add an explicit geographical distribution limitation excluding<br />those countries, so that distribution is permitted only in or among<br />countries not thus excluded.  In such case, this License incorporates<br />the limitation as if written in the body of this License.<br /><br />  9. The Free Software Foundation may publish revised and/or new versions<br />of the General Public License from time to time.  Such new versions will<br />be similar in spirit to the present version, but may differ in detail to<br />address new problems or concerns.<br /><br />Each version is given a distinguishing version number.  If the Program<br />specifies a version number of this License which applies to it and &quot;any<br />later version&quot;, you have the option of following the terms and conditions<br />either of that version or of any later version published by the Free<br />Software Foundation.  If the Program does not specify a version number of<br />this License, you may choose any version ever published by the Free Software<br />Foundation.<br /><br />  10. If you wish to incorporate parts of the Program into other free<br />programs whose distribution conditions are different, write to the author<br />to ask for permission.  For software which is copyrighted by the Free<br />Software Foundation, write to the Free Software Foundation; we sometimes<br />make exceptions for this.  Our decision will be guided by the two goals<br />of preserving the free status of all derivatives of our free software and<br />of promoting the sharing and reuse of software generally.<br /><br />			    NO WARRANTY<br /><br />  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY<br />FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN<br />OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES<br />PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED<br />OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF<br />MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS<br />TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE<br />PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,<br />REPAIR OR CORRECTION.<br /><br />  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br />WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR<br />REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,<br />INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING<br />OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED<br />TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY<br />YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER<br />PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE<br />POSSIBILITY OF SUCH DAMAGES.<br /><br />		     END OF TERMS AND CONDITIONS<br /><br />	    How to Apply These Terms to Your New Programs<br /><br />  If you develop a new program, and you want it to be of the greatest<br />possible use to the public, the best way to achieve this is to make it<br />free software which everyone can redistribute and change under these terms.<br /><br />  To do so, attach the following notices to the program.  It is safest<br />to attach them to the start of each source file to most effectively<br />convey the exclusion of warranty; and each file should have at least<br />the &quot;copyright&quot; line and a pointer to where the full notice is found.<br /><br />    <br />    Copyright (C)   <br /><br />    This program is free software; you can redistribute it and/or modify<br />    it under the terms of the GNU General Public License as published by<br />    the Free Software Foundation; either version 2 of the License, or<br />    (at your option) any later version.<br /><br />    This program is distributed in the hope that it will be useful,<br />    but WITHOUT ANY WARRANTY; without even the implied warranty of<br />    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br />    GNU General Public License for more details.<br /><br />    You should have received a copy of the GNU General Public License<br />    along with this program; if not, write to the Free Software<br />    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA<br /><br /><br />Also add information on how to contact you by electronic and paper mail.<br /><br />If the program is interactive, make it output a short notice like this<br />when it starts in an interactive mode:<br /><br />    Gnomovision version 69, Copyright (C) year name of author<br />    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w''.<br />    This is free software, and you are welcome to redistribute it<br />    under certain conditions; type `show c'' for details.<br /><br />The hypothetical commands `show w'' and `show c'' should show the appropriate<br />parts of the General Public License.  Of course, the commands you use may<br />be called something other than `show w'' and `show c''; they could even be<br />mouse-clicks or menu items--whatever suits your program.<br /><br />You should also get your employer (if you work as a programmer) or your<br />school, if any, to sign a &quot;copyright disclaimer&quot; for the program, if<br />necessary.  Here is a sample; alter the names:<br /><br />  Yoyodyne, Inc., hereby disclaims all copyright interest in the program<br />  `Gnomovision'' (which makes passes at compilers) written by James Hacker.<br /><br />  , 1 April 1989<br />  Ty Coon, President of Vice<br /><br />This General Public License does not permit incorporating your program into<br />proprietary programs.  If your program is a subroutine library, you may<br />consider it more useful to permit linking proprietary applications with the<br />library.  If this is what you want to do, use the GNU Library General<br />Public License instead of this License.</pre> ', '', 2, '', '');
INSERT INTO `smart_article_article` VALUES (25, 20, 4, 5, 'en', '2005-09-03 11:01:00', '2005-09-03 11:01:47', '2005-09-03 18:22:32', 'Public Projects Views and Templates', '', '', '', '', '<p>You will find in the root folders <strong>/templates_smart</strong> and <strong>/views_smart</strong> all public views and templates. It''s an example of a project. You should insert the example content during the setup to check out how every thing works together. Based on this example you can adapt the views and templates to your own project conception. In this case you should store your project files in new folders; Ex.: <strong>/views_myproject</strong> and <strong>/templates_myproject</strong>, to prevent overwriting your modified files during the next framework update. <br />  </p>     <p>Usually every view class has a corresponding template file. The following views and templates are installed by default:</p> <ul> <li><strong>ViewArticle.php</strong> - <strong>tpl.article.php</strong> - This view fetch the demanded article data, assign template variables with this data and loads the corresponding template which outputs the article data.</li><li><strong>ViewError.php</strong> - <strong>tpl.error.php</strong> - Depending on the configuration settings this view output error messages.</li><li><strong>ViewHeader.php</strong> - <strong>tpl.header.php</strong> - This view build the output for every page header.<br /> </li><li><strong>ViewIndex.php</strong> - <strong>tpl.index.php</strong> - This view is responsible for the entry page.</li><li><strong>ViewLogout.php</strong> - Do some logout stuff. A logout link only appears in the left navigation bar if the webvisitor has previously login into the admin area. This view dont need any template.<br /> </li><li> <strong>ViewMainNavigation.php</strong> - <strong>tpl.mainNavigation.php</strong> - This view build the main navigation links that appears on the left side of every page</li><li><strong>ViewNode.php</strong> - <strong>tpl.node.php</strong> - This view fetch the demanded navigation node, articles of this node and links of this node.<br /> </li><li><strong>ViewPicture.php</strong> - <strong>tpl.picture.php</strong> - Show a picture in whole size.</li><li><strong>ViewSearch.php</strong> - <strong>tpl.search.php - </strong>Show the articles that match a search string<br />   </li><li><strong>ViewSimpleNode.php</strong> - <strong>tpl.simpleNode.php</strong> - Show a simple navigation node that has no subnodes or articles, links.....<br /> </li><li><strong>ViewSitemap.php</strong> - <strong>tpl.sitemap.php</strong> - Show the whole navigation node tree with articles.</li> </ul>', '', 2, '', '');

-- 
-- Dumping data for table `smart_article_index`
-- 

INSERT INTO `smart_article_index` VALUES (2, ' Installation    The installation of Smart3 is simple. Upload the extracted files to a folder somewere under the document root of the webserver. Create a MySql 4.1 DataBase. Point your browser to the admin.php file. You should see a setup formular. Follow the instructions. The following folders must be writeable by php scripts:   /cache    /config/data/data/article /data/common/data/common/captcha/data/misc/data/navigation/data/user   /logs &nbsp;If it is the first time you use Smart3 and you want to test it you should select utf-8 as character set and let the tables prefix as it is. After successfull submiting the form you are forwarded to the login of Smart3. For testing you can fill the database with the content of this manual after the successfull installation. Execute the following sql file using phpMyAdmin:/sql/smart3.sql You can find the public views and templates in:/views_smart/templates_smart  Enjoy!   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (3, ' The Action Class    An action class represents the model of a modul. Every model related operations are executed by actions. An action class is indirectly executed by the methode action() of the model class:   $model-&gt;action(''modulename'',''actionname'', &amp; $data_array );    The method of the model class include the target action class file, makes an instance of this class, execute its validate() methode and if successfull its perform() method.   Data validation    An action class has a defensive character. This means, that before the perform() methode works on and with the data passed as an array, the vallidate() methode checks if the content of this data array is valide.   public function validate( $data = FALSE ){};    The validate() methode must return bool TRUE so that the perform() methode is executet by the model action methode.   Design of an Action Class    An action class always depends (extends) on a parent class &quot;SmartAction&quot;. The class name must follow the convention:   class Action[Modulname][Actionname] extends SmartAction {}   The file name and folder of such a class must follow the convention:   /modules/xxx/action/Action[Modulename][Actionname].php   Once a file with the related action class code is in the right module /action folder, you can use such an action from within any part of the system. Here a minimalistic action class:    class ActionCommonTest extends SmartAction{    /**     * perform     *     * @param mixed $data     */    public function perform( $data = FALSE )    {    }        /**     * Validate data passed to this action     * @param mixed $data     * @return bool     */    public function validate( $data = FALSE )    {        return TRUE;    }    }    When saving this class as /modules/common/action/ActionCommonTest.php and you try to use it, it does nothing.   $this-&gt;model-&gt;action( ''common'', ''test'', array() );    Therefore her an action class which trims an given string:     class ActionCommonTrim extends SmartAction {    /**     * Trim a string     *     * @param mixed $data     */    public function perform( $data = FALSE )    {        $data[''result''] = trim( $data[''str''] );     }        /**     * Validate data passed to this action     */    public function validate( $data = FALSE )    {        if(!isset($data[''error'']))        {            throw new SmartModelException(''Missing &quot;error&quot; var'');         }        if(!isset($data[''result'']))        {            $data[''error''] = &quot;array ''result'' key is not defined!&quot;;            return FALSE;        }        if(!isset($data[''str'']))        {            $data[''error''] = &quot;array ''str'' key is not defined!&quot;;            return FALSE;        }        if(!is_string($data[''str'']))        {            $data[''error''] = &quot;array ''str'' value is not from type string!&quot;;            return FALSE;        }        return TRUE;    }    }   Save this class as /modules/common/action/ActionCommonTrim.php and use it as follows from within a public view class:     // init variables$trimmed_string = '''';$error = '''';$this-&gt;model-&gt;action( ''common'', ''trim'',                      array(''result'' =&gt; &amp; $trimmed_string,                            ''str''    =&gt; ''  This is a test    '',                            ''error''  =&gt; &amp; $error)); if(!empty($error)){    echo $error;} else{    echo $trimmed_string;}    The biggest part is the code of the validate() methode. There are more possible error handling ways.     An action class couldnt be executed at all without disturbing the whole system. In this case you have to throw an exception. This happens if a view programmer does an action call in a wrong manner (wrong parameter type). It''s smilar to an php fatal error.The action caller handle the error it self. Here the validate methode assign an given error array with the error messages. The validate methode must return bool FALSE.    It is important to know that if an action should return some data you have to pass the result array as a reference:   $model-&gt;action( ''xxx'', ''yyy'', array( ''result'' =&gt; &amp; $result_array, ''error'' =&gt; &amp; $error_array ) );    Class variables    The model instance assign the following variables of an action class:    $this-&gt;model - Instance of the model class. You need this to execute other action classes from within the current action class. $this-&gt;config - Global configuration array.$this-&gt;constructorData - Data that is passed to the action class constructor.   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (4, ' The View Class    It is the charge of the controller to include this class, to make an instance and to execute, in a well defined order, some methods of a view class. Your charge (the view programmer) is to fill the view methods with code that reacts on a web request. In other words; your make such a view class alive.    The order in which the controller execute the view methods:       auth() - if needed you can include here some authentication stuff. (optional) prependFilterChain() - ... example: spam boot detection, logging, filtering the superglobal request variables. (optional) perform() - Here the real stuff happens. (optional) appendFilterChain( &amp; $tplBufferContent ) - This methode is executed after a template was rendered. So you can do some work on the template output. (optional)     Furthermore there are a couple of class variables which you should keep in mind:       $tplVar - In this array you have to assign all variables that are used in a template. Ex.: $this-&gt;tplVar[''title''] = ''Hello World''; You can use this variable in a template as $tpl[''title''].$viewVar - In this array you have to assign all variables that may be used in nested views.  $model - The instance of the model class. Needed to execute actions. Ex.: $this-&gt;model-&gt;action(''common'',''test'');$session - The instance of the session class $config - Array that contains all global config variables.$template - A string variable in which you can define the name of the template if it is else than the default name.$renderTemplate - This var is from type BOOL. If it is FALSE then no template is going to render.$templateFolder - If the template folder is an other one than the default you have to define the absolute path here.$templateEngine - Here you can define the template engine type if you want to use an other than defined in the configuration array. Currently there are 2 types:&nbsp; ''SmartTplContainerPhp'' (default) and ''SmartTplContainerSmarty'' $viewData - It is possible that the controller pass some data to the view. You will find this data here.$cacheExpire - You can define the time in seconds the template cache expires. 0 means cache disabled.$cacheId - Usually the cache ID is generated by the system. But here you can define your own cache ID.        You can find the public view classes in the root folder /views_xxx. Where xxx is a name of your choice. It is possible to create more public view folders. The global config array contains a variable with the current active view folder.     Example of a view class.     This example show you a part of the view class in ViewNode.php file. The job of this view is to retrive data of a requested navigation node, its child nodes and the branch of this node. The methode &quot;prependFilterChain()&quot; checks if the superglobal var &quot;id_node&quot; contains only numbers. If not an error template is rendered. This methode furthermore sends a http header to disable browser caching.      class ViewNode extends SmartView{    /**     * Cache expire time in seconds for this view     * 0 = cache disabled     */    public $cacheExpire = 3600;        /**     * Execute the view of the &quot;node&quot; template     */    function perform()    {         // init variables (see private function below)        $this-&gt;initVars();                  // get requested node content        $this-&gt;model-&gt;action(''navigation'',''getNode'',                              array(''result''  =&gt; &amp; $this-&gt;tplVar[''node''],                                   ''id_node'' =&gt; (int)$this-&gt;current_id_node,                                   ''fields''  =&gt; array(''title'',''body'',                                                      ''id_node'',''media_folder'')));        // get child nodes content of the requested node        // only with status=2, means active              $this-&gt;model-&gt;action(''navigation'',''getChilds'',                              array(''result''  =&gt; &amp; $this-&gt;tplVar[''childNodes''],                                   ''id_node'' =&gt; (int)$this-&gt;current_id_node,                                   ''status''  =&gt; array(''='',2),                                   ''fields''  =&gt; array(''title'',''short_text'',''id_node'')));         // get navigation node branch content of the requested node        $this-&gt;model-&gt;action(''navigation'',''getBranch'',                              array(''result''  =&gt; &amp; $this-&gt;tplVar[''nodeBranch''],                                   ''id_node'' =&gt; (int)$this-&gt;current_id_node,                                   ''fields''  =&gt; array(''title'',''id_node'')));                       }    /**     * prepend filter chain     *     */    public function prependFilterChain()    {        // fetch the current id_node.         // If no id_node defined, not a string or not number chars        // this view class loads the error template        //        if( !isset($_REQUEST[''id_node''])     ||             !is_string($_REQUEST[''id_node'']) ||             preg_match(&quot;/[^0-9]+/&quot;,$_REQUEST[''id_node'']) )         {            $this-&gt;template  = ''error'';             }        else        {            $this-&gt;current_id_node = (int)$_REQUEST[''id_node''];                  }                // filter action of the common module to prevent browser caching        $this-&gt;model-&gt;action( ''common'', ''filterDisableBrowserCache'');        }    /**     * append filter chain     *     */    public function appendFilterChain( &amp; $outputBuffer )    {        // filter action of the common module that trims the html output        $this-&gt;model-&gt;action( ''common'', ''filterTrim'', array(''str'' =&gt; &amp; $outputBuffer) );            }    /**     * init some variables     *     */        private function initVars()    {        // template array variables        $this-&gt;tplVar[''node'']       = array();        $this-&gt;tplVar[''childNodes''] = array();        $this-&gt;tplVar[''nodeBranch''] = array();                // template var with charset used for the html pages        $this-&gt;tplVar[''charset''] = &amp; $this-&gt;config[''charset''];    }}      In bigger projects there is may a more closer focus on both filter methods. It would be usefull to develop a modul to manage filter actions for every public view. That means in every public filter methods you will find only one action that contacts the filter manager which do the real job. Example of the content of a prependFilterChain() methode would be some thing similar like:     $this-&gt;model-&gt;action(''filtermanager'', ''runPrependFilters'',array(''view'' =&gt; ''xxx''));   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (5, ' The Template    The template is a file in which you can define how the data assigned by the related view class is represented. This can be as an html page, pdf page, simple text page, downloads, xml or what ever. Smart3 use by default php as template language. The use of other templates engines is possible. You can find public templates in the /templates_xxx folder. It is possible to use more template folders to check different layouts. You can define in the global configuration array which template folder is active. The file name of a template must follow the convention:   tpl.[Template name].php    You can use the following variables in templates:    $tpl - In this array you can find all variables assigned by the related view class.$viewLoader-&gt;xxx() - With this methode you can include an other view with name ''xxx'' from within a template.    php functions - You can use all php functions except if it is restricted to some selected functions by the tokenanalyzer. See configuration.    Take a closer look to the function $viewLoader-&gt;xxx(). With this function you can include an other view from within a template. This is an alternative to the php function include() which should be disabled if there are more developers who are going to work on a project. xxx stays for the name of the view to include. ViewXxx.php.   You have to learn to use php very carefull in templates. Include as less as possible procedural code in templates. Try to do such jobs in the related view classes. Common php functions and constructs that you can use are, if,else,elseif,endif,foreach, endforeach, echo, count a.s.o. Smarty   Smart3 use by default php  as template engine. It does a perfect job. However as an alternative engine you have the choice to activate Smarty. There are 2 ways to enable Smarty as template engine:    Set in the configuration file /config/my_config.php the variable as follows:  $SmartConfig[''public_template_engine''] = ''SmartTplContainerSmarty''; Now the project use Smarty in all templates.Set view class variable as follows: public $templateEngine = ''SmartTplContainerSmarty'';Each view can have its own template renderer.  The view class array $this-&gt;tplVars contains all templates variables. You can use the content of this array in Smarty templates as follows:&nbsp; {$tpl.xxx}. (Study the Smarty examples in the public view and template foders). But you can use directly the Smarty instance from within the view classes:  $this-&gt;viewVar[''smarty''] contains the Smarty instance. Further informations about Smarty here.&nbsp;      ', '', '', '');
INSERT INTO `smart_article_index` VALUES (6, ' The Global Configuration Array    Smart3 use and needs a configuration array to work in a proper way and to gives the administrator or the modul programmer the possibility to finetune the framework.   There are 2 ways to change the configuration array or to add some values:       You will find in the root folder /config a file my_config_dist.php. You have to rename this file in my_config.php. Here you can overwrite the default settings.Some modules overwrite or provide an admin interface to overwrite some configuration settings.    The order in which Smart3 fetch the configuration array values is:     First it loads the default array values,    then it loads the array values in my_config.php if it is present,   then the modules can overwrite some variables.    ', '', '', '');
INSERT INTO `smart_article_index` VALUES (7, ' Roadmap    First we have to bring Smart3 out of the alpha stage. There are some problem to solve and one among those is this of the PHPCodeAnalyzer class. We need one or more web page designers who help us to rewrite the admin layout and to check its usability. Currently we use the tiny mice html editor. The plan is to include pear''s text_wiki as an alternative. So text_wiki specialists are welcome. Furthermore there are some modules in a planning stage:    Articles modul done    Links modul done    Keywords modulFilters modul    ', '', '', '');
INSERT INTO `smart_article_index` VALUES (8, ' Contribute    Smart3 is looking for high motivated programmers, designers, editors and translators. If you have some time left you can contact me at: smart@open-publisher.net  ', '', '', '');
INSERT INTO `smart_article_index` VALUES (9, ' Actions    Here you will find the description and usage of a few (not all) common action classes which you can use in public view classes. There are a few more action which are used for the admin views.   The parameters which have always the same meanings:    ''id_node'' - Navigtion node ID to which the action is related ''result'' - A reference to an defined array in that the class store the result. Ex.: &amp;$this-&gt;tplVar ''fields'' - Array with the names of the node database fields. The possible fields are: ''id_node'', ''id_parent'', ''id_sector'', ''id_view'', ''status'', ''rank'', ''title'', ''short_text'', ''body'', ''format'', ''logo'', ''media_folder''''status'' - In this array you can define the status of the node to retrive. The first element define the relation. The following relations are allowed: ''&lt;'',''&gt;'',''='',''&gt;='',''&lt;=''. The second element define the status value. Allowed values are 1 or 2. Example: array(''&gt;'',1). 1 means inaktiv. 2 means activ.''order'' - If the result contains more nodes you can define here the order of those nodes. The first element define the field on which the nodes are ordered. Allowed fields are ''title'',''rank''. The second element define the order. Allowed values are ''asc'',''desc''. Example: array(''title'',''asc''). Default order is: ''rank'' ''asc''.    An action class always validate the data passed in the array (the third argument). If the validation fails an action class produce an exception. It depends on the error configuration if an error is displaed or logged. You will fin log entries in the /logs folder.        getNode   Description: Fill an array with the content of a node    Usage:   $this-&gt;model-&gt;action(''navigation'', ''getNode'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array(),                               ''fields''  =&gt; array() ));    getChilds   Description: Fill an array with the content of child nodes of a given node.   Usage:   $this-&gt;model-&gt;action(''navigation'', ''getChilds'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''status''  =&gt; array,       // optional                               ''order''   =&gt; array,       // optional                               ''fields''  =&gt; array() ));    getBranch   Description: Fill an array with the content of the branch nodes of a given node    Usage:   $this-&gt;model-&gt;action(''navigation'', ''getBanch'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array() ));   getTree   Description: Fill an array with the content of the nodes of a (sub)tree of a given node. id_node=0 means the whole nodetree.    Usage:   $this-&gt;model-&gt;action(''navigation'', ''getTree'',                         array(''id_node'' =&gt; integer, // optional                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array() ));     getAllThumbs   Description: Fill an array with the image thumbnails data of a given node    Usage:   $this-&gt;model-&gt;action(''navigation'', ''getAllThumbs'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_pic'',''id_node'',''title'',                                                  ''description'',''file'',''height'',                                                  ''width'',''rank'',''mime'',''size'') ));    getAllFiles   Description: Fill an array with files data of a given node.   Usage:   $this-&gt;model-&gt;action(''navigation'', ''getAllFiles'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_file'',''id_node'',''title'',                                                  ''description'',''file'',''rank'',                                                  ''mime'',''size'')));    getPicture   Description: Fill an array with the data of a given node image   Usage:   $this-&gt;model-&gt;action(''navigation'', ''getPicture'',                         array(''id_pic'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_pic'',''id_node'',''title'',                                                  ''description'',''file'',''height'',                                                  ''width'',''rank'',''mime'',                                                  ''size'',''media_folder'') ));    getFile   Description: Fill an array with the data of a given node file   Usage:   $this-&gt;model-&gt;action(''navigation'', ''getFile'',                         array(''id_file'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_file'',''id_node'',''title'',                                                  ''description'',''file'',''rank'',                                                  ''mime'',''size'',''media_folder'')));   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (10, ' Actions    Here you will find the description and usage of a few (not all) common action classes of the misc module which you can use in public view classes. There are a few more action which are used for the admin views.     Action call parameters that have always the same meanings:      ''id_text'' - ID of the text to which the action is related ''result'' - A reference to an defined array in that the class store the result. Ex.: &amp;$this-&gt;tplVar ''fields'' - Array with the names of the text database fields. The possible fields are: ''id_text'',''status'',''title'',''short_text'',''body'',''media_folder''''status'' - In this array you can define the status condition a text must accomplish to be retrived. The first element define the relation. The following relations are allowed: ''&lt;'',''&gt;'',''='',''&gt;='',''&lt;=''. The second element define the status value. Allowed values are 1 or 2. Example: array(''&gt;'',1). 1 means inaktiv. 2 means activ.''order'' - If the result contains more textes you can define here the condition of the order of those textes. The first element define the field on which the textes are ordered. Allowed fields are ''title'',''status''. The second element define the order. Allowed values are ''asc'',''desc''. Example: array(''title'',''asc''). Default order is: ''title'' ''asc''.      An action class always validate the data passed in the array (the third argument). If the validation fails an action class produce an exception. It depends on the error configuration if an error is displayed or logged. You will find the log entries in the /logs folder.      getText   Description: Fill an array with the content of a text   Usage:   $this-&gt;model-&gt;action(''misc'', ''getText'',                     array(''id_text'' =&gt; integer,                           ''result''  =&gt; &amp; array(),                           ''fields''  =&gt; array() ));   getTextes   Description: Fill an array with the content of one or more textes   Usage:   $this-&gt;model-&gt;action(''misc'', ''getTextes'',                     array(''ids''    =&gt; array(id_x,id_y,id_z,..,..,..),                           ''result'' =&gt; &amp; array(),                           ''order''  =&gt; array(),                           ''fields'' =&gt; array() ));   getAllThumbs   Description: Fill an array with the image thumbnails data of a given text   Usage:   $this-&gt;model-&gt;action(''misc'', ''getAllThumbs'',                         array(''id_text'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_pic'',''id_text'',''title'',                                                  ''description'',''file'',''height'',                                                  ''width'',''rank'',''mime'',''size'') ));    getAllFiles   Description: Fill an array with files data of a given text   Usage:   $this-&gt;model-&gt;action(''misc'', ''getAllFiles'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_file'',''id_text'',''title'',                                                  ''description'',''file'',''rank'',                                                  ''mime'',''size'')));    getPicture   Description: Fill an array with the data of a given text image   Usage:   $this-&gt;model-&gt;action(''misc'', ''getPicture'',                         array(''id_pic'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_pic'',''id_text'',''title'',                                                  ''description'',''file'',''height'',                                                  ''width'',''rank'',''mime'',                                                  ''size'',''media_folder'') ));    getFile   Description: Fill an array with the data of a given text file   Usage:   $this-&gt;model-&gt;action(''misc'', ''getFile'',                         array(''id_file'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_file'',''id_text'',''title'',                                                  ''description'',''file'',''rank'',                                                  ''mime'',''size'',''media_folder'')));  ', '', '', '');
INSERT INTO `smart_article_index` VALUES (11, ' Modules License    The modules are distributed under the following license:        GNU GENERAL PUBLIC LICENSE		       Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc.                       51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.			    Preamble  The licenses for most software are designed to take away yourfreedom to share and change it.  By contrast, the GNU General PublicLicense is intended to guarantee your freedom to share and change freesoftware--to make sure the software is free for all its users.  ThisGeneral Public License applies to most of the Free SoftwareFoundation''s software and to any other program whose authors commit tousing it.  (Some other Free Software Foundation software is covered bythe GNU Library General Public License instead.)  You can apply it toyour programs, too.  When we speak of free software, we are referring to freedom, notprice.  Our General Public Licenses are designed to make sure that youhave the freedom to distribute copies of free software (and charge forthis service if you wish), that you receive source code or can get itif you want it, that you can change the software or use pieces of itin new free programs; and that you know you can do these things.  To protect your rights, we need to make restrictions that forbidanyone to deny you these rights or to ask you to surrender the rights.These restrictions translate to certain responsibilities for you if youdistribute copies of the software, or if you modify it.  For example, if you distribute copies of such a program, whethergratis or for a fee, you must give the recipients all the rights thatyou have.  You must make sure that they, too, receive or can get thesource code.  And you must show them these terms so they know theirrights.  We protect your rights with two steps: (1) copyright the software, and(2) offer you this license which gives you legal permission to copy,distribute and/or modify the software.  Also, for each author''s protection and ours, we want to make certainthat everyone understands that there is no warranty for this freesoftware.  If the software is modified by someone else and passed on, wewant its recipients to know that what they have is not the original, sothat any problems introduced by others will not reflect on the originalauthors'' reputations.  Finally, any free program is threatened constantly by softwarepatents.  We wish to avoid the danger that redistributors of a freeprogram will individually obtain patent licenses, in effect making theprogram proprietary.  To prevent this, we have made it clear that anypatent must be licensed for everyone''s free use or not licensed at all.  The precise terms and conditions for copying, distribution andmodification follow.		    GNU GENERAL PUBLIC LICENSE   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION  0. This License applies to any program or other work which containsa notice placed by the copyright holder saying it may be distributedunder the terms of this General Public License.  The &quot;Program&quot;, below,refers to any such program or work, and a &quot;work based on the Program&quot;means either the Program or any derivative work under copyright law:that is to say, a work containing the Program or a portion of it,either verbatim or with modifications and/or translated into anotherlanguage.  (Hereinafter, translation is included without limitation inthe term &quot;modification&quot;.)  Each licensee is addressed as &quot;you&quot;.Activities other than copying, distribution and modification are notcovered by this License; they are outside its scope.  The act ofrunning the Program is not restricted, and the output from the Programis covered only if its contents constitute a work based on theProgram (independent of having been made by running the Program).Whether that is true depends on what the Program does.  1. You may copy and distribute verbatim copies of the Program''ssource code as you receive it, in any medium, provided that youconspicuously and appropriately publish on each copy an appropriatecopyright notice and disclaimer of warranty; keep intact all thenotices that refer to this License and to the absence of any warranty;and give any other recipients of the Program a copy of this Licensealong with the Program.You may charge a fee for the physical act of transferring a copy, andyou may at your option offer warranty protection in exchange for a fee.  2. You may modify your copy or copies of the Program or any portionof it, thus forming a work based on the Program, and copy anddistribute such modifications or work under the terms of Section 1above, provided that you also meet all of these conditions:    a) You must cause the modified files to carry prominent notices    stating that you changed the files and the date of any change.    b) You must cause any work that you distribute or publish, that in    whole or in part contains or is derived from the Program or any    part thereof, to be licensed as a whole at no charge to all third    parties under the terms of this License.    c) If the modified program normally reads commands interactively    when run, you must cause it, when started running for such    interactive use in the most ordinary way, to print or display an    announcement including an appropriate copyright notice and a    notice that there is no warranty (or else, saying that you provide    a warranty) and that users may redistribute the program under    these conditions, and telling the user how to view a copy of this    License.  (Exception: if the Program itself is interactive but    does not normally print such an announcement, your work based on    the Program is not required to print an announcement.)These requirements apply to the modified work as a whole.  Ifidentifiable sections of that work are not derived from the Program,and can be reasonably considered independent and separate works inthemselves, then this License, and its terms, do not apply to thosesections when you distribute them as separate works.  But when youdistribute the same sections as part of a whole which is a work basedon the Program, the distribution of the whole must be on the terms ofthis License, whose permissions for other licensees extend to theentire whole, and thus to each and every part regardless of who wrote it.Thus, it is not the intent of this section to claim rights or contestyour rights to work written entirely by you; rather, the intent is toexercise the right to control the distribution of derivative orcollective works based on the Program.In addition, mere aggregation of another work not based on the Programwith the Program (or with a work based on the Program) on a volume ofa storage or distribution medium does not bring the other work underthe scope of this License.  3. You may copy and distribute the Program (or a work based on it,under Section 2) in object code or executable form under the terms ofSections 1 and 2 above provided that you also do one of the following:    a) Accompany it with the complete corresponding machine-readable    source code, which must be distributed under the terms of Sections    1 and 2 above on a medium customarily used for software interchange; or,    b) Accompany it with a written offer, valid for at least three    years, to give any third party, for a charge no more than your    cost of physically performing source distribution, a complete    machine-readable copy of the corresponding source code, to be    distributed under the terms of Sections 1 and 2 above on a medium    customarily used for software interchange; or,    c) Accompany it with the information you received as to the offer    to distribute corresponding source code.  (This alternative is    allowed only for noncommercial distribution and only if you    received the program in object code or executable form with such    an offer, in accord with Subsection b above.)The source code for a work means the preferred form of the work formaking modifications to it.  For an executable work, complete sourcecode means all the source code for all modules it contains, plus anyassociated interface definition files, plus the scripts used tocontrol compilation and installation of the executable.  However, as aspecial exception, the source code distributed need not includeanything that is normally distributed (in either source or binaryform) with the major components (compiler, kernel, and so on) of theoperating system on which the executable runs, unless that componentitself accompanies the executable.If distribution of executable or object code is made by offeringaccess to copy from a designated place, then offering equivalentaccess to copy the source code from the same place counts asdistribution of the source code, even though third parties are notcompelled to copy the source along with the object code.  4. You may not copy, modify, sublicense, or distribute the Programexcept as expressly provided under this License.  Any attemptotherwise to copy, modify, sublicense or distribute the Program isvoid, and will automatically terminate your rights under this License.However, parties who have received copies, or rights, from you underthis License will not have their licenses terminated so long as suchparties remain in full compliance.  5. You are not required to accept this License, since you have notsigned it.  However, nothing else grants you permission to modify ordistribute the Program or its derivative works.  These actions areprohibited by law if you do not accept this License.  Therefore, bymodifying or distributing the Program (or any work based on theProgram), you indicate your acceptance of this License to do so, andall its terms and conditions for copying, distributing or modifyingthe Program or works based on it.  6. Each time you redistribute the Program (or any work based on theProgram), the recipient automatically receives a license from theoriginal licensor to copy, distribute or modify the Program subject tothese terms and conditions.  You may not impose any furtherrestrictions on the recipients'' exercise of the rights granted herein.You are not responsible for enforcing compliance by third parties tothis License.  7. If, as a consequence of a court judgment or allegation of patentinfringement or for any other reason (not limited to patent issues),conditions are imposed on you (whether by court order, agreement orotherwise) that contradict the conditions of this License, they do notexcuse you from the conditions of this License.  If you cannotdistribute so as to satisfy simultaneously your obligations under thisLicense and any other pertinent obligations, then as a consequence youmay not distribute the Program at all.  For example, if a patentlicense would not permit royalty-free redistribution of the Program byall those who receive copies directly or indirectly through you, thenthe only way you could satisfy both it and this License would be torefrain entirely from distribution of the Program.If any portion of this section is held invalid or unenforceable underany particular circumstance, the balance of the section is intended toapply and the section as a whole is intended to apply in othercircumstances.It is not the purpose of this section to induce you to infringe anypatents or other property right claims or to contest validity of anysuch claims; this section has the sole purpose of protecting theintegrity of the free software distribution system, which isimplemented by public license practices.  Many people have madegenerous contributions to the wide range of software distributedthrough that system in reliance on consistent application of thatsystem; it is up to the author/donor to decide if he or she is willingto distribute software through any other system and a licensee cannotimpose that choice.This section is intended to make thoroughly clear what is believed tobe a consequence of the rest of this License.  8. If the distribution and/or use of the Program is restricted incertain countries either by patents or by copyrighted interfaces, theoriginal copyright holder who places the Program under this Licensemay add an explicit geographical distribution limitation excludingthose countries, so that distribution is permitted only in or amongcountries not thus excluded.  In such case, this License incorporatesthe limitation as if written in the body of this License.  9. The Free Software Foundation may publish revised and/or new versionsof the General Public License from time to time.  Such new versions willbe similar in spirit to the present version, but may differ in detail toaddress new problems or concerns.Each version is given a distinguishing version number.  If the Programspecifies a version number of this License which applies to it and &quot;anylater version&quot;, you have the option of following the terms and conditionseither of that version or of any later version published by the FreeSoftware Foundation.  If the Program does not specify a version number ofthis License, you may choose any version ever published by the Free SoftwareFoundation.  10. If you wish to incorporate parts of the Program into other freeprograms whose distribution conditions are different, write to the authorto ask for permission.  For software which is copyrighted by the FreeSoftware Foundation, write to the Free Software Foundation; we sometimesmake exceptions for this.  Our decision will be guided by the two goalsof preserving the free status of all derivatives of our free software andof promoting the sharing and reuse of software generally.			    NO WARRANTY  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTYFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHENOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIESPROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSEDOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK ASTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THEPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,REPAIR OR CORRECTION.  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITINGWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/ORREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISINGOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITEDTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BYYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHERPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THEPOSSIBILITY OF SUCH DAMAGES.		     END OF TERMS AND CONDITIONS	    How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatestpossible use to the public, the best way to achieve this is to make itfree software which everyone can redistribute and change under these terms.  To do so, attach the following notices to the program.  It is safestto attach them to the start of each source file to most effectivelyconvey the exclusion of warranty; and each file should have at leastthe &quot;copyright&quot; line and a pointer to where the full notice is found.        Copyright (C)       This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USAAlso add information on how to contact you by electronic and paper mail.If the program is interactive, make it output a short notice like thiswhen it starts in an interactive mode:    Gnomovision version 69, Copyright (C) year name of author    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w''.    This is free software, and you are welcome to redistribute it    under certain conditions; type `show c'' for details.The hypothetical commands `show w'' and `show c'' should show the appropriateparts of the General Public License.  Of course, the commands you use maybe called something other than `show w'' and `show c''; they could even bemouse-clicks or menu items--whatever suits your program.You should also get your employer (if you work as a programmer) or yourschool, if any, to sign a &quot;copyright disclaimer&quot; for the program, ifnecessary.  Here is a sample; alter the names:  Yoyodyne, Inc., hereby disclaims all copyright interest in the program  `Gnomovision'' (which makes passes at compilers) written by James Hacker.  , 1 April 1989  Ty Coon, President of ViceThis General Public License does not permit incorporating your program intoproprietary programs.  If your program is a subroutine library, you mayconsider it more useful to permit linking proprietary applications with thelibrary.  If this is what you want to do, use the GNU Library GeneralPublic License instead of this License.   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (12, ' Installation    Die Installation des Frameworks mit den ausgelieferten Modulen sollte schnell und einfach durchzuf&uuml;hren sein. Die entpackte Dateien m&uuml;ssen in das Verzeichniss kopiert werden auf den der Webserver Zugriff hat. Es muss eine MySql 4.1 Datenbank f&uuml;r das Projekt erstellt werden. Folgende Ordner m&uuml;ssen von php Skripten beschreibbar sein:    /cache    /config/data/data/article /data/common/data/common/captcha/data/misc/data/navigation/data/user   /logs        Danach Rufen sie admin.php im Wurzelordner auf und folgen den Installationsanweisungen. M&ouml;chten sie das System erst einmal testen sollten sie unter &quot;Insert sample content&quot; (Beispielinhalt) die Checkbox &quot;yes&quot; aktivieren. Der Beispielinhalt besteht aus der kompletten Smart3 Dokumentation.   Falls die Installation erfolgreich abgeschlossen wurde werden sie zum Login weitergeleitet wo Sie sich dann mit &quot;superuser&quot;, dem gerade erstellten Passwort und der Ziffernfolge im Bild einloggen k&ouml;nnen.    In den Smart3 Ordnern /views_smart und /templates_smart liegen ein paar vorinstallierte Views und den entsprechenden Templates die als Beispiel dazu dienen sich mit dem System vertraut zu machen und sofort loslegen zu k&ouml;nnen. Diese installierten Dateien wurden erstellt um eine klassisches Webprojekt zu realisieren und sind auf den Beispielinhalt abgestimmt. Diese k&ouml;nnen sie dann an ihre eigenen Bed&uuml;rfnisse anpassen. F&uuml;r eigene Projekte sollte sie jedoch einen neuen View- bzw Templateordner erstellen damit die Dateien nicht bei einem Smart3 Upgrade &uuml;berschrieben werden.  /templates_meinProjekt /views_meinProjekt  Im Modul Options der Administration k&ouml;nnen sie dann diese beiden Ordner aktivieren.  ', '', '', '');
INSERT INTO `smart_article_index` VALUES (13, ' Die Action Klasse    Um das Einbinden und Erstellen der Instanz einer Actionklasse braucht man sich nicht zu k&uuml;mmern. Actionklassen sind Teile des Models und darum werden sie auch &uuml;ber eine Instanz des Models aufgerufen:   $this-&gt;model-&gt;action( ''modulname'', ''actionname'', array() );    Diese Instanz steht in Viewklassen und auch in Actionklassen selbst zur Verf&uuml;gung. Die Model-Action-Methode f&uuml;hrt zuerst die validate() Methode und wenn diese TRUE zur&uuml;ckgibt die perform() Methode einer Actionkalsse aus. Actionklassen liegen in dem jeweiligen Modulordner /actions.     Datenvalidierung   Actionklassen haben einen defensiven Charakter. D.h. Daten die der Actionklasse &uuml;bergeben werden, sollten von dieser auf ihre G&uuml;ltigkeit &uuml;berpr&uuml;ft werden. Genau darin liegt der Zweck der validate() Methode einer Actionklasse die vom Model ausgef&uuml;hrt wird.    public function validate( $data = FALSE ){};    Die $data Variable wird dieser Methode als Parameter &uuml;bergeben. Diese Variable ist dieselbe wie der dritte Parameter mit der diese Actionklasse aufgerufen wurde und enh&auml;lt alle Daten die f&uuml;r das Funktionieren n&ouml;tig sind:   $this-model-&gt;action(''modulename'' , ''actionname'', $data );    Die validate() Methode muss TRUE zur&uuml;ckgeben damit die Hauptmethode perform() ausgef&uuml;hrt wird in der die eigentliche Aufgabe einer Actionklasse ausgef&uuml;hrt wird.    Design einer Actionklasse     Eine Actionklasse wird immer von einer Klasse SmartAction abgeleitet. Der Klassenname muss folgender Konvention entsprechen:   Action[Modulname][Definitionsname dieser Klasse]   Die Datei die diese Klasse enth&auml;lt muss mit dem selben Namen wie der Klassennamen abgespeichert werden und mit der zus&auml;tzlichen Endung .php im /actions Ordner des jeweiligen Moduls. Der Speicherort der folgenden Klasse w&auml;re dann: modules/common/action/ActionCommonTest.php   Danach kann diese vom System benutzt werden. Sie braucht also nicht extras registriert zu werden.     class ActionCommonTest extends SmartAction{    /**     * perform     *     * @param mixed $data     */    public function perform( $data = FALSE )    {    }        /**     * Validate data passed to this action     * @param mixed $data     * @return bool     */    public function validate( $data = FALSE )    {        return TRUE;    }    }    Dieses Beispiel einer Actionklasse zeigt die Methoden die darin enthalten sein k&ouml;nnen. Falls sie diese Klasse jetzt abspeichern als common/actions/ActionCommonTest.php und nachfolgend aufrufen, passiert nichts, weil in der perform() Methode nichts ausgef&uuml;hrt wird.   $this-&gt;model-&gt;action( ''common'', ''test'', array() );     Deswegen hier ein Beispiel einer Klasse die Leerzeichen bevor und hinter einer &uuml;bergebenen Zeichenkette wegnimmt:     class ActionCommonTrim extends SmartAction {    /**     * Trim a string     *     * @param mixed $data     */    public function perform( $data = FALSE )    {        $data[''result''] = trim( $data[''str''] );     }        /**     * Validate data passed to this action     */    public function validate( $data = FALSE )    {        if(!isset($data[''error'']))        {            throw new SmartModelException(''Missing &quot;error&quot; var'');         }        if(!isset($data[''result'']))        {            $data[''error''] = &quot;array ''result'' key is not defined!&quot;;            return FALSE        }        if(!isset($data[''str'']))        {            $data[''error''] = &quot;array ''str'' key is not defined!&quot;;            return FALSE;        }        if(!is_string($data[''str'']))        {            $data[''error''] = &quot;array ''str'' value is not type string!&quot;;            return FALSE;        }        return TRUE;    }    }   Aufgerufen wird diese Klasse mit:   // init variables$trimmed_string = '''';$error = '''';$this-&gt;model-&gt;action( ''common'', ''trim'',                      array(''result'' =&gt; &amp; $trimmed_string,                            ''str''    =&gt; ''  Dieses ist ein Test    '',                            ''error''  =&gt; &amp; $error)); if(!empty($error)){    echo $error;} else{    echo $trimmed_string;}    Die meiste Arbeit besteht darin die validate() Methode zu erstellen. Weil hier alle Daten auf ihre G&uuml;ltigkeit &uuml;berpr&uuml;ft werden sollen, damit die perform() Methode die eigentliche Aufgabe, n&auml;hmlich eine Zeichenkette zu trimmen, ausf&uuml;hren kann.  Es gib verschiedene M&ouml;glichkeiten was passieren soll wenn Daten ung&uuml;ltig sind. Im Falle wo eine saubere Programmausf&uuml;hrung nicht gew&auml;hrleistet werden kann sollte eine Exception erstellt werden. Das System f&auml;ngt diese ab und erstellt ein Logeintrag und leitet zu einer Errorseite weiter auf der die Fehlermeldung erscheint. Dieses ist hier der Fall wenn eine error Variable nicht definiert wurde. Bei den anderen Validierungsmassnahmen wird das error Array mit den Fehlermeldungen geschrieben die sie dann selbst behandeln. Mit Ausnahme einer Exception sollte bei einem Validierungsfehler die Methode FALSE zur&uuml;ckgeben, damit perform() nicht ausgef&uuml;hrt wird. Andernfalls TRUE. Wichtig ist zu beachten, dass wenn eine Actionklasse Werte zur&uuml;ckgeben soll diese in einer Variable abgespeichert werden, die dem Daten-Array als Refernz zu &uuml;bergeben werden muss.   Klassenvariablen    Die Model Instanz &uuml;bergibt der Actionklasse folgende Klassen variablen:    $this-&gt;model - Instanz der Modelklasse. Wird unter anderem dazu ben&ouml;tigt eine weitere Action auszuf&uuml;hren. $this-&gt;config - Globales Konfigurationsarray.$this-&gt;constructorData - Daten die an den Actionklassen-Contructor &uuml;bergeben wurde, was eher selten der Fall sein d&uuml;rfte.       ', '', '', '');
INSERT INTO `smart_article_index` VALUES (14, ' Die Template (Vorlage)    Eine Template (Vorlage) ist nichts weiter als eine Datei in der festgelegt wird wie die Daten die von der Viewklasse aufbereitet wurden dargestellt werden sollen. Dieses kann in From einer HTML, PDF, XML, Text oder was auch immer sein. Smart3 wird mit einem PHP Templateparser ausgestatten. In den Templates kommt also php zum Einsatz. Es ist jedoch auch m&ouml;glich eine andere Templateengine zu benutzen. Dazu sp&auml;ter mehr.  Templates f&uuml;r Projekte liegen im /templates_xxx Ordner. Es ist somit m&ouml;glich mehrere Templateordner zu betreiben in denen z.B. f&uuml;r ein Webprojekt verschieden Layouts ausgetestet werden k&ouml;nnen. Der aktive Templateordner wird im globalen Konfigurationsarray festgelegt. Der Name der Templatedatei muss folgender Konvention entsprechen:   tpl.[Template Name].php    In Templates stehen, wenn der in Smart3 verwendete php Templateparser benutzt wird, folgende Variablen und Funktionen zur verf&uuml;gung:    $tpl - In diesem Array stehen alle Daten die von der entsprechenden Viewklasse aufbereitet wurde.$viewLoader-&gt;xxx() - Einbinden einer View mit Namen ''xxx''    php Funktionen - Dieses ist aus Sicherheitsgr&uuml;nden nicht immer w&uuml;nschenswert. Deshalb wurde in Smart3 ein Tokenanalyzer integriert, der, wenn er aktiv ist, nur ganz bestimmte im Konfigurationsarray festgelegte php Funktionen zul&auml;st. Siehe Konfiguration.   Einer n&auml;heren Betrachtung bedarf die Funktion $viewLoader-&gt;xxx(). Durch diese Funktion wird von innerhalb einer Template eine andere View und ihre dazugeh&ouml;rige Template eingebunden. Diese Funktion steht als Alternative zu include(), die aus Sicherheitsgr&uuml;nden nicht empfehlenswert ist. xxx steht f&uuml;r den Namen der View die eingebunden werden soll. Der Name muss also exakt mit der View &uuml;bereinstimmen damit es funktioniert. Also ViewXxx.php. Man sollte es sich zum Prinzip machen so wenig wie m&ouml;glich prozeduraler Code in die Templates reinzuschreiben. Dieser sollte wenn m&ouml;glich in die Viewklassen verlegt werden. Also wenn Daten irgenwelche Textfilter durchlaufen m&uuml;ssen, etwa um email Adressen f&uuml;r Spamboots unkenntlich zu machen, so sollte dieses in der entsprechenden Viewklasse passieren. Es ist allerdings klar, das man in Templates nicht um if,else,endif,foreach, endforeach, echo herumkommt. Viel mehr sollte es allerdings nicht sein. Templates sind kein Tummelplatz f&uuml;r phpProgrammierer, sondern Designer m&uuml;ssen damit klarkommen. Darum muss der ViewProgrammierer dem Templatedesigner Klarheit dar&uuml;ber geben welche Daten und in welcher From ihm zur Verf&uuml;gung stehen.   Ich m&ouml;chte eine andere Template Engine benutzten    Smart3 kommt mit einem php Template Renderer. Dieser besteht aus einer Klasse SmartTplContainerPhp, die in der Datei /smart/includes/SmartTplContainerPhp.php liegt. Im globalen Konfigurationsarray wird festgelegt, dass diese Klasse f&uuml;r das Renderen von Templates benutzt wird.     $SmartConfig[''public_template_engine''] = ''SmartTplContainerPhp''; Um eine andere Klasse zu benutzen muss dieses im Konfigurationsarray umge&auml;nder werden. Und diese Klasse muss sich nat&uuml;rlich im Ordner smart/includes befinden.Als Neuerung wurde Smarty als Alternativengine hinzugef&uuml;gt.&nbsp; Smarty Es gibt 2 M&ouml;glichkeiten um Smarty als Templateengine zu aktivieren:    In der Konfigurationsdatei /config/my_config.php die Variable&nbsp; auf  $SmartConfig[''public_template_engine''] = ''SmartTplContainerSmarty''; zu setzen. Hierbei wird bei allen Templates Smarty benutzt.   In der Viewklasse folgende Klassenvariable zu setzen: public $templateEngine = ''SmartTplContainerSmarty''; Somit kann man individuel f&uuml;r jede View die Templateengine setzen.  Die in der Viewklasse im Array $this-&gt;tplVars enthaltenen Variablen werden somit vom Smarty Container automatisch &uuml;bernommen. In den Templates steht dieses Array dann folgen zur Verf&uuml;gung {$tpl.xxx}. (Als Beispiel sollten sie die Smarty Views und Templates betrachten.) In den Viewklassen &auml;ndert sich somit fast nichts gegen&uuml;ber wenn php als Templateengine benutzt wird. Es sollte jedoch auch m&ouml;glich sein innerhalb der Viewklassen direkt &uuml;ber die Smartyinstanz Templatevariablen zu setzen. $this-&gt;viewVar[''smarty''] enth&auml;lt die Smartyinstanz. F&uuml;r weiter Infos zu Smarty erhalten direkt von dieser Webseite . Hinweis&nbsp; Falls sie Smarty einsetzen wollen, sollten sie im globalen Konfigurationsarray &quot;error_reporting&quot; auf E_ALL herrunterstellen. Smarty ist php4 Code und veranlasst das System unter E_STRICT viele Meldungen zu erstellen.   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (15, ' Die View Klasse    In dieser Klasse wird zum grossen Teil festgelegt wie eine Anfrage an das System beantwortet wird. Im klassischen Fall einer Webseite w&auml;re das die Daten zu sammeln die f&uuml;r die Darstellung einer angefragten Webseite ben&ouml;tigt werden. Um das Einbinden und das Erstellen einer Instanz einer Viewklsse braucht man sich nicht zu k&uuml;mmern. Der Controller &uuml;bernimmt das alles. Anschliessend f&uuml;hrt der Controller die Methoden dieser Klasse in einer bestimmten Reihenfolge aus. Diese Reihenfolge ist:     auth() - Falls n&ouml;tig kann hier ein Authentifizierungs-Mechanismus eingebaut werden.prependFilterChain() - Hier kann Code ausgef&uuml;hrt werden bevor der eigentlichen Hauptmethode. Z.B. http Headers senden, Spamboots abfangen usw.perform() - Die eigentliche Hauptmethode.appendFilterChain( &amp; $tplBufferContent ) - Diese Methode wird ausgef&uuml;hrt nachdem eine Template gerendert wurde. $tplBufferContent enth&auml;lt den Inhalt einer gerenderten Template. Eine M&ouml;gliche Anwendung w&auml;re Kommentare aus Templates zu entfernen.  Deweiteren gibt es folgende Klassenvariablen die man sich merken sollte:     $tplVar - Dies ist das Array das s&auml;mtliche Datenvariablen enth&auml;lt die in der Template eingef&uuml;gt werden k&ouml;nnen. Ex.: $this-&gt;tplVar[''title''] = ''Hello World''; steht in der Template als $tpl[''title''] zur Verf&uuml;gung.$viewVar - In diesem Array k&ouml;nnen alle Daten abgelegt werden die in einer View oder mehreren Views verwendet werden. Dieses ist sehr n&uuml;tzlich bei Daten die in allen verschachtelten Views zur Verf&uuml;gung stehen m&uuml;ssen.$model - Die Instanz der Model Klasse. Wird ben&ouml;tigt um eine Action auszuf&uuml;hren. Ex.: $this-&gt;model-&gt;action(''common'',''test'');$session - Die Instanz der Session Klasse$config - Dieses Array enth&auml;lt s&auml;mtliche Konfigurationsdaten.$template - Dieser String enth&auml;lt den Name der Template die mit dieser View verkn&uuml;pft ist. Im Prinzip geht der Controller davon aus, dass die Template den selben Name hat wie die Viewklasse. Ist immer unbedingt anzugeben wenn die Template einen anderen Name hat.$renderTemplate - Ist vom Type BOOL. Steht diese aus FALSE wird keine Template gerendert.$templateEngine - F&uuml;r jede View kann individuell die Templateengine festgelegt werden. Zur Zeit gibt es&nbsp; 2 Engines:&nbsp; ''SmartTplContainerPhp'' (Voreinstellung) und ''SmartTplContainerSmarty''     $templateFolder - Hier kann man den Pfad zum Templateordner angeben wenn dieser eine Anderer sein soll wie im Konfigurationsarray angegeben.$viewData - Es kann vorkommen, dass einer View Instanz vom Controller Daten &uuml;bergeben werden. Diese stehen dann in dieser Variable.$cacheExpire - Bestimmt die Zeit in Sekunden wo die Template zwischengespeichert (gecacht) wird. 0 bedeutet, dass die Template nicht gecacht werden soll.$cacheId - ID der Cachedatei. Wird normalerweise vom System erstellt.       View Klassen die zum erstellen eines Webprojektes ben&ouml;tig werden stehen im Wurzelordner /views_xxx . Wobei xxx ein beliebiger Name sein kann. Es ist somit m&ouml;glich mehere View Ordner paralell zu betreiben. Das gobale Konfigurationsarray enh&auml;lt den Ordnername der gerade aktiv ist.   Beispiel einer ViewKlasse.   Diese Beispiel zeigt einen Auszug aus der Viewklasse in ViewNode.php. Also es geht hier darum die Daten des angefragten Navigationsknoten zu erhalten, ebenso wie die Daten der Unterknoten (child), der Knotenast (wie bei yahoo) und entsprechende Templatevariablen mit diesen Daten zu beschreiben. Besonders beachtet sollte man die prependFilterChain() Methode. Hier wird gepr&uuml;ft ob die id_node, also die Navigationsknoten ID nur Ziffern enth&auml;lt. Falls nicht wird die Error Template gerendert.   class ViewNode extends SmartView{    /**     * Cache expire time in seconds for this view     * 0 = cache disabled     */    public $cacheExpire = 3600;        /**     * Execute the view of the &quot;node&quot; template     */    function perform()    {         // init variables (see private function below)        $this-&gt;initVars();                  // get requested node content        $this-&gt;model-&gt;action(''navigation'',''getNode'',                              array(''result''  =&gt; &amp; $this-&gt;tplVar[''node''],                                   ''id_node'' =&gt; $this-&gt;current_id_node,                                   ''fields''  =&gt; array(''title'',''body'',''id_node'',''media_folder'')));        // get child nodes content of the requested node        // only with status=2, means active              $this-&gt;model-&gt;action(''navigation'',''getChilds'',                              array(''result''  =&gt; &amp; $this-&gt;tplVar[''childNodes''],                                   ''id_node'' =&gt; $this-&gt;current_id_node,                                   ''status''  =&gt; array(''='',2),                                   ''fields''  =&gt; array(''title'',''short_text'',''id_node'')));         // get navigation node branch content of the requested node        $this-&gt;model-&gt;action(''navigation'',''getBranch'',                              array(''result''  =&gt; &amp; $this-&gt;tplVar[''nodeBranch''],                                   ''id_node'' =&gt; $this-&gt;current_id_node,                                   ''fields''  =&gt; array(''title'',''id_node'')));                       }    /**     * authentication     *     */    public function auth()    {    }    /**     * prepend filter chain     *     */    public function prependFilterChain()    {        // fetch the current id_node. If no id_node defined or not numeric        // this view class loads the error template        if( !isset($_REQUEST[''id_node'']) || preg_match(&quot;/[^0-9]+/&quot;,$_REQUEST[''id_node'']) )         {            $this-&gt;template  = ''error'';             }        else        {            $this-&gt;current_id_node    = (int)$_REQUEST[''id_node''];                  }                // filter action of the common module to prevent browser caching        $this-&gt;model-&gt;action( ''common'', ''filterDisableBrowserCache'');        }    /**     * append filter chain     *     */    public function appendFilterChain( &amp; $outputBuffer )    {        // filter action of the common module that trims the html output        $this-&gt;model-&gt;action( ''common'', ''filterTrim'', array(''str'' =&gt; &amp; $outputBuffer) );            }    /**     * init some variables     *     */        private function initVars()    {        // template array variables        $this-&gt;tplVar[''node'']       = array();        $this-&gt;tplVar[''childNodes''] = array();        $this-&gt;tplVar[''nodeBranch''] = array();                // template var with charset used for the html pages        $this-&gt;tplVar[''charset''] = &amp; $this-&gt;config[''charset''];    }}    Vor allem bei gr&ouml;sseren Projekten kommt den zwei Filter Methoden gr&ouml;ssere Bedeutung zu. So ist es vorstellbar ein Modul zu entwickeln das Filtereinstellungen jeder Viewklasse verwalten k&ouml;nnte. D.h. in jeder Filtermethode einer Viewklasse w&auml;ren dann jeweils nur ein Actionaufruf. Beispiel f&uuml;r den Inhalt einer prependFilterChain() Methode w&auml;re dann:   $this-&gt;model-&gt;action(''filtermanager'', ''runPrependFilters'',array(''view'' =&gt; ''xxx''));    Mit Sicherheit wird in n&auml;chster Zeit ein solches Modul kommen.   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (16, ' Konfiguration    Smart3 greift auf ein php Konfigurationsarray zur&uuml;ck das es dazu ben&ouml;tigt um intern korrekt zu funktionieren und um dem Administrator bzw Modulprogrammierer eines Projektes die M&ouml;glichkeit zu geben auf das Verhalten des Systems Einfluss zu nehmen. Es gibt zwei M&ouml;glichkeiten die Konfigurationsvariablen zu ver&auml;ndern:     Im Wurzel-Ordner /config steht die Datei my_config_dist.php. Diese Datei muss in my_config.php umbenannt werden. Darin kann man die Default-Konfiguration von Smart3 &uuml;berschreiben indem man den darin enthaltenen Variablen andere Werte zuweist.Indem man Module entwickelt die das Konfigurationsarray &uuml;berschreiben. Einige Module &uuml;berschreiben Konfigurationsvariablen.     ', '', '', '');
INSERT INTO `smart_article_index` VALUES (17, ' Die Smart3 Projekt Views und Vorlagen    In den Wurzelordnern /templates_smart und /views_smart stehen View Klassen bzw ihre entsprechenden Templates die auf ein klassisches Webprojekt zugeschnitten sind. Diese k&ouml;nnen sie als Vorlage benutzten um ihre eigenen Projekte zu erstellen. Sie sollten allerdings ihre Projektviews bzw Templates in Ordnern mit neuem Namen abspeichern. Z.B. /views_myproject /templates_myproject. Ansonsten werden beim n&auml;chsten Update ihre ver&auml;nderten Dateien &uuml;berschrieben.    Es sind folgende Views und Templates vorhanden in alphabetischer Reihenfolge:    ViewArticle.php bzw tpl.article.php -  Hier werden die Daten des angefragten Artikels erstellt bzw in der korrespondierenden Vorlage angezeigt.ViewError.php bzw tpl.error.php -  Steht im Konfiguartionsarray die Fehlerbehandlung auf Schow, so werden hier&uuml;ber Fehlermeldungen ausgegeben. ViewHeader.php bzw tpl.header.php - Hier wird der Kopf zentral f&uuml;r jede Webseite erstellt. Diese View wird von innerhalb jeder anderen Template die den Kopf ben&ouml;tigt eingebunden. ViewIndex.php bzw tpl.index.php - Daten zur Eingangsseite und ihr Aussehen werden hier bestimmt.ViewLogout.php - Hat sich ein Webbesucher vorher &uuml;ber das Administrationsinterface eingelogt so erscheint auf der &ouml;ffentlichen Webseite ein Link um sich auszuloggen. &Uuml;ber diesen Link wir die Logout View aufgerufen die die entsprechende Prozedur ausf&uuml;hrt. Diese View ben&ouml;tigt keine Template. ViewMainNavigation.php bzw tpl.mainNavigation.php - Hier werden die Hauptnavigations Links der rechten Spalte zentral f&uuml;r jede Webseite erstellt. Jede andere Template die diese Links ben&ouml;tigt bindet diese an entsprechender Stelle ein. ViewNode.php bzw tpl.node.php - Hier werden die Daten zu dem erfragten Navigationsknoden und seinen Unterknoten gesammelt und dargestellt. Fast jede Webseite (also Knoten) des ganzen Webprojektes wird &uuml;ber diese View dargestellt.ViewPicture.php bzw tpl.picture.php - Enth&auml;lt ein Text ein Thumbnail-Bild und klickt man darauf so wird diese View aktiviert die das Bild in ganzer Gr&ouml;sse darstellt.ViewSearch.php bzw tpl.search.php - Hier werden alle Artikeltitel mit den jeweiligen Navigationsknoten angezeigt die einem Suchkriterium entsprechen.    ViewSimpleNode.php bzw tpl.simpleNode.php - F&uuml;r Knoten die keine Unterknoten enthalten, also wo nur der darin enthaltener Text dargestellt werden soll ben&ouml;tigen diese View.ViewSitemap.php bzw tpl.sitemap.php - Hier werden alle Naviagtionsknoten hierarschisch dargestellt.   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (18, ' Roadmap    Erstmal muss Smart3 ausgiebig getestet werden und gegebenfalls notwendigen &Auml;nderungen unterworfen werden um aus dem Alphastadium herrauszukommen. Also stabil und zuverl&auml;ssig. Es gibt noch einige Fragen zu kl&auml;ren und das im speziellen mit der PHPCodeAnalyzer Klasse die einige Probleme bereitet.     Bei den Modulen sollte zudem das Layout &uuml;berarbeitet werden bzw die Benutzerfreundlichkeit. Dieses &uuml;berlasse ich gerne jenen die mehr davon verstehen als ich selbst.   Insofern ben&ouml;tigt kommt TinyMice als Editor zum Einsatz. Als Alternative ist PEAR text_wiki geplant. Beide L&ouml;sungen haben ihre Vor- und Nachteile. Einen Idealweg gibt es nicht. Tiny Mice hat den Vorteil, dass er benutzerfreundlich ist. Der Nachteil ist, dass man html Code in der Datenbank hat, was Schwierigkeiten bereitet wenn man die Daten weiterverarbeiten m&ouml;chte. Pear Text_wiki ist eben nicht so benutzerfreundlich weil man Layoutver&auml;nderungen am Text nicht sehen kann und zudem kryptische Anweisungen in den Text schreiben muss. Der Vorteil ist, dass sich die Daten im nachhinein besser weiterverarbeiten lassen.    In Planung sind folgende Module:      Artikel Modul -  wobei jeder Artikel einem Navigationsknoten untergeordnet werden kann (done)    Links Modul - gleiches wie oben (done)    Schl&uuml;sselwort Modul - Durch dieses wird es m&ouml;glich Elemente horrizontal untereinander zu verbinden. Es lassen sich so komplexe Zusammenh&auml;nge herstellen und darstellen.Filter Modul - Hier geht es um die Administration von FilterActions die in den unterschiedlichen ViewKlassen zum Einsatz kommen.    ', '', '', '');
INSERT INTO `smart_article_index` VALUES (19, ' Mitmachen    Zur Zeit arbeitet nur ein Einziger am Smart3 Projekt. Wer Zeit, Lust, Energie und das n&ouml;tige KnowHow hat am Projekt mitzuarbeiten sollte sich &uuml;ber diese Email melden: smart@open-publisher.net Gefragt sind Leute die sich in mindestens einem der folgenden Fachgebiete auskennen:      Webseitendesign (Umsetzung) f&uuml;r die Administrationsoberfl&auml;che   Webseiten Usability   Gute PHP5 Kentnisse.Gute MySql Kentnisse. Am Besten mit der Version 4.1Redaktionelle &Uuml;berarbeitung der Dokumentation bzw &Uuml;bersetzung ins Englische, Franz&ouml;sische   Geduld, und den n&ouml;tigen Willen das Projekt vorran zu bringen.      Ziel ist es die bestehenden Module auszubauen bzw Neue zu erstellen.     ', '', '', '');
INSERT INTO `smart_article_index` VALUES (20, ' Actions    Hier befindet sich eine Liste der Actionklassen des Navigationsmodul die zum erstellen der Views benutzt werden k&ouml;nnen. Es gibt noch eine Reihe weiterer Klassen, die aber nur f&uuml;r die Views im Administrationsbereich verwendung finden. Die Parameter der Actionaufrufe haben immer die selbe Bedeutung. Erkl&auml;rung folgender Parameter:  ''id_node'' - Navigationsknotenpunkt ID auf die sich die Action bezieht''result'' - Hier muss die Referenz eines vorher definierten leeren Arrays &uuml;bergeben werden. Ex.: &amp;$this-&gt;tplVar ''fields'' - Array mit den Namen der Knoten Datenbank-Felder. Die m&ouml;glichen Felder eines Knoten sind: ''id_node'', ''id_parent'', ''id_sector'', ''id_view'', ''status'', ''rank'', ''title'', ''short_text'', ''body'', ''format'', ''logo'', ''media_folder''''status'' - In diesem array wird definiert welchen Status der oder die Knoten haben m&uuml;ssen. Das erste Element im Array definiert die Beziehung. Eine von den folgenden sind m&ouml;glich: ''&lt;'',''&gt;'',''='',''&gt;='',''&lt;=''. Das zweite element definiert den Statuswert. entweder 1 oder 2. Beispiel: array(''&gt;'',1). Der oder die Knoten m&uuml;ssen einen Status gr&ouml;sser als 1 haben. 1 bedeutet inaktiv. 2 bedeutet activ.''order'' - Kann das Resultat aus meheren Knoten bestehen so wird in einem Array festgelegt wie die Reihenfolge des Resultates sortiert wird. Das erste Element im array definiert nach welchem Feld sortiert wird. M&ouml;gliche Felder sind ''title'',''rank''. Das zweite Element definiert die Reihenfolge. M&ouml;gliche Werte sind ''asc'',''desc''. Also f&uuml;r aufsteigend und absteigend. Beispiel: array(''title'',''asc''). Wird order nicht angegeben so wird nach ''rank'' ''asc'' das Resultat sortiert.  Eine Actionklasse pr&uuml;ft immer die Parameter auf ihre G&uuml;ltigkeit. Sollten Parameter nicht das richtige Format haben oder Parameter die fehlen, so erstellt die Klasse eine Exception. D.h. der Programablauf wird umgeleietet. Entweder wird eine Fehlermeldung angezeigt. Oder es nur ein Logeintrag geschrieben im Wurzelordner /logs. Es h&auml;ngt davon ab wie die Konfigurationsvariablen f&uuml;r die Fehlerbehandlungengesetzt sind.    getNode Beschreibung: F&uuml;llt ein Array mit dem Inhalt eines Knotens Aufrufsyntax: $this-&gt;model-&gt;action(''navigation'', ''getNode'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array(),                               ''fields''  =&gt; array() ));  getChilds Beschreibung: F&uuml;llt ein Array mit dem Inhalt der Kindsknoten eines Knotens Aufrufsyntax: $this-&gt;model-&gt;action(''navigation'', ''getChilds'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''status''  =&gt; array,       // optional                               ''order''   =&gt; array,       // optional                               ''fields''  =&gt; array() ));  getBranch Beschreibung: F&uuml;llt ein Array mit dem Inhalt jedem Knoten de Baumastes auf dem der Knoten sich befindet Aufrufsyntax: $this-&gt;model-&gt;action(''navigation'', ''getBanch'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array() )); getTree Beschreibung: F&uuml;llt ein Array mit dem Inhalt des Knotenbaumes. Wird id_node angegeben so wird der Baum ab diesem Konten zur&uuml;ckgegeben. Aufrufsyntax: $this-&gt;model-&gt;action(''navigation'', ''getTree'',                         array(''id_node'' =&gt; integer, // optional                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array() ));   getAllThumbs Beschreibung: F&uuml;llt ein Array mit den Bilderdaten eines Knotens Aufrufsyntax: $this-&gt;model-&gt;action(''navigation'', ''getAllThumbs'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_pic'',''id_node'',''title'',                                                  ''description'',''file'',''height'',                                                  ''width'',''rank'',''mime'',''size'') ));  getAllFiles Beschreibung: F&uuml;llt ein Array mit den Dateidaten eines Knoten Aufrufsyntax: $this-&gt;model-&gt;action(''navigation'', ''getAllFiles'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_file'',''id_node'',''title'',                                                  ''description'',''file'',''rank'',                                                  ''mime'',''size'')));  getPicture Beschreibung: F&uuml;llt ein Array mit den Daten eines Bildes Aufrufsyntax: $this-&gt;model-&gt;action(''navigation'', ''getPicture'',                         array(''id_pic'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_pic'',''id_node'',''title'',                                                  ''description'',''file'',''height'',                                                  ''width'',''rank'',''mime'',                                                  ''size'',''media_folder'') ));  getFile Beschreibung: F&uuml;llt ein Array mit den Daten einer Datei Aufrufsyntax: $this-&gt;model-&gt;action(''navigation'', ''getFile'',                         array(''id_file'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_file'',''id_node'',''title'',                                                  ''description'',''file'',''rank'',                                                  ''mime'',''size'',''media_folder'')));   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (21, ' Actions    Durch die Actions dieses Moduls kann man auf den Inhalt der Texte zugreifen. Die Parameter der Actionaufrufe haben immer die selbe Bedeutung. Erkl&auml;rung folgender Parameter:  ''id_text'' - Text ID auf die sich die Action bezieht''result'' - Hier muss die Referenz eines vorher definierten leeren Arrays &uuml;bergeben werden. Ex.: &amp;$this-&gt;tplVar ''fields'' - Array mit den Namen der Knoten Datenbank-Felder. Die m&ouml;glichen Felder eines Textes sind: ''id_text'',''status'',''title'',''short_text'',''body'',''media_folder'' ''order'' - Besteht das Resultat aus meheren Texten so wird in einem Array festgelegt wie die Reihenfolge des Resultates sortiert wird. Das erste Element im array definiert nach welchem Feld sortiert wird. M&ouml;gliche Felder sind ''title'',''status''. Das zweite Element definiert die Reihenfolge. M&ouml;gliche Werte sind ''asc'',''desc''. Also f&uuml;r aufsteigend und absteigend. Beispiel: array(''title'',''asc''). Wird order nicht angegeben so wird nach ''title'' ''asc'' das Resultat sortiert.''status'' - In diesem array wird definiert welchen Status der oder die Knoten haben m&uuml;ssen. Das erste Element im Array definiert die Beziehung. Eine von den folgenden sind m&ouml;glich: ''&lt;'',''&gt;'',''='',''&gt;='',''&lt;=''. Das zweite element definiert den Statuswert. entweder 1 oder 2. Beispiel: array(''&gt;'',1). Der oder die Knoten m&uuml;ssen einen Status gr&ouml;sser als 1 haben. 1 bedeutet inaktiv. 2 bedeutet activ.  Eine Actionklasse pr&uuml;ft immer die Parameter auf ihre G&uuml;ltigkeit. Sollten Parameter nicht das richtige Format haben oder Parameter die fehlen, so erstellt die Klasse eine Exception. D.h. der Programablauf wird umgeleitet. Entweder wird eine Fehlermeldung angezeigt. Oder es nur ein Logeintrag geschrieben im Wurzelordner /logs. Es h&auml;ngt davon ab wie die Konfigurationsvariablen f&uuml;r die Fehlerbehandlungengesetzt sind.  getText Beschreibung: F&uuml;llt ein Array mit dem Inhalt eines Textes Aufrufsyntax: $this-&gt;model-&gt;action(''misc'', ''getText'',                     array(''id_text'' =&gt; integer,                           ''result''  =&gt; &amp; array(),                           ''fields''  =&gt; array() )); getTextes Beschreibung: F&uuml;llt ein Array mit dem Inhalt mehrer Texte Aufrufsyntax: $this-&gt;model-&gt;action(''misc'', ''getTextes'',                     array(''ids''    =&gt; array(id_x,id_y,id_z,..,..,..),                           ''result'' =&gt; &amp; array(),                           ''order''  =&gt; array(),                           ''fields'' =&gt; array() )); getAllThumbs Beschreibung: F&uuml;llt ein Array mit den Bilderdaten eines Textes Aufrufsyntax: $this-&gt;model-&gt;action(''misc'', ''getAllThumbs'',                         array(''id_text'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_pic'',''id_text'',''title'',                                                  ''description'',''file'',''height'',                                                  ''width'',''rank'',''mime'',''size'') ));  getAllFiles Beschreibung: F&uuml;llt ein Array mit den Dateidaten eines Textes Aufrufsyntax: $this-&gt;model-&gt;action(''misc'', ''getAllFiles'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_file'',''id_text'',''title'',                                                  ''description'',''file'',''rank'',                                                  ''mime'',''size'')));  getPicture Beschreibung: F&uuml;llt ein Array mit den Daten eines Text-Bildes Aufrufsyntax: $this-&gt;model-&gt;action(''misc'', ''getPicture'',                         array(''id_pic'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_pic'',''id_text'',''title'',                                                  ''description'',''file'',''height'',                                                  ''width'',''rank'',''mime'',                                                  ''size'',''media_folder'') ));  getFile Beschreibung: F&uuml;llt ein Array mit den Daten einer Text-Datei Aufrufsyntax: $this-&gt;model-&gt;action(''misc'', ''getFile'',                         array(''id_file'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''fields''  =&gt; array(''id_file'',''id_text'',''title'',                                                  ''description'',''file'',''rank'',                                                  ''mime'',''size'',''media_folder'')));   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (24, ' Actions    This module provide a couple of action classes which you can use in public views.         getArticle     Description: Fill an array with the content of an article      Usage:     $this-&gt;model-&gt;action(''article'', ''getArticle'',                     array(''id_article'' =&gt; integer,                           ''result''     =&gt; &amp; array(),                           ''fields''     =&gt; array(''title'',''overtitle'',                                                 ''subtitle'',''header'',                                                 ''description'',''body'',                                                 ''ps'',''pubdate'',                                                 ''articledate'',''modifydate'',                                                 ''logo'',''media_folder'') ));   &nbsp; &nbsp; getArticles      Description: Fill an array with the content of articles that are linked to a navigation node. Default order is ''rank asc''       Usage:      $this-&gt;model-&gt;action(''article'', ''getArticles'',                         array(''id_node'' =&gt; integer,                               ''result''  =&gt; &amp; array,                               ''status''  =&gt; array(''&gt;|&lt;|=|&gt;=|&lt;=|!='', 0|1|2|3|4),// optional                               ''order''   =&gt; array(''rank|title|                                            articledate|pubdate|modifydate                                            overtitle|subtitle'', ''asc|desc''),  // optional                               ''fields''  =&gt; array(''title'',''overtitle'',                                                  ''subtitle'',''header'',                                                  ''description'',''body'',                                                  ''ps'',''pubdate'',                                                  ''articledate'',''modifydate'',                                                  ''logo'',''media_folder'') )); &nbsp; search               Description: Fill an array with the data of articles that match a search string   Usage:         $this-&gt;model-&gt;action(''article'', ''search'',                         array(''result''  =&gt; &amp; array,                               ''search''  =&gt; string,   // search string                               ''status''  =&gt; array(''&gt;|&lt;|=|&gt;=|&lt;=|!='', 0|1|2|3|4),// optional                               ''order''   =&gt; array(''rank|title|                                            articledate|pubdate|modifydate                                            overtitle|subtitle'', ''asc|desc''),  // optional                               ''fields''  =&gt; array(''title'',''overtitle'',''id_node'',                                                  ''subtitle'',''header'',                                                  ''description'',''body'',                                                  ''ps'',''pubdate'',                                                  ''articledate'',''modifydate'',                                                  ''logo'',''media_folder'') ));  ', '', '', '');
INSERT INTO `smart_article_index` VALUES (22, ' Modul-Lizenz    Die mit Smart3 ausgelieferten Module stehen unter folgender Lizenz:   		    GNU GENERAL PUBLIC LICENSE		       Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc.                       51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.			    Preamble  The licenses for most software are designed to take away yourfreedom to share and change it.  By contrast, the GNU General PublicLicense is intended to guarantee your freedom to share and change freesoftware--to make sure the software is free for all its users.  ThisGeneral Public License applies to most of the Free SoftwareFoundation''s software and to any other program whose authors commit tousing it.  (Some other Free Software Foundation software is covered bythe GNU Library General Public License instead.)  You can apply it toyour programs, too.  When we speak of free software, we are referring to freedom, notprice.  Our General Public Licenses are designed to make sure that youhave the freedom to distribute copies of free software (and charge forthis service if you wish), that you receive source code or can get itif you want it, that you can change the software or use pieces of itin new free programs; and that you know you can do these things.  To protect your rights, we need to make restrictions that forbidanyone to deny you these rights or to ask you to surrender the rights.These restrictions translate to certain responsibilities for you if youdistribute copies of the software, or if you modify it.  For example, if you distribute copies of such a program, whethergratis or for a fee, you must give the recipients all the rights thatyou have.  You must make sure that they, too, receive or can get thesource code.  And you must show them these terms so they know theirrights.  We protect your rights with two steps: (1) copyright the software, and(2) offer you this license which gives you legal permission to copy,distribute and/or modify the software.  Also, for each author''s protection and ours, we want to make certainthat everyone understands that there is no warranty for this freesoftware.  If the software is modified by someone else and passed on, wewant its recipients to know that what they have is not the original, sothat any problems introduced by others will not reflect on the originalauthors'' reputations.  Finally, any free program is threatened constantly by softwarepatents.  We wish to avoid the danger that redistributors of a freeprogram will individually obtain patent licenses, in effect making theprogram proprietary.  To prevent this, we have made it clear that anypatent must be licensed for everyone''s free use or not licensed at all.  The precise terms and conditions for copying, distribution andmodification follow.		    GNU GENERAL PUBLIC LICENSE   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION  0. This License applies to any program or other work which containsa notice placed by the copyright holder saying it may be distributedunder the terms of this General Public License.  The &quot;Program&quot;, below,refers to any such program or work, and a &quot;work based on the Program&quot;means either the Program or any derivative work under copyright law:that is to say, a work containing the Program or a portion of it,either verbatim or with modifications and/or translated into anotherlanguage.  (Hereinafter, translation is included without limitation inthe term &quot;modification&quot;.)  Each licensee is addressed as &quot;you&quot;.Activities other than copying, distribution and modification are notcovered by this License; they are outside its scope.  The act ofrunning the Program is not restricted, and the output from the Programis covered only if its contents constitute a work based on theProgram (independent of having been made by running the Program).Whether that is true depends on what the Program does.  1. You may copy and distribute verbatim copies of the Program''ssource code as you receive it, in any medium, provided that youconspicuously and appropriately publish on each copy an appropriatecopyright notice and disclaimer of warranty; keep intact all thenotices that refer to this License and to the absence of any warranty;and give any other recipients of the Program a copy of this Licensealong with the Program.You may charge a fee for the physical act of transferring a copy, andyou may at your option offer warranty protection in exchange for a fee.  2. You may modify your copy or copies of the Program or any portionof it, thus forming a work based on the Program, and copy anddistribute such modifications or work under the terms of Section 1above, provided that you also meet all of these conditions:    a) You must cause the modified files to carry prominent notices    stating that you changed the files and the date of any change.    b) You must cause any work that you distribute or publish, that in    whole or in part contains or is derived from the Program or any    part thereof, to be licensed as a whole at no charge to all third    parties under the terms of this License.    c) If the modified program normally reads commands interactively    when run, you must cause it, when started running for such    interactive use in the most ordinary way, to print or display an    announcement including an appropriate copyright notice and a    notice that there is no warranty (or else, saying that you provide    a warranty) and that users may redistribute the program under    these conditions, and telling the user how to view a copy of this    License.  (Exception: if the Program itself is interactive but    does not normally print such an announcement, your work based on    the Program is not required to print an announcement.)These requirements apply to the modified work as a whole.  Ifidentifiable sections of that work are not derived from the Program,and can be reasonably considered independent and separate works inthemselves, then this License, and its terms, do not apply to thosesections when you distribute them as separate works.  But when youdistribute the same sections as part of a whole which is a work basedon the Program, the distribution of the whole must be on the terms ofthis License, whose permissions for other licensees extend to theentire whole, and thus to each and every part regardless of who wrote it.Thus, it is not the intent of this section to claim rights or contestyour rights to work written entirely by you; rather, the intent is toexercise the right to control the distribution of derivative orcollective works based on the Program.In addition, mere aggregation of another work not based on the Programwith the Program (or with a work based on the Program) on a volume ofa storage or distribution medium does not bring the other work underthe scope of this License.  3. You may copy and distribute the Program (or a work based on it,under Section 2) in object code or executable form under the terms ofSections 1 and 2 above provided that you also do one of the following:    a) Accompany it with the complete corresponding machine-readable    source code, which must be distributed under the terms of Sections    1 and 2 above on a medium customarily used for software interchange; or,    b) Accompany it with a written offer, valid for at least three    years, to give any third party, for a charge no more than your    cost of physically performing source distribution, a complete    machine-readable copy of the corresponding source code, to be    distributed under the terms of Sections 1 and 2 above on a medium    customarily used for software interchange; or,    c) Accompany it with the information you received as to the offer    to distribute corresponding source code.  (This alternative is    allowed only for noncommercial distribution and only if you    received the program in object code or executable form with such    an offer, in accord with Subsection b above.)The source code for a work means the preferred form of the work formaking modifications to it.  For an executable work, complete sourcecode means all the source code for all modules it contains, plus anyassociated interface definition files, plus the scripts used tocontrol compilation and installation of the executable.  However, as aspecial exception, the source code distributed need not includeanything that is normally distributed (in either source or binaryform) with the major components (compiler, kernel, and so on) of theoperating system on which the executable runs, unless that componentitself accompanies the executable.If distribution of executable or object code is made by offeringaccess to copy from a designated place, then offering equivalentaccess to copy the source code from the same place counts asdistribution of the source code, even though third parties are notcompelled to copy the source along with the object code.  4. You may not copy, modify, sublicense, or distribute the Programexcept as expressly provided under this License.  Any attemptotherwise to copy, modify, sublicense or distribute the Program isvoid, and will automatically terminate your rights under this License.However, parties who have received copies, or rights, from you underthis License will not have their licenses terminated so long as suchparties remain in full compliance.  5. You are not required to accept this License, since you have notsigned it.  However, nothing else grants you permission to modify ordistribute the Program or its derivative works.  These actions areprohibited by law if you do not accept this License.  Therefore, bymodifying or distributing the Program (or any work based on theProgram), you indicate your acceptance of this License to do so, andall its terms and conditions for copying, distributing or modifyingthe Program or works based on it.  6. Each time you redistribute the Program (or any work based on theProgram), the recipient automatically receives a license from theoriginal licensor to copy, distribute or modify the Program subject tothese terms and conditions.  You may not impose any furtherrestrictions on the recipients'' exercise of the rights granted herein.You are not responsible for enforcing compliance by third parties tothis License.  7. If, as a consequence of a court judgment or allegation of patentinfringement or for any other reason (not limited to patent issues),conditions are imposed on you (whether by court order, agreement orotherwise) that contradict the conditions of this License, they do notexcuse you from the conditions of this License.  If you cannotdistribute so as to satisfy simultaneously your obligations under thisLicense and any other pertinent obligations, then as a consequence youmay not distribute the Program at all.  For example, if a patentlicense would not permit royalty-free redistribution of the Program byall those who receive copies directly or indirectly through you, thenthe only way you could satisfy both it and this License would be torefrain entirely from distribution of the Program.If any portion of this section is held invalid or unenforceable underany particular circumstance, the balance of the section is intended toapply and the section as a whole is intended to apply in othercircumstances.It is not the purpose of this section to induce you to infringe anypatents or other property right claims or to contest validity of anysuch claims; this section has the sole purpose of protecting theintegrity of the free software distribution system, which isimplemented by public license practices.  Many people have madegenerous contributions to the wide range of software distributedthrough that system in reliance on consistent application of thatsystem; it is up to the author/donor to decide if he or she is willingto distribute software through any other system and a licensee cannotimpose that choice.This section is intended to make thoroughly clear what is believed tobe a consequence of the rest of this License.  8. If the distribution and/or use of the Program is restricted incertain countries either by patents or by copyrighted interfaces, theoriginal copyright holder who places the Program under this Licensemay add an explicit geographical distribution limitation excludingthose countries, so that distribution is permitted only in or amongcountries not thus excluded.  In such case, this License incorporatesthe limitation as if written in the body of this License.  9. The Free Software Foundation may publish revised and/or new versionsof the General Public License from time to time.  Such new versions willbe similar in spirit to the present version, but may differ in detail toaddress new problems or concerns.Each version is given a distinguishing version number.  If the Programspecifies a version number of this License which applies to it and &quot;anylater version&quot;, you have the option of following the terms and conditionseither of that version or of any later version published by the FreeSoftware Foundation.  If the Program does not specify a version number ofthis License, you may choose any version ever published by the Free SoftwareFoundation.  10. If you wish to incorporate parts of the Program into other freeprograms whose distribution conditions are different, write to the authorto ask for permission.  For software which is copyrighted by the FreeSoftware Foundation, write to the Free Software Foundation; we sometimesmake exceptions for this.  Our decision will be guided by the two goalsof preserving the free status of all derivatives of our free software andof promoting the sharing and reuse of software generally.			    NO WARRANTY  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTYFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHENOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIESPROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSEDOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK ASTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THEPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,REPAIR OR CORRECTION.  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITINGWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/ORREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISINGOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITEDTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BYYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHERPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THEPOSSIBILITY OF SUCH DAMAGES.		     END OF TERMS AND CONDITIONS	    How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatestpossible use to the public, the best way to achieve this is to make itfree software which everyone can redistribute and change under these terms.  To do so, attach the following notices to the program.  It is safestto attach them to the start of each source file to most effectivelyconvey the exclusion of warranty; and each file should have at leastthe &quot;copyright&quot; line and a pointer to where the full notice is found.        Copyright (C)       This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USAAlso add information on how to contact you by electronic and paper mail.If the program is interactive, make it output a short notice like thiswhen it starts in an interactive mode:    Gnomovision version 69, Copyright (C) year name of author    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w''.    This is free software, and you are welcome to redistribute it    under certain conditions; type `show c'' for details.The hypothetical commands `show w'' and `show c'' should show the appropriateparts of the General Public License.  Of course, the commands you use maybe called something other than `show w'' and `show c''; they could even bemouse-clicks or menu items--whatever suits your program.You should also get your employer (if you work as a programmer) or yourschool, if any, to sign a &quot;copyright disclaimer&quot; for the program, ifnecessary.  Here is a sample; alter the names:  Yoyodyne, Inc., hereby disclaims all copyright interest in the program  `Gnomovision'' (which makes passes at compilers) written by James Hacker.  , 1 April 1989  Ty Coon, President of ViceThis General Public License does not permit incorporating your program intoproprietary programs.  If your program is a subroutine library, you mayconsider it more useful to permit linking proprietary applications with thelibrary.  If this is what you want to do, use the GNU Library GeneralPublic License instead of this License.   ', '', '', '');
INSERT INTO `smart_article_index` VALUES (23, ' Actions        Dieses Modul stallt eine Reihe von Action-Klassen zur Verf&uuml;gung die in Projekt-Views verwendet werden k&ouml;nnen.                getArticle         Beschreibung: F&uuml;llt ein Array mit den Daten eines Artikels                  Syntax:             $this-&gt;model-&gt;action(''article'', ''getArticle'',                         array(''id_article'' =&gt; integer,                               ''result''     =&gt; &amp; array(),                               ''fields''     =&gt; array(''title'',''overtitle'',                                                     ''subtitle'',''header'',                                                     ''description'',''body'',                                                     ''ps'',''pubdate'',                                                     ''articledate'',''modifydate'',                                                     ''logo'',''media_folder'') ));   &nbsp; &nbsp; getArticles                Beschreibung: F&uuml;llt ein Array mit den Daten von Artikeln die sich unterhalb eines Navigationsknoten befinden            Syntax:        $this-&gt;model-&gt;action(''article'', ''getArticles'',                             array(''id_node'' =&gt; integer,                                   ''result''  =&gt; &amp; array,                                   ''status''  =&gt; array(''&gt;|&lt;|=|&gt;=|&lt;=|!='', 0|1|2|3|4),// optional                                   ''order''   =&gt; array(''rank|title|                                                articledate|pubdate|modifydate                                                overtitle|subtitle'', ''asc|desc''),  // optional                                   ''fields''  =&gt; array(''title'',''overtitle'',                                                      ''subtitle'',''header'',                                                      ''description'',''body'',                                                      ''ps'',''pubdate'',                                                      ''articledate'',''modifydate'',                                                      ''logo'',''media_folder'') ));    &nbsp;    search   Beschreibung: F&uuml;llt ein Array mit den Daten von Artikeln die einem Suchkriterium entsprechen           Syntax:      $this-&gt;model-&gt;action(''article'', ''search'',                             array(''result''  =&gt; &amp; array,                                   ''search''  =&gt; string,   // search string                                   ''status''  =&gt; array( ''&gt;|&lt;|=|&gt;=|&lt;=|!='',                                                       0|1|2|3|4 ),// optional                                   ''order''   =&gt; array(''rank|title|                                                articledate|pubdate|modifydate                                                overtitle|subtitle'', ''asc|desc''),  // optional                                   ''fields''  =&gt; array(''title'',''overtitle'',''id_node'',                                                      ''subtitle'',''header'',                                                      ''description'',''body'',                                                      ''ps'',''pubdate'',                                                      ''articledate'',''modifydate'',                                                      ''logo'',''media_folder'') ));  ', '', '', '');
INSERT INTO `smart_article_index` VALUES (25, ' Public Projects Views and Templates    You will find in the root folders /templates_smart and /views_smart all public views and templates. It''s an example of a project. You should insert the example content during the setup to check out how every thing works together. Based on this example you can adapt the views and templates to your own project conception. In this case you should store your project files in new folders; Ex.: /views_myproject and /templates_myproject, to prevent overwriting your modified files during the next framework update.        Usually every view class has a corresponding template file. The following views and templates are installed by default:  ViewArticle.php - tpl.article.php - This view fetch the demanded article data, assign template variables with this data and loads the corresponding template which outputs the article data.ViewError.php - tpl.error.php - Depending on the configuration settings this view output error messages.ViewHeader.php - tpl.header.php - This view build the output for every page header. ViewIndex.php - tpl.index.php - This view is responsible for the entry page.ViewLogout.php - Do some logout stuff. A logout link only appears in the left navigation bar if the webvisitor has previously login into the admin area. This view dont need any template.  ViewMainNavigation.php - tpl.mainNavigation.php - This view build the main navigation links that appears on the left side of every pageViewNode.php - tpl.node.php - This view fetch the demanded navigation node, articles of this node and links of this node. ViewPicture.php - tpl.picture.php - Show a picture in whole size.ViewSearch.php - tpl.search.php - Show the articles that match a search string   ViewSimpleNode.php - tpl.simpleNode.php - Show a simple navigation node that has no subnodes or articles, links..... ViewSitemap.php - tpl.sitemap.php - Show the whole navigation node tree with articles.   ', '', '', '');

-- 
-- Dumping data for table `smart_link_links`
-- 

INSERT INTO `smart_link_links` VALUES (1, 37, 2, 'PHP.NET', 'PHP  is a widely-used general-purpose scripting language that is especially suited for Web development and can be embedded into HTML.', 'http://www.php.net', 0);
INSERT INTO `smart_link_links` VALUES (2, 37, 2, 'Apache HTTP Server', 'The Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows NT. The goal of this project is to provide a secure, efficient and extensible server that provides HTTP services in sync with the current HTTP standards.', 'http://httpd.apache.org', 0);
INSERT INTO `smart_link_links` VALUES (3, 38, 2, 'WACT', ' The Web Application Component Toolkit is a modular patterns based framework for creating high performance web applications. WACT assists in implementing the Model View Controller pattern and the related Domain Model, Template View, Front Controller and Application Controller patterns.', 'http://www.phpwact.org', 0);
INSERT INTO `smart_link_links` VALUES (4, 38, 2, 'MSDN Tutorial', 'The purpose of many computer systems is to retrieve data from a data store and display it for the user. After the user changes the data, the system stores the updates in the data store. Because the key flow of information is between the data store and the user interface, you might be inclined to tie these two pieces together to reduce the amount of coding and to improve application performance. However, this seemingly natural approach has some significant problems. One problem is that the user interface tends to change much more frequently than the data storage system. Another problem with coupling the data and user interface pieces is that business applications tend to incorporate business logic that goes far beyond data transmission.', 'http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnpatterns/html/DesMVC.asp', 0);
INSERT INTO `smart_link_links` VALUES (5, 39, 2, 'PHP Resource Index', 'Hundreds of PHP resources, categorized and searchable', 'http://php.resourceindex.com/', 0);
INSERT INTO `smart_link_links` VALUES (6, 39, 2, 'Phpfreaks', 'This website exists to provide you with information to use while learning or developing PHP and MySQL. If you need PHP Help or you would like to provide PHP Help to other developers, you are in the right place. Additionally, we offer Apache Help, MySQL Help, Javascript Help, CSS Help, XML Help and much more.', 'http://www.phpfreaks.com/', 0);
INSERT INTO `smart_link_links` VALUES (7, 39, 2, 'Werberdev', 'Code Examples, Articles, Tutorials', 'http://www.weberdev.com/', 0);

-- 
-- Dumping data for table `smart_misc_text`
-- 

INSERT INTO `smart_misc_text` VALUES (1, 2, 'Front Page Text (German)', 'Text der auf der Haupteingangsseite erscheint.', '<h3>SMART3</h3>   <p>Bei Smart3 handelt es sich um ein <a href="http://www.php.net" target="_blank" title="PHP NET">php</a> Framework das aufgrund seiner Flexibilit&auml;t und einfachen Struktur als effizientes Werkzeug zur L&ouml;sung von sehr unterschiedlichen Aufgaben eingesetzt werden kann.</p>  <h5>Framework?  </h5>  <p>Jedes WebProjekt, und sei es nur ein einfaches Guestbook, hat eine mehr oder weniger durchdachte Grundkonzeption wo es um Fragen geht wie; Ob und welche Klassen benutzt werden sollen? Was passiert wo in welcher Datei und wird wo eingebunden? Usw..... </p><p>Um nicht immer wieder bei jedem Projekt von Vorne anzufangen, also die Frage; Wie soll das Alles zusammenhalten? wurde Smart3 konzipiert. Smart3 besteht aus einem Grundger&uuml;st auf dem Projekte aufgesetzt werden k&ouml;nnen. Desweiteren steht man oft vor dem Problem ein bestehendes Projekt zu erweitern bzw umzu&auml;nderen. Smart3 ist f&uuml;r die L&ouml;sung dieser Problematik entwickelt worden.</p>     <p>Smart3 kann eine modulare Struktur verwalten sowie den darin enthaltenen Aktionen die nach dem Plug&amp;Play Prinzip funktionieren (dar&uuml;ber sp&auml;ter mehr). Vereinfacht gesagt w&auml;re ein Guestbook also nichts Anderes als ein Modul mit den darin enthaltenen Aktionen. Desweiteren wird in Smart3 Wert auf Datenvalidierung gelegt. Dieses sollte nicht erst zu einem Thema werden wenn es zu sp&auml;t ist. D.h. u.a. wenn eine Action ein Integer Wert erwartet und es wird statt dessen ein String &uuml;bergeben so wird nicht einmal der Versuch unternommen die Action auszuf&uuml;hren. Siehe darzu: <a title="Aktion-Klassen Beschreibung" href="?id_article=13&amp;view=article">Action-Klassen</a>.<br /> </p>  <h5>  Noch ein Framework?    </h5>  <p>Die von mir getesteten bestehenden Frameworks waren entweder nicht flexibel genug oder zu kompliziert in der Anwendung. Es wurde Wert auf Einfachheit und Flexibilit&auml;t gelegt. Es wird sich zeigen ob Smart3 diesen Kriterien gerecht wird.<br /> </p>     <p>Smart3 wird mit ein paar vorinstallierten Modulen ausgeliefert. Ohne Module macht das Basisframework Nichts. Mit diesen Modulen kann man schon kleinere Projekte angehen. Als Beispiel zu nennen w&auml;re: Die Smart3 Webprojektseite (also diese Webseite die Sie im Moment betrachten) wurde ganz damit erstellt. Es sind u.a. folgende Module installiert:</p>  <ul> <li>User-module</li> <li>Navigations-modul</li><li>Einfaches Text-modul<br />   </li>  <li>Options-modul</li> </ul>  <p>Zu den einzelnen Modulen siehe die ausf&uuml;hrliche <a title="Modul Dokumentation" target="_self" href="?id_node=2">Dokumentation</a>. Es steht dem nichts im Wege die bestehenden Module zu erweitern oder komplet neue Module mit einem anderen Funktions-Hintergrund zu erstellen (z.b. anderer Datenbank Typ). F&uuml;r die mit Smart3 ausgelieferten Module wird <a title="MySql Database Site" target="_blank" href="http://www.mysql.com">MySql</a> 4.1 ben&ouml;tigt. <br /> </p>  <h5>      Smart3 und MVC.      </h5>  <p>MVC steht f&uuml;r <a href="http://www.phpwact.org/pattern/model_view_controller" target="_blank" title="Model-View-Controller Description">Model-View-Controller</a> und bedeutet, dass eine Applikation aus 3 Komponenten besteht. Smart3 basiert teilweise auf diesem Prinzip.</p>   <p><strong>Model</strong> &ndash; Hier finden Kernprozesse statt. Z.B. wird u.a. auf Daten zugegriffen bzw Daten werden ver&auml;ndert. &gt; Datenbankzugriff. Auch Businesslogik genannt.</p>   <p><strong>View</strong> &ndash; Die Art und Weise wie Daten pr&auml;sentiert werden. Z.B. Als html oder pdf Datei. Pr&auml;sentationslogik genannt.</p>   <p><strong>Controller</strong> &ndash; Empf&auml;ngt die Anfrage die an die Applikation gerichtet ist und deligiert sie so weiter, dass das System diese verarbeiten kann.</p>   <p>Es gibt keine Standartprozedur wie das MVC Prinzip umzusetzen ist. SMART3 setzt MVC nur teilweise um. Somit erspare ich mir Erkl&auml;rungen auf Behauptungen zu geben die darauf abzielen, dass Smart3 kein MVC Framework sei. Also wenn in der Dokumentation von <strong>Model</strong>, <strong>View</strong> oder <strong>Controller</strong> die Rede ist, dann in Bezug wie dieses in Smart3 umgesetzt ist und nicht wie das in Fachliteratur o.&auml;. beschrieben ist. Es ging nicht darum MVC nach Strich und Faden umzusetzen sondern um eine eigene Umsetzung dessen wie Applikations-Prozesse aufgeteilt werden k&ouml;nnen.</p> <h5>Prozesse </h5> <p>Ein Templatedesigner braucht es nicht zu interessieren wie die Daten die in den Vorlagen eingef&uuml;gt werden im Detail zu beschaffen sind. Dieser braucht nur wissen; Welche Art von Daten befindet sich in welchen Variablen. Wir haben hier also einmal den Prozess der <em><strong>Template</strong></em>-Erstellung. Zur Zeit kann man in SMART3 zwischen <a href="http://www.php.net" target="_blank">PHP</a> (Voreinstellung)&nbsp; und <a href="http://smarty.php.net" target="_blank">Smarty</a>  als Template-Engine ausw&auml;hlen. Das Einbinden anderer Engines ist m&ouml;glich.<br /> </p><p>Um dem Templatedesigner entsprechende Variablen zur Verf&uuml;gung zu stellen, m&uuml;ssen diese erst einmal aufbereitet werden. Dieses passiert in sogenannten &quot;View&quot; Klassen. Man k&ouml;nnte diese auch Template Hilfsklassen nennen. Hier werden die Variablen die in den Templates zum Einsatz kommen mit entsprechenden Daten gef&uuml;llt. Diesen Prozess nennen wir <em><strong>View</strong></em>. (In MVC sind View und Template eine Komponente)<br /> </p><p>In der View kommt man an die Daten &uuml;ber spezielle Actionklassen die Teile des Models sind. Diese Actionklassen greifen direkt auf die Datenbank zu. Aber nicht nur das. Hier finden auch alle nicht Datenbankspezifische Kernprozesse stattfinden. Dieses ist also der <em><strong>Model</strong></em> Prozess.</p><p>Die 3 in Smart3 steht f&uuml;r diese 3 Prozesse die sich idealerweise auch in der Arbeitsaufteilung f&uuml;r ein Projekt wiederfinden. <em>Der Viewprogrammierer teilt dem Modelprogammierer mit, welche Actionklassen er ben&ouml;tigt um bestimmte Daten zu erhalten. Ist die Viewklasse und die daf&uuml;r n&ouml;tigen Actionklassen einmal erstellt wird dem Templatedesigner mitgeteilt in welcher Template (Vorlage) er &uuml;ber welche Variablen verf&uuml;gen kann.</em> </p><p>Jetzt hat man schon eine erste Anwort auf die Frage; Was passiert wo? Z.B Sql Anweisungen, also direkte Datenbankkommandos, finden in Actionklassen statt und nur dort. Man braucht nirgendwo anders danach zu suchen. Dieses beanwortet dann auch die Frage; Was muss ich tun um einen anderen Datenbanktyp benutzen zu k&ouml;nnen? Die Actionklassen austauschen in denen Sqlkommandos ausgef&uuml;hrt werden.</p><p> </p>', 0, '');
INSERT INTO `smart_misc_text` VALUES (3, 2, 'Page Footer Text', 'This is the default text for the footer of a webpage', '&copy; 2005 Armand Turpel <br />', 0, '');
INSERT INTO `smart_misc_text` VALUES (4, 2, 'Front Page Text (English)', 'Front page text in english language', '<h3>SMART3 </h3> <p class="smart">SMART3 is a modular designed <a href="http://www.php.net/">PHP5</a> framework that helps developers to organize their code in a clean, well structured and scalable way. The framework package size without any module is small (~70kb). </p>                 <p class="smart">It wasn''t the goal to build a framework, which follows the MVC pattern. Nevertheless you can identify this pattern in SMART3. The <a target="_blank" href="http://wact.sourceforge.net/index.php/ModelViewController">ModelViewController</a> outline is there.</p>                 <p class="smart">The base framework has no build in high level functionalities. An application based on this framework becomes alive through modules. Smart3 is delivered with a couple of default modules through which it is possible to build web projects and to learn how it works.This webpage is entierly build up on SMART3. The modules require mysql 4.1. </p>                                <p class="smart">In SMART3 a request is related to a view, which holds the contact to as many different module action classes as needed to proceed. There is a loose coupling between the view and the actions (model). The benefit of this mechanism is that it is easier to build a view, that interacts with many different module items. In some MVC frameworks, solving such problems isn&rsquo;t evident.</p>                 <p class="smart">In SMART3 you have the choice between 2 template engines for your projects. 1. <a href="http://www.php.net" target="_blank">PHP</a>  (default) and 2. <a href="http://smarty.php.net/" target="_blank">Smarty</a>. If your are not convenient with the build in template engines you can use your prefered engine. This also counts for a database layer. SMART3 isn''t fixed to a specific DB layer. This is the choice of the module designer to include the required layer.<br /> </p>                                <p class="smart">The SMART3 core framework is released under the <strong>GNU LESSER GENERAL PUBLIC LICENSE</strong>.</p> <p class="smart">The default Modules are released under <strong>GNU GENERAL PUBLIC LICENSE</strong>.<br /> </p>                 <p class="smart">The SMARTs source code is hosted on <a target="_blank" href="http://developer.berlios.de/projects/smart/">Berlios</a> under the Subversion control.</p>', 0, '');
INSERT INTO `smart_misc_text` VALUES (5, 2, 'Front Page Text (French)', 'Contenu de la page d''entrée en français.', '<h3>SMART3 </h3>     <p>Smart3 est un simple environnement de d&eacute;veloppement du type &quot;framework&quot; en php5. Le but est de construire rapidement des applications (web) qui sont en m&ecirc;me temps flexible et facilement extensible pour &ecirc;tre adapter aux nouvelles exigences. </p>     <h4>Framework?   </h4>     <p>Chaque projet a besoin d''une structure base ou il est d&eacute;finit comment le tout fontionne pour que ca devient un ensemble.<br /> </p>     <p>Smart3 est une structure de base sur laquel on peut construire des applications. Smart3 peut g&eacute;rer des modules, dont chaque module offre des classes d''action dans lesquels le comportement de chaque module est definit. Les modules et les classes d''action fonctionnent sur le principe <strong>plug&amp;play</strong>. Donc pas besoin d''&eacute;diter des fichiers de configuration pour les mettre en marche.</p>     <p>Les charact&eacute;ristiques principalles de Smart3 sont la flexibilit&eacute; et la simplicit&eacute;.  </p>     <h4>Smart3 et MVC </h4>     <p> L''architecture <em>Mod&egrave;le Vue Contr&ocirc;leur</em> (<em>MVC</em>) est un motif de conception pour le d&eacute;veloppement d''applications logicielles qui s&eacute;pare le mod&egrave;le de donn&eacute;es, l''interface utilisateur et la logique de contr&ocirc;le.</p>       <ul> <li><strong>Mod&egrave;le - </strong><span class="DWtexte1">Le mod&egrave;le g&egrave;re le comportement et les donn&eacute;es d''une application, r&eacute;pond aux demandes d''informations sur son &eacute;tat (souvent issues de la vue) ainsi qu''aux instructions de changement d''&eacute;tat (souvent issues du contr&ocirc;leur).</span></li><li><span class="DWtexte1"><strong>Vue</strong> - La vue g&egrave;re l''affichage des informations.</span></li><li><span class="DWtexte1"><strong>Contr&ocirc;leur</strong> - Le contr&ocirc;leur interpr&egrave;te les entr&eacute;es de l''utilisateur et informe le mod&egrave;le et/ou la vue des  changements n&eacute;cessaires.</span></li> </ul>     <h4>S&eacute;paration des Taches</h4>     <p>La structure mvc nous permets &agrave; s&eacute;parer les taches qui sont n&eacute;cessaires pour construire une application.</p>     <p>En commence par la <strong>vue</strong>. Dans Smart3 la vue est s&eacute;par&eacute;e: </p>     <ol> <li>dans une class php qui collect et pr&eacute;pare les donn&eacute;es<br />   </li><li>un squelette html pour afficher les donn&eacute;es. (optionel)<br />  </li> </ol>     <p>Dans la class php (1.) on collect et on pr&eacute;pare les donn&eacute;es qu''on a besoin d''affich&eacute; dans les <strong>squelettes</strong> html (2.). Donc quelqu''un qui construit les squelettes html n''est pas forc&eacute;ment le m&ecirc;me d&eacute;veloppeur qui s''occupe de la classe php d''une vue. Les classes php des vues se trouve dans le r&eacute;pertoire /views_xxx et les squelettes correspondants dans /templates_xxx.</p>     <p>Dans les classes des vues on re&ccedil;oit les donn&eacute;es par l''interm&eacute;diaire d''une methode actions du <strong>mod&egrave;le. </strong>Autrement dit: La vue prent contact avec les actions des modules pour optenir ce qu''elle a besoin. <br />  </p>     <p>En r&eacute;sum&eacute; on a <strong>3 taches</strong> qui sont aussi repr&eacute;sent&eacute;es dans le travail pratique avec le syst&egrave;me:</p>     <ul> <li>Construction des <strong>squelettes</strong> (html ou autres)</li><li><strong>Classe php (vue)</strong> pour pr&eacute;parer les donn&eacute;es</li><li><strong>Classe d''action des modules</strong> qui font le travail de base (ex.: acc&eacute;der la base des donn&eacute;es)</li> </ul>   <p> Il y a encore une quatri&egrave;me tache. Delui du <strong>controlleur</strong>. Mais dans le travail pratique de chaque jour on a pas besoin de s''en occuper. Il travail silencieusement en arri&egrave;re plan. Pour le moment il y a 2 controlleur. Celui de l''interface publique et celui de l''interface de l''administration. Dans une future edition on ajoutera un controlleur CLI (Command line interface).</p>', 0, '');

-- 
-- Dumping data for table `smart_navigation_media_pic`
-- 

INSERT INTO `smart_navigation_media_pic` VALUES (1, 2, 'smart3.gif', 16583, 'image/gif', 1, 589, 583, 0, 'Smart3 MVC Schema', '');
INSERT INTO `smart_navigation_media_pic` VALUES (2, 20, 'smart3.gif', 16583, 'image/gif', 1, 589, 583, 0, 'Smart3 MVC Scheme', '');

-- 
-- Dumping data for table `smart_navigation_node`
-- 

INSERT INTO `smart_navigation_node` VALUES (1, 0, 1, 2, 2, 0, '2005-09-28 10:01:29', 'en', 'Documents', '', ' <p>You will find here the entier documentation of Smart3. In a first time the german docs are the most up to date. The english doc was ported and slightly revisioned from the former Smart project. Editorial revisions on the german doc and its english translation are in work. </p> <p>For questions, suggestions and critics please use the <a title="SMART3 Forum" target="_blank" href="https://developer.berlios.de/forum/?group_id=1850">SMART3 project forum</a>. German english or french language are welcome.</p> <h6>Important Notice:</h6> <p>Until Smart3 is alpha stuff there is no upgrade support from earlier releases. Alpha releases are only for testing purpose.<br /> </p>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (2, 1, 2, 2, 2, 2, '2005-09-27 14:14:48', 'en', 'Deutsche Dokumentation', '', '<p>Die Grafik zeigt, vereinfacht dargestellt, wie das Grundger&uuml;st von Smart3 aussieht. </p> <p>Der <strong>Controller</strong> empf&auml;ngt die Anfrage an Smart3. Im Falle einer Webapplikation w&auml;re das eine http Anfrage. Eine wesentliche Aufgabe des Controllers besteht darin das System zu initialisieren und anschliessend die <strong>View</strong> zu laden. Deren Aufgabe ist es Daten so aufzubereiten, dass diese in Vorlagen (<strong>Templates</strong>) dargestellt werden k&ouml;nnen. In den Vorlagen werden die Daten dann eingef&uuml;gt und die fertige Webseite an den Anfragesteller zur&uuml;ckgesendet. Die entsprechenden Daten erh&auml;lt die View &uuml;ber sogenannte Actionklassen vom <strong>Model. </strong>Dabei ist das Model in Module unterteilt.</p><p> </p><p> </p><p> </p><p><br />  <img width="589" height="583" border="0" src="data/navigation/-1954848877/smart3.gif" /><br />  </p> <p>Jene die mit fertigen Modulen arbeiten werden im Prinzip nur mit der View zu tun haben. Mit dem Controller kommt man eher selten in Ber&uuml;hrung. Das Model stellt die Actionsklassen zur Verf&uuml;gung, also das was dem Modul eigentlich Leben einhaucht.</p> <h4><strong>Die View</strong></h4> <p>Eine View besteht aus 2 Elementen. <strong>1.</strong> aus einer Viewklasse oder nennen wir sie auch Template-Hilfs-Klasse und <strong>2.</strong> aus einer Template (deutsch: Vorlage). Letztere ist optional.</p> <p>Wie schon beschrieben ist die Aufgabe einer Viewklasse Daten zu sammeln und so aufzubereiten, dass diese in eine Vorlage eingef&uuml;gt und dargestellt werden k&ouml;nnen. In der Vorlage wird dann auf diese Daten zugegriffen. </p> <p><em>Einfaches Beispiel:</em><br /> In einer Webapplikation geht es darum, dass der Besucher einen bestimmten Artikel lesen m&ouml;chte. Die Anfrage w&auml;re dann etwa in der Art: index.php?view=artikel&amp;id_artikel=23. Der Controller l&auml;dt die View ViewArtikel.php Klasse. Diese nimmt &uuml;ber eine Actionklasse mit dem Artikelmodul Kontakt auf und l&auml;dt Daten, die zu dem Artikel mit ID 23 passen, in ein Array. Der Controller &uuml;bernimmt wieder das Gesch&auml;fft und l&auml;dt die in der ViewKlasse definierte HTML Vorlage. Darin werden dann die Daten die die Viewklasse aufbereitet hat eingef&uuml;gt. Fertig. </p> <p>Projektviews liegen im /views_xxx Ordner. Um das Einbinden sowie dem Erstellen einer Instanz davon braucht man sich nicht zu k&uuml;mmern. Der Controller &uuml;bernimmt das. Siehe unten: Controller. </p> <p>M&ouml;chte man nun den Inhalt eines Artikels ver&auml;ndern bzw einen neuen Artikel erstellen, so l&auml;uft das &uuml;ber einen anderen Controller. Dieser l&auml;dt dann entsprechende Views die das jeweilige Module zur seiner Administration zur Verf&uuml;gung stellt. Mit der Programmierung solcher Views kommt man eigentlich nur in Kontakt beim Erstellen von Modulen. Deswegen werden wir darauf an anderer Stelle eingehen.</p> <h4><strong>Das Model</strong></h4> <p>Wie schon erw&auml;hnt ist das Model in Module aufgeteilt die spezifische Aufgaben haben. Guestbook, Artikel, Navigation usw. Die Module bestehen aus einer Reihe von Actionklassen, die das eigentliche Model darstellen, die auf Anfragen reagieren die an das Modul gesendet werden. Desweiteren bringt ein Modul seine eigenen Views/Templates mit die zu seiner Verwaltung notwendig sind. </p> <p>F&uuml;r den Anfang ist es wichtig die Bedeutung der Actionklassen zu verstehen. Um auf das obrige Beispiel zur&uuml;ckzukommen geht eine Anfrage an das Artikelmodul: &quot;<em>Gib mir den Artikel mit der ID 23</em>&quot;. Genau diese Anfrage wird von einer ganz bestimmten Actionklasse &uuml;bernommen und ausgef&uuml;hrt. In einer Viewklasse w&uuml;rde konkret diese Anfrage folgendermassen aussehen:</p> <pre>$this-&gt;model-&gt;action(''artikel'',''getArticle'',<br />                      array(''id_article'' =&gt; 23,<br />                            ''result''     =&gt; &amp;$content,<br />                            ''fields''     =&gt; array(''title'',''date'',''text'')));</pre> <p>Hier wird eine spezielle Methode der Modelklasse aufgerufen action() &uuml;ber die man Komandos an das Model sendet. &Uuml;brigens ist dieses der einzige Weg wie die Kommunikation mit dem Model abl&auml;uft. Es gibt noch eine zweite Methode die verteilte Aufrufe engegennimmt. Die Parameter der obrigen Action-Methode sind folgende:</p> <p>''artikel'' ist das Modul an das die Anfrage geht.</p> <p>''getArticle'' ist die Actionklasse das die Anfrage entgegennimmt.</p> <p>Der dritte Parameter besteht aus einem Array das der Actionklasse &uuml;bergeben wird um auf die Anfrage zu reagieren. In diesem Fall ist es die ID des Artikels von dem wir den Titel das Datum und den Text m&ouml;chten. Diese Daten werden in der Variable $content abgespeichert die als Referenz (wichtig!) &uuml;bergeben werden muss.</p> <p>Das besondere an der Art wie eine Action-Klasse aufgerufen wird besteht darin, dass diese Klasse nicht vorher durch include() o.&auml;. eingebunden werden muss. Weder m&uuml;ssen wir ihren richtigen Dateinamen noch ihren Klassennamen kennen oder uns um das Erstellen einer Instanz davon k&uuml;mmern. Dies Alles &uuml;bernimmt die action() Methode der Model Klasse. Alles was sie der Actionmethode des Models &uuml;bergeben m&uuml;ssen ist der Modulname, der Action-(pseudoname), und optional Daten die an die Action &uuml;bergeben werden. Solch ein Actionaufruf kann man von egal welcher Stelle des Systems aus ausf&uuml;ren nachdem das Basisframework initialisiert wurde. Also nicht nur von innerhalb einer Viewklasse. So kann auch innerhalb von einer Modulactionklasse eine weitere Action-Klasse eines anderen Moduls aufgerufen werden. Es lassen sich somit komplette Actionbl&ouml;cke erstellen die komplexe Aufgaben erledigen. </p> <p>Ein weiterer Vorteil ist, dass eine neue Modulactionklasse nicht registriert werden muss bevor sie zu benutzen ist. Es reicht die Klasse in den daf&uuml;r vorgesehenen Action-Ordner zu kopieren. Dieses funktioniert also nach dem Plug&amp;Play Prinzip. </p> <p>Noch ein Vorteil ist, dass wenn eine Klasse die aufgerufen wird nicht vorhanden ist, sich das System nicht mit einer Errormeldung verabschiedet. Die Skriptausf&uuml;rung wird fortgefahren. Es lassen sich somit Actionaufrufe an Klassen erstellen die &uuml;berhaupt nicht vorhanden sind, aber erst dann ausgef&uuml;hrt werden wenn das ensprechende Modul oder die Actionklasse vorhanden ist.</p> <p>Wie bereits erw&auml;hnt gibt es eine zweite Methode durch die man Kommandos an an das Model senden kann. Mit dieser Methode werden verteilte Kommandos (<strong>broadcast</strong>) gesendet die an alle Module gerichtet sind.</p> <pre>$this-&gt;model-&gt;broadcast( ''Action-Klasse'', Datenarray() ); </pre> <p>Hier wird an jedes Modul in dem die entsprechende Action-Klasse vorhanden ist, das optionale Datearray() &uuml;bergeben. Mit dieser Art der Kontaktaufnahme mit dem Model kommt man eher selten in Ber&uuml;hrung. Samrt3 macht intern davon gebrauch, etwa wenn es darum geht das System zu initialisieren:</p> <pre> $this-&gt;model-&gt;broadcast( ''sysInit'' );</pre> <p>Hierbei kann jedes Modul eine Actionklasse enthalten (muss nicht) die z.B. pr&uuml;ft ob das Modul installiert oder ein Upgrade f&auml;llig ist und dann diesen auch automatisch durchf&uuml;hrt.<br /> </p> <p>Der ganze Mechanismus wie Actionklassen ausgef&uuml;hrt werden zeichnet Smart3 gegen&uuml;ber anderen Frameworks aus. Er ist un&uuml;blich, weil hier nicht auf eine konventionelle API aufgebaut wird, aber daf&uuml;r sehr flexibel und Speichersparend ist. Es wird tats&auml;chlich nur das eingebunden was auch benutzt wird. </p> <h4 class="western">Der Controller<br />  </h4> <p>Der Controller sorgt daf&uuml;r, dass alles seinen geregelten Weg geht. Smart3 wird mit 2 unterschiedlichen (Front-)Controllern ausgeliefert. </p> <ol> <li> <p>index.php nimmt alles entgegen was mit dem &ouml;ffentlichen Webprojekt zu tun hat. Also der Teil der f&uuml;r Webseitenbesucher zug&auml;nglich ist. Die einzige Variable die dieser Controller direkt verarbeiten kann ist: view=yyy. Zuerst richtet der Controlller eine Anfrage an die Modul, also das Model, ob dieses eine View f&uuml;r die &ouml;ffentliche Anfrage bereit h&auml;lt. Z.B. Das Navigationsmodul was mitgeliefert wird erkennt wenn ein Knotenpunkt id_node erfragt wird und teilt dem Controller automatisch mit, welche view dazu passt. Erh&auml;lt der Controller auf diese Weise keine View so muss sie in der &ouml;ffentlichen Anfrage (Request) formuliert sein. Also z.B. index.php?view=artikel&amp;id_article=23. Danach l&auml;dt der Controller die Viewklasse: D.h. Er erstellt eine Instanz der Viewklasse und f&uuml;hrt darin folgende Methoden der Reihe nach aus:</p> <ul> <li>- auth() = Authentifizierung</li> <li>- prependFilterChain() = bevor die eigentliche Hauptmethode der Klasse aufgerufen wird</li> <li>- perform() = Hauptmethode. z.B. Erstellen der Daten f&uuml;r die Vorlagen</li> <li>- appendFilterChain() = Wird ausgef&uuml;hrt nachdem die Vorlage mit den darin enthaltenen Daten erstellt wurde.</li> </ul> <p> </p> <p>Man sollte sich hier vorerst nur merken in welcher Reihenfolge der Controller die Methoden der Viewklasse ausf&uuml;hrt. Siehe <a href="?id_article=15&amp;view=article">View Klasse</a>  f&uuml;r weitere Details.<br />  </p> </li> <li> <p>Der Controller admin.php wird aufgerufen wenn es um die Administration des Projektes geht und ist nur registrierten Usern zug&auml;nglich. Da jedes Modul seine eigenen Views bzw Vorlagen mitbringt wird in einer Anfrage die &uuml;ber diesen Controller gestellt wird meistens u.a. das Modul angegeben, also mod=xxx und die view dieses Modules, view=aaa. </p> </li> </ol> <p>Wer sich vornehmlich mit der Erstellung von Webseiten aufgrund mit den mit Smart3 ausgelieferten Modulen besch&auml;ftigen m&ouml;chte kommt eigentlich nur mit den Projekt-Viewklassen und den entsprechenden Vorlagen in Ber&uuml;hrung. Also den Dateien in:</p> <p><strong>/views_xxx</strong></p> <p><strong>/templates_xxx</strong></p> <p>Wird nur die index.php aufgerufen, ohne Parameter, so l&auml;dt der Controller die Defaultview. Das ist dann die &ldquo;index&rdquo; View. <strong>ViewIndex.php</strong>. Die Vorlage ist dann, <strong>tpl.index.php</strong>.</p> <p>Zu erw&auml;hnen bleibt noch, dass in den Vorlagen (Templates) <a href="http://www.php.net" target="_blank" title="PHP NET">php</a> zum Einsatz kommt. Es ist auch m&ouml;glich andere Templateengines daf&uuml;r einzusetzen. Mann sollte es sich zum Prinzip machen in den Vorlagen so wenig wie m&ouml;glich prozeduraler Code zu schreiben und diesen Teil in die Viewklassen zu verlegen. Es ist klar, dass man in Templates nicht um php Konstrukte herrumkommt, wie if, elseif, endif, foreach, endforeach, echo, count, do, while, .....</p> <p>Aus Sicherheitsgr&uuml;nden kann man &uuml;ber die Konfiguration nur bestimmte php Konnstrukte erlauben. Siehe dazu das <a href="?id_article=16&amp;view=article" title="Konfiguration">Konfiguration</a> Array.</p> <p>Zu erw&auml;hnen sei noch, dass das Core Framework keine Werkzeuge (Klassen) enth&auml;lt zum Datenbankzugriff oder Sessionhandling. Dieses wird in die Module verlagert. Es ist somit den Moduldesignern &uuml;berlassen f&uuml;r welche Werkzeuge sie sich entscheiden. <br />  </p>', 0, '', '-1954848877');
INSERT INTO `smart_navigation_node` VALUES (42, 6, 2, 2, 2, 1, '2005-09-15 13:18:13', 'en', 'Artikel Modul', '', '<p>Mit diesem Modul kann man Texte im Navigationsbaum verwalten. Jeder Text kann Bilder und Dateien enthalten. Desweiteren besteht ein Text je nach Konfiguration aus:</p> <ul>   <li>Obertitel <br />   </li>   <li>Titel</li>   <li>Untertitel</li>   <li>Textkopf</li>   <li>Kurzbeschreibung</li>   <li>Haupttext</li>   <li>Post Scriptum</li> </ul> <p>Ein Text besteht je nach Konfiguration aus folgenden Attributen:</p> <ul>   <li>Status (publiziert, edition, vorschlag, zur&uuml;ckgesetzt, gel&ouml;scht)</li>   <li>Datum der Onlinever&ouml;ffentlichung</li>   <li>Originaldatum des Artikels</li>   <li>Datum an dem der Status sich &auml;ndern soll</li>   <li>Navigationsknoten in dem der Artikel enthalten ist<br />   </li> </ul>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (43, 22, 1, 2, 2, 1, '2005-09-15 13:18:13', 'en', 'Article Module', '', '<p>With this module you can manage Articles in the navigation nodes tree. Each article can provide pictures and attached files. Depended on the module configuration, an article consits of the following fields:</p>   <ul> <li>Overtitle <br />   </li><li>Title</li><li>Subtitle</li><li>Header<br /> </li><li>Description<br /> </li><li>Main text<br /> </li><li>Post Scriptum.</li> </ul>   <p>Depended on the module configuration an article has the following attributes:</p>   <ul> <li>Status (publish, edit, propose, cancel, delete)</li><li>Date of the online publishing<br /> </li><li>Original date of the article<br /> </li><li>Date on which the status will change</li><li>Navigation node of the article<br /> </li> </ul>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (6, 2, 2, 2, 2, 0, '2005-09-15 14:14:30', 'en', 'Die Smart3 Module', '', '<p>Smart3 wird mit einer Reihe von Modulen ausgeliefert. Hier geht es vor allem um eine Beschreibung dieser Module und ihrer Actionklassen die der Viewprogrammierer ben&ouml;tigt um Daten zu beziehen bzw Daten zu manipulieren.</p><p>Desweiteren enth&auml;lt jedes Modul seine eigenen View Klassen sowie die entsprechenden Templates f&uuml;r das Administrationsinterface.</p> <h5>Actions mit speziellen Bededeutungen. </h5> <p>W&auml;rend der Initialisationsphase sendet der Smart3 Kern verteilte Actionaufrufe an alle Module. Falls ein Modul eine entsprechende Empf&auml;nger-ActionKlasse hat kann diese darauf reagieren. Die Actions sind:</p> <ul>   <li><strong>init</strong> -  Die Empf&auml;ngerklasse muss also das folgende Format haben:<br /> Dateiname = Action[Modulname]Init.php  <br /> KlassenName = ActionModulenameInit<br /> hier k&ouml;nnen dann modulspezifische Prozesse bevor dem eigentlichen Normalbetrieb ausgef&uuml;hrt werden. Beispiel: Modul Upgrade Test.</li>   <li><strong>setup</strong> - Die Empf&auml;ngerklasse muss folgendes Format haben:<br /> Dateiname = Action[Modulname]Setup.php<br /> KlassenName = ActionModulenameSetup<br /> Ist kein allgemeines Setup vollzogen worden wird dieser Actionaufruf gesendet. Das Empf&auml;ngermodul muss dann den ensprechenden Setupprozess durchf&uuml;hren.<br />   </li> </ul> <h5>Module mit speziellen Bedeutungen</h5> <p>Wenn Smart3 startet sendet es den oben genannten ActionAufruf <strong>init</strong> an alle Module. </p> <pre>$model-&gt;broadcast( ''init'' ); </pre> <p>Das erste Modul das solche eine Action empf&auml;ngt ist das <strong>common</strong> Modul. Die Aufgabe dieses Moduls ist es Prozesse auszuf&uuml;hren die n&ouml;tig sind damit alle Module korrekt funktionieren k&ouml;nnen. Das w&auml;re z.B. Eine Instanz der Datenbankklasse zu erstellen und eine Verbindung mit dem Datenbankserver herzustellen. Sowie eine Instanz der Sessionklasse zu erstellen und eine Session zu starten. Desweiteren stellt dieses Modul einige Actionklassen zur Verf&uuml;gung die von allen Modulen falls n&ouml;tig benutzt werden k&ouml;nnen. Dieses Modul hat keine Administrationsoberfl&auml;che. Hier werden nur grundlegende Prozesse ausgef&uuml;hrt.<br /> </p><p>Falls die Smart3 Installation noch nicht durchegf&uuml;hrt wurde, l&auml;dt der Controller das <strong>setup</strong> Modul. Es erscheint eine Seite mit einem Installationsformular. Wird das Formular abgeschickt sendet dieses Modul einen verteilten ActionAufruf <strong>setup</strong> an alle Module.</p> <pre>$model-&gt;broadcast( ''setup'', array setupdata[] ); <br /></pre> <p>F&uuml;r diejenigen die die Module u.a. durch Actionklassen erweitern wollen ist folgendes zu beachten. Wie in der Beschreibung der Actionklassen angegeben wird jeder Actionklasse eine Instanz des Modelklasse &uuml;bergeben. Die Modelinstanz enth&auml;lt eine Object <strong>$dba</strong> &uuml;ber die man Verbindung zum Datenbankserver hat. Beispiel von innerhalb einer Actionklasse:<br /> </p> <pre>$this-&gt;model-&gt;dba-&gt;query($sql); </pre> <p>Zum Benutzen der Datenbankschnittstelle siehe: modules/common/includes/SmartMySqli.php</p><p>Eine genauere Beischreibung folgt.... </p>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (8, 0, 8, 3, 2, 7, '2005-09-28 12:12:10', 'en', 'Sitemap', '', '', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (12, 6, 2, 2, 2, 2, '2005-09-15 13:18:13', 'en', 'Misc Modul', '', '<p>Der Begriff Misc ist etwas umst&auml;ndlich formuliert. Hier werden Texte verwaltet die unabh&auml;ngig vom Navigationsmodul eingesetzt werden k&ouml;nnen. Als Beispiel zu nennen w&auml;re: Text der auf der Eingansseite einer Webseite erscheinen soll. Die Eingangsseite liegt n&auml;hmlich in keinem Navigationsknoten. Anderes Beispiel w&auml;re Text der in der Fusszeile einer jeden Webseite erscheinen soll.</p><p>Es sollte klar sein, dass dieses Modul nicht dazu geeignet und gedacht ist&nbsp;hunderte von Texten zu verwalten. </p><p>Ein Text besteht aus folgende Elementen:</p><ul><li><strong>Titel </strong><br /></li><li><strong>Kurzbeschreibung</strong> (optional)</li><li><strong>Textk&ouml;rper</strong> (optional)</li><li><strong>Bilder</strong> (optional)</li><li><strong>Dateien</strong> (optional)</li></ul><p>Desweiteren kann man ein&nbsp;Text auf</p><ul><li><strong>aktiv|inactive</strong> schalten. D.h. erscheint dieser&nbsp;Text auf der Webseite oder nicht.</li></ul>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (9, 6, 2, 2, 2, 0, '2005-09-15 13:18:13', 'en', 'Navigations Modul', '', '<p>Das Wichtigste einer Webseite sind die Links die die unterschiedlichen Webseiten eines Projektes untereinander verbinden. Diese Links k&ouml;nnen auch Navigationsknoten (Nodes) genannt werden. Knoten werden dabei hierarchisch in einer Baum&auml;hnlichen Struktur geordnet. </p><p>Beispiel einer Baumstruktur:</p><pre>Wissenschaft<br />  --- Physik<br />  ------ Astronomie<br />  ------ Quantenphysik<br />  ------ Festk&ouml;rperphysik <br />  </pre><p>Dieses Modul enth&auml;lt eine Administrationsoberfl&auml;che durch die man Navigationsknoten erstellen,ver&auml;ndern, verschieben oder kurz gesagt verwalten kann. Ebenso stellt dieses Modul eine Reihe von Actionklassen zur Verf&uuml;gung durch die man auf diese Knoten zugreifen bzw diese ver&auml;ndern kann. </p><p>Jeder Knoten besteht dabei aus einem:</p><ul><li><strong>Titel </strong><br /></li><li><strong>Kurzbeschreibung</strong> (otional)</li><li><strong>Textk&ouml;rper</strong> (optional)</li><li><strong>Logo</strong> (optional)</li><li><strong>Bilder</strong> (optional)</li><li><strong>Dateien</strong> (optional)</li></ul><p>Desweiteren kann man ein Knoten auf</p><ul><li><strong>aktiv|inactive</strong> schalten. D.h. erscheint dieser Knoten auf der Webseite oder nicht.</li><li><strong>Elternknoten</strong> um&auml;ndern</li><li><strong>View</strong> bestimmen die mit diesem Knoten verbunden ist. (optional)<br /></li></ul><p>Den Textk&ouml;rper kann man mit dem Editor formatieren wie das etwa mit Word gemacht wird. Ebenso kann man Bilder und Dateien in den Textk&ouml;rper einf&uuml;gen.</p><h4>Knoten &gt; View</h4><p>Editiert man einen Naviagtionsknoten so kann man unterhalb des Haupttextes die View einstellen die mit diesem Knoten verbunden ist. D.h. Wenn auf der Webseite eine Anfrage in der Art: index.php?id_node=5 gestellt wird, so fragt der Controller das Navigationsmodul ob mit dem Knoten mit ID 5 eine View verkn&uuml;pft ist. Wenn ja l&auml;dt der Controller die verkn&uuml;pfte Viewklasse. </p><p>Um jetzt beim Editieren des Knotens eine View ausw&auml;hlen zu k&ouml;nnen muss diese erst einmal registriert werden, damit sie &uuml;berhaupt im Auswahlmenu erscheint. Denn nicht jede View ist dazu programmiert worden um einen Knotenpunkt darzustellen. darum muss erst im NavigationsManagementModul im Untermenu &quot;<strong>register node related views</strong>&quot; die Views registriert werden die man mit Navigationsknoten verkn&uuml;pfen kann. In diesem Untermenu erscheinen auf der linken Seite alle Views die sich im <strong>/views_xxx</strong> Ordner befinden. Auf der rechten Seite jene die mit Naviagtionknoten verkn&uuml;pft werden k&ouml;nnen.</p>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (11, 6, 2, 2, 2, 3, '2005-09-15 13:18:13', 'en', 'User Modul', '', '<p>Wie der Name schon sagt werden in diesem Modul Benutzer verwaltet. Es&nbsp;gibt&nbsp;6 verschiedene Arten von Benutzerkonten.</p><ul><li><div><strong>Superuser</strong>&nbsp;- Wird beim Setup angelegt. Es kann nur ein User in dieser Kategorie geben. Dieser hat Zugriff auf alle Einstellungen.</div></li><li><div><strong>Administrator</strong> - User in dieser Kategorie haben Zugriff auf fast alle Einstellungen.</div></li><li><div><strong>Editor</strong> - Haben eingeschr&auml;ngte Verwaltungsm&ouml;glichkeiten</div></li><li><div><strong>Author</strong> -&nbsp;Haben im Prinzip nur Zugriff auf Inhalt der von ihnen selbst&nbsp;erstellt wurde.</div></li><li><div><strong>Contributor</strong> - K&ouml;nnen nur Inhalt vorschlagen.</div></li><li><div><strong>Webuser</strong> - Haben kein Zugang zur Administrationsoberfl&auml;che. Falls Inhalt welcher Art auch immer den Status ''restricted'' hat, so bedeutet dieses, dass auf der &ouml;ffentlichen Webseite nur registrierte Webuser Zugang zu diesem Inhalt haben.</div></li></ul><p>Es ist jeden Modul &uuml;berlassen was User&nbsp;aus den verschiedenen Benutzerkonten d&uuml;rfen und was nicht.</p>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (14, 0, 14, 1, 2, 4, '2005-09-28 19:09:27', 'en', 'People', '', '<div class="text"> <h5>Armand Turpel</h5> <p class="smart">Creator of SMART3<br /> </p>      <ul><li>Certified in electronics</li><li>Experience in computer language programming (C, Basic, Java, PHP since 2000).</li><li>Experience in Web project development</li><li>Many years experience in artistic image creation.</li><li>Some years experience in the educational sector</li></ul> <p>This framework is the result of my 5 years php projects development experience. I havent yet breaked any lotto jackpot. So money is still a central point of my life. If you think that Smart3 does a good job for your own projects you can honor the huge effort behind by sending to me some money through:</p>   <ul> <li><a href="https://www.moneybookers.com/app/?rid=394381" target="_blank" title="Moneybookers">Moneybookers</a></li> </ul> </div>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (35, 0, 35, 1, 2, 5, '2005-09-28 12:12:18', 'en', 'Support', '', '<p class="smart">For questions, suggestions and critics you should use the Project forum (english, german or french):<br /> <a href="https://developer.berlios.de/forum/?group_id=1850" target="_blank" title="Smart3 Forum">http://developer.berlios.de/forum</a></p>   <p class="smart">If you need professional support, mailto:</p>   <p class="smart">Project leader: Armand Turpel<br /> <a href="mailto:framework@smart3.org?subject=SMART3" title="Email of the project leader">framework@smart3.org</a></p> <p class="smart"> <br /> </p>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (15, 0, 15, 1, 2, 3, '2005-09-28 12:12:22', 'en', 'License', '', '<div class="text"><p class="smart">The Smart3 Framework without modules is released under the following License:&nbsp;</p><p class="smart">GNU LESSER GENERAL PUBLIC LICENSE<br /> Version 2.1, February 1999</p>  <p class="smart">Copyright (C) 1991, 1999 Free Software Foundation, Inc.<br /> 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA<br /> Everyone is permitted to copy and distribute verbatim copies<br /> of this license document, but changing it is not allowed.</p>  <p class="smart">[This is the first released version of the Lesser GPL.  It also counts<br /> as the successor of the GNU Library Public License, version 2, hence<br /> the version number 2.1.]</p>  <p class="smart">Preamble</p>  <p class="smart">The licenses for most software are designed to take away your<br /> freedom to share and change it.  By contrast, the GNU General Public<br /> Licenses are intended to guarantee your freedom to share and change<br /> free software--to make sure the software is free for all its users.</p>  <p class="smart">This license, the Lesser General Public License, applies to some<br /> specially designated software packages--typically libraries--of the<br /> Free Software Foundation and other authors who decide to use it.  You<br /> can use it too, but we suggest you first think carefully about whether<br /> this license or the ordinary General Public License is the better<br /> strategy to use in any particular case, based on the explanations below.</p>  <p class="smart">When we speak of free software, we are referring to freedom of use,<br /> not price.  Our General Public Licenses are designed to make sure that<br /> you have the freedom to distribute copies of free software (and charge<br /> for this service if you wish); that you receive source code or can get<br /> it if you want it; that you can change the software and use pieces of<br /> it in new free programs; and that you are informed that you can do<br /> these things.</p>  <p class="smart">To protect your rights, we need to make restrictions that forbid<br /> distributors to deny you these rights or to ask you to surrender these<br /> rights.  These restrictions translate to certain responsibilities for<br /> you if you distribute copies of the library or if you modify it.</p>  <p class="smart">For example, if you distribute copies of the library, whether gratis<br /> or for a fee, you must give the recipients all the rights that we gave<br /> you.  You must make sure that they, too, receive or can get the source<br /> code.  If you link other code with the library, you must provide<br /> complete object files to the recipients, so that they can relink them<br /> with the library after making changes to the library and recompiling<br /> it.  And you must show them these terms so they know their rights.</p>  <p class="smart">We protect your rights with a two-step method: (1) we copyright the<br /> library, and (2) we offer you this license, which gives you legal<br /> permission to copy, distribute and/or modify the library.</p>  <p class="smart">To protect each distributor, we want to make it very clear that<br /> there is no warranty for the free library.  Also, if the library is<br /> modified by someone else and passed on, the recipients should know<br /> that what they have is not the original version, so that the original<br /> author''s reputation will not be affected by problems that might be<br /> introduced by others.</p>  <p class="smart">Finally, software patents pose a constant threat to the existence of<br /> any free program.  We wish to make sure that a company cannot<br /> effectively restrict the users of a free program by obtaining a<br /> restrictive license from a patent holder.  Therefore, we insist that<br /> any patent license obtained for a version of the library must be<br /> consistent with the full freedom of use specified in this license.</p>  <p class="smart">Most GNU software, including some libraries, is covered by the<br /> ordinary GNU General Public License.  This license, the GNU Lesser<br /> General Public License, applies to certain designated libraries, and<br /> is quite different from the ordinary General Public License.  We use<br /> this license for certain libraries in order to permit linking those<br /> libraries into non-free programs.</p>  <p class="smart">When a program is linked with a library, whether statically or using<br /> a shared library, the combination of the two is legally speaking a<br /> combined work, a derivative of the original library.  The ordinary<br /> General Public License therefore permits such linking only if the<br /> entire combination fits its criteria of freedom.  The Lesser General<br /> Public License permits more lax criteria for linking other code with<br /> the library.</p>  <p class="smart">We call this license the &quot;Lesser&quot; General Public License because it<br /> does Less to protect the user''s freedom than the ordinary General<br /> Public License.  It also provides other free software developers Less<br /> of an advantage over competing non-free programs.  These disadvantages<br /> are the reason we use the ordinary General Public License for many<br /> libraries.  However, the Lesser license provides advantages in certain<br /> special circumstances.</p>  <p class="smart">For example, on rare occasions, there may be a special need to<br /> encourage the widest possible use of a certain library, so that it becomes<br /> a de-facto standard.  To achieve this, non-free programs must be<br /> allowed to use the library.  A more frequent case is that a free<br /> library does the same job as widely used non-free libraries.  In this<br /> case, there is little to gain by limiting the free library to free<br /> software only, so we use the Lesser General Public License.</p>  <p class="smart">In other cases, permission to use a particular library in non-free<br /> programs enables a greater number of people to use a large body of<br /> free software.  For example, permission to use the GNU C Library in<br /> non-free programs enables many more people to use the whole GNU<br /> operating system, as well as its variant, the GNU/Linux operating<br /> system.</p>  <p class="smart">Although the Lesser General Public License is Less protective of the<br /> users'' freedom, it does ensure that the user of a program that is<br /> linked with the Library has the freedom and the wherewithal to run<br /> that program using a modified version of the Library.</p>  <p class="smart">The precise terms and conditions for copying, distribution and<br /> modification follow.  Pay close attention to the difference between a<br /> &quot;work based on the library&quot; and a &quot;work that uses the library&quot;.  The<br /> former contains code derived from the library, whereas the latter must<br /> be combined with the library in order to run.</p>  <p class="smart">GNU LESSER GENERAL PUBLIC LICENSE<br /> TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</p>  <p class="smart">0. This License Agreement applies to any software library or other<br /> program which contains a notice placed by the copyright holder or<br /> other authorized party saying it may be distributed under the terms of<br /> this Lesser General Public License (also called &quot;this License&quot;).<br /> Each licensee is addressed as &quot;you&quot;.</p>  <p class="smart">A &quot;library&quot; means a collection of software functions and/or data<br /> prepared so as to be conveniently linked with application programs<br /> (which use some of those functions and data) to form executables.</p>  <p class="smart">The &quot;Library&quot;, below, refers to any such software library or work<br /> which has been distributed under these terms.  A &quot;work based on the<br /> Library&quot; means either the Library or any derivative work under<br /> copyright law: that is to say, a work containing the Library or a<br /> portion of it, either verbatim or with modifications and/or translated<br /> straightforwardly into another language.  (Hereinafter, translation is<br /> included without limitation in the term &quot;modification&quot;.)</p>  <p class="smart">&quot;Source code&quot; for a work means the preferred form of the work for<br /> making modifications to it.  For a library, complete source code means<br /> all the source code for all modules it contains, plus any associated<br /> interface definition files, plus the scripts used to control compilation<br /> and installation of the library.</p>  <p class="smart">Activities other than copying, distribution and modification are not<br /> covered by this License; they are outside its scope.  The act of<br /> running a program using the Library is not restricted, and output from<br /> such a program is covered only if its contents constitute a work based<br /> on the Library (independent of the use of the Library in a tool for<br /> writing it).  Whether that is true depends on what the Library does<br /> and what the program that uses the Library does.<br />   <br /> 1. You may copy and distribute verbatim copies of the Library''s<br /> complete source code as you receive it, in any medium, provided that<br /> you conspicuously and appropriately publish on each copy an<br /> appropriate copyright notice and disclaimer of warranty; keep intact<br /> all the notices that refer to this License and to the absence of any<br /> warranty; and distribute a copy of this License along with the<br /> Library.</p>  <p class="smart">You may charge a fee for the physical act of transferring a copy,<br /> and you may at your option offer warranty protection in exchange for a<br /> fee.</p>  <p class="smart">2. You may modify your copy or copies of the Library or any portion<br /> of it, thus forming a work based on the Library, and copy and<br /> distribute such modifications or work under the terms of Section 1<br /> above, provided that you also meet all of these conditions:</p>  <p class="smart">a) The modified work must itself be a software library.</p>  <p class="smart">b) You must cause the files modified to carry prominent notices<br /> stating that you changed the files and the date of any change.</p>  <p class="smart">c) You must cause the whole of the work to be licensed at no<br /> charge to all third parties under the terms of this License.</p>  <p class="smart">d) If a facility in the modified Library refers to a function or a<br />     table of data to be supplied by an application program that uses<br />     the facility, other than as an argument passed when the facility<br />     is invoked, then you must make a good faith effort to ensure that,<br />     in the event an application does not supply such function or<br />     table, the facility still operates, and performs whatever part of<br />     its purpose remains meaningful.</p>  <p class="smart">(For example, a function in a library to compute square roots has<br />     a purpose that is entirely well-defined independent of the<br />     application.  Therefore, Subsection 2d requires that any<br />     application-supplied function or table used by this function must<br />     be optional: if the application does not supply it, the square<br />     root function must still compute square roots.)</p>  <p class="smart">These requirements apply to the modified work as a whole.  If<br /> identifiable sections of that work are not derived from the Library,<br /> and can be reasonably considered independent and separate works in<br /> themselves, then this License, and its terms, do not apply to those<br /> sections when you distribute them as separate works.  But when you<br /> distribute the same sections as part of a whole which is a work based<br /> on the Library, the distribution of the whole must be on the terms of<br /> this License, whose permissions for other licensees extend to the<br /> entire whole, and thus to each and every part regardless of who wrote<br /> it.</p>  <p class="smart">Thus, it is not the intent of this section to claim rights or contest<br /> your rights to work written entirely by you; rather, the intent is to<br /> exercise the right to control the distribution of derivative or<br /> collective works based on the Library.</p>  <p class="smart">In addition, mere aggregation of another work not based on the Library<br /> with the Library (or with a work based on the Library) on a volume of<br /> a storage or distribution medium does not bring the other work under<br /> the scope of this License.</p>  <p class="smart">3. You may opt to apply the terms of the ordinary GNU General Public<br /> License instead of this License to a given copy of the Library.  To do<br /> this, you must alter all the notices that refer to this License, so<br /> that they refer to the ordinary GNU General Public License, version 2,<br /> instead of to this License.  (If a newer version than version 2 of the<br /> ordinary GNU General Public License has appeared, then you can specify<br /> that version instead if you wish.)  Do not make any other change in<br /> these notices.</p>  <p class="smart">Once this change is made in a given copy, it is irreversible for<br /> that copy, so the ordinary GNU General Public License applies to all<br /> subsequent copies and derivative works made from that copy.</p>  <p class="smart">This option is useful when you wish to copy part of the code of<br /> the Library into a program that is not a library.</p>  <p class="smart">4. You may copy and distribute the Library (or a portion or<br /> derivative of it, under Section 2) in object code or executable form<br /> under the terms of Sections 1 and 2 above provided that you accompany<br /> it with the complete corresponding machine-readable source code, which<br /> must be distributed under the terms of Sections 1 and 2 above on a<br /> medium customarily used for software interchange.</p>  <p class="smart">If distribution of object code is made by offering access to copy<br /> from a designated place, then offering equivalent access to copy the<br /> source code from the same place satisfies the requirement to<br /> distribute the source code, even though third parties are not<br /> compelled to copy the source along with the object code.</p>  <p class="smart">5. A program that contains no derivative of any portion of the<br /> Library, but is designed to work with the Library by being compiled or<br /> linked with it, is called a &quot;work that uses the Library&quot;.  Such a<br /> work, in isolation, is not a derivative work of the Library, and<br /> therefore falls outside the scope of this License.</p>  <p class="smart">However, linking a &quot;work that uses the Library&quot; with the Library<br /> creates an executable that is a derivative of the Library (because it<br /> contains portions of the Library), rather than a &quot;work that uses the<br /> library&quot;.  The executable is therefore covered by this License.<br /> Section 6 states terms for distribution of such executables.</p>  <p class="smart">When a &quot;work that uses the Library&quot; uses material from a header file<br /> that is part of the Library, the object code for the work may be a<br /> derivative work of the Library even though the source code is not.<br /> Whether this is true is especially significant if the work can be<br /> linked without the Library, or if the work is itself a library.  The<br /> threshold for this to be true is not precisely defined by law.</p>  <p class="smart">If such an object file uses only numerical parameters, data<br /> structure layouts and accessors, and small macros and small inline<br /> functions (ten lines or less in length), then the use of the object<br /> file is unrestricted, regardless of whether it is legally a derivative<br /> work.  (Executables containing this object code plus portions of the<br /> Library will still fall under Section 6.)</p>  <p class="smart">Otherwise, if the work is a derivative of the Library, you may<br /> distribute the object code for the work under the terms of Section 6.<br /> Any executables containing that work also fall under Section 6,<br /> whether or not they are linked directly with the Library itself.</p>  <p class="smart">6. As an exception to the Sections above, you may also combine or<br /> link a &quot;work that uses the Library&quot; with the Library to produce a<br /> work containing portions of the Library, and distribute that work<br /> under terms of your choice, provided that the terms permit<br /> modification of the work for the customer''s own use and reverse<br /> engineering for debugging such modifications.</p>  <p class="smart">You must give prominent notice with each copy of the work that the<br /> Library is used in it and that the Library and its use are covered by<br /> this License.  You must supply a copy of this License.  If the work<br /> during execution displays copyright notices, you must include the<br /> copyright notice for the Library among them, as well as a reference<br /> directing the user to the copy of this License.  Also, you must do one<br /> of these things:</p>  <p class="smart">a) Accompany the work with the complete corresponding<br />     machine-readable source code for the Library including whatever<br />     changes were used in the work (which must be distributed under<br />     Sections 1 and 2 above); and, if the work is an executable linked<br />     with the Library, with the complete machine-readable &quot;work that<br />     uses the Library&quot;, as object code and/or source code, so that the<br />     user can modify the Library and then relink to produce a modified<br />     executable containing the modified Library.  (It is understood<br />     that the user who changes the contents of definitions files in the<br />     Library will not necessarily be able to recompile the application<br />     to use the modified definitions.)</p>  <p class="smart">b) Use a suitable shared library mechanism for linking with the<br />     Library.  A suitable mechanism is one that (1) uses at run time a<br />     copy of the library already present on the user''s computer system,<br />     rather than copying library functions into the executable, and (2)<br />     will operate properly with a modified version of the library, if<br />     the user installs one, as long as the modified version is<br />     interface-compatible with the version that the work was made with.</p>  <p class="smart">c) Accompany the work with a written offer, valid for at<br />     least three years, to give the same user the materials<br />     specified in Subsection 6a, above, for a charge no more<br />     than the cost of performing this distribution.</p>  <p class="smart">d) If distribution of the work is made by offering access to copy<br />     from a designated place, offer equivalent access to copy the above<br />     specified materials from the same place.</p>  <p class="smart">e) Verify that the user has already received a copy of these<br />     materials or that you have already sent this user a copy.</p>  <p class="smart">For an executable, the required form of the &quot;work that uses the<br /> Library&quot; must include any data and utility programs needed for<br /> reproducing the executable from it.  However, as a special exception,<br /> the materials to be distributed need not include anything that is<br /> normally distributed (in either source or binary form) with the major<br /> components (compiler, kernel, and so on) of the operating system on<br /> which the executable runs, unless that component itself accompanies<br /> the executable.</p>  <p class="smart">It may happen that this requirement contradicts the license<br /> restrictions of other proprietary libraries that do not normally<br /> accompany the operating system.  Such a contradiction means you cannot<br /> use both them and the Library together in an executable that you<br /> distribute.</p>  <p class="smart">7. You may place library facilities that are a work based on the<br /> Library side-by-side in a single library together with other library<br /> facilities not covered by this License, and distribute such a combined<br /> library, provided that the separate distribution of the work based on<br /> the Library and of the other library facilities is otherwise<br /> permitted, and provided that you do these two things:</p>  <p class="smart">a) Accompany the combined library with a copy of the same work<br />     based on the Library, uncombined with any other library<br />     facilities.  This must be distributed under the terms of the<br />     Sections above.</p>  <p class="smart">b) Give prominent notice with the combined library of the fact<br />     that part of it is a work based on the Library, and explaining<br />     where to find the accompanying uncombined form of the same work.</p>  <p class="smart">8. You may not copy, modify, sublicense, link with, or distribute<br /> the Library except as expressly provided under this License.  Any<br /> attempt otherwise to copy, modify, sublicense, link with, or<br /> distribute the Library is void, and will automatically terminate your<br /> rights under this License.  However, parties who have received copies,<br /> or rights, from you under this License will not have their licenses<br /> terminated so long as such parties remain in full compliance.</p>  <p class="smart">9. You are not required to accept this License, since you have not<br /> signed it.  However, nothing else grants you permission to modify or<br /> distribute the Library or its derivative works.  These actions are<br /> prohibited by law if you do not accept this License.  Therefore, by<br /> modifying or distributing the Library (or any work based on the<br /> Library), you indicate your acceptance of this License to do so, and<br /> all its terms and conditions for copying, distributing or modifying<br /> the Library or works based on it.</p>  <p class="smart">10. Each time you redistribute the Library (or any work based on the<br /> Library), the recipient automatically receives a license from the<br /> original licensor to copy, distribute, link with or modify the Library<br /> subject to these terms and conditions.  You may not impose any further<br /> restrictions on the recipients'' exercise of the rights granted herein.<br /> You are not responsible for enforcing compliance by third parties with<br /> this License.</p>  <p class="smart">11. If, as a consequence of a court judgment or allegation of patent<br /> infringement or for any other reason (not limited to patent issues),<br /> conditions are imposed on you (whether by court order, agreement or<br /> otherwise) that contradict the conditions of this License, they do not<br /> excuse you from the conditions of this License.  If you cannot<br /> distribute so as to satisfy simultaneously your obligations under this<br /> License and any other pertinent obligations, then as a consequence you<br /> may not distribute the Library at all.  For example, if a patent<br /> license would not permit royalty-free redistribution of the Library by<br /> all those who receive copies directly or indirectly through you, then<br /> the only way you could satisfy both it and this License would be to<br /> refrain entirely from distribution of the Library.</p>  <p class="smart">If any portion of this section is held invalid or unenforceable under any<br /> particular circumstance, the balance of the section is intended to apply,<br /> and the section as a whole is intended to apply in other circumstances.</p>  <p class="smart">It is not the purpose of this section to induce you to infringe any<br /> patents or other property right claims or to contest validity of any<br /> such claims; this section has the sole purpose of protecting the<br /> integrity of the free software distribution system which is<br /> implemented by public license practices.  Many people have made<br /> generous contributions to the wide range of software distributed<br /> through that system in reliance on consistent application of that<br /> system; it is up to the author/donor to decide if he or she is willing<br /> to distribute software through any other system and a licensee cannot<br /> impose that choice.</p>  <p class="smart">This section is intended to make thoroughly clear what is believed to<br /> be a consequence of the rest of this License.</p>  <p class="smart">12. If the distribution and/or use of the Library is restricted in<br /> certain countries either by patents or by copyrighted interfaces, the<br /> original copyright holder who places the Library under this License may add<br /> an explicit geographical distribution limitation excluding those countries,<br /> so that distribution is permitted only in or among countries not thus<br /> excluded.  In such case, this License incorporates the limitation as if<br /> written in the body of this License.</p>  <p class="smart">13. The Free Software Foundation may publish revised and/or new<br /> versions of the Lesser General Public License from time to time.<br /> Such new versions will be similar in spirit to the present version,<br /> but may differ in detail to address new problems or concerns.</p>  <p class="smart">Each version is given a distinguishing version number.  If the Library<br /> specifies a version number of this License which applies to it and<br /> &quot;any later version&quot;, you have the option of following the terms and<br /> conditions either of that version or of any later version published by<br /> the Free Software Foundation.  If the Library does not specify a<br /> license version number, you may choose any version ever published by<br /> the Free Software Foundation.</p>  <p class="smart">14. If you wish to incorporate parts of the Library into other free<br /> programs whose distribution conditions are incompatible with these,<br /> write to the author to ask for permission.  For software which is<br /> copyrighted by the Free Software Foundation, write to the Free<br /> Software Foundation; we sometimes make exceptions for this.  Our<br /> decision will be guided by the two goals of preserving the free status<br /> of all derivatives of our free software and of promoting the sharing<br /> and reuse of software generally.</p>  <p class="smart">NO WARRANTY</p>  <p class="smart">15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO<br /> WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.<br /> EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR<br /> OTHER PARTIES PROVIDE THE LIBRARY &quot;AS IS&quot; WITHOUT WARRANTY OF ANY<br /> KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE<br /> IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br /> PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE<br /> LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME<br /> THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>  <p class="smart">16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN<br /> WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY<br /> AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU<br /> FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR<br /> CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE<br /> LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING<br /> RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A<br /> FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF<br /> SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH<br /> DAMAGES.</p>  <p class="smart">END OF TERMS AND CONDITIONS</p>  <p class="smart">How to Apply These Terms to Your New Libraries</p>  <p class="smart">If you develop a new library, and you want it to be of the greatest<br /> possible use to the public, we recommend making it free software that<br /> everyone can redistribute and change.  You can do so by permitting<br /> redistribution under these terms (or, alternatively, under the terms of the<br /> ordinary General Public License).</p>  <p class="smart">To apply these terms, attach the following notices to the library.  It is<br /> safest to attach them to the start of each source file to most effectively<br /> convey the exclusion of warranty; and each file should have at least the<br /> &quot;copyright&quot; line and a pointer to where the full notice is found.</p>  <p class="smart">&lt;one line to give the library''s name and a brief idea of what it does.&gt;<br />     Copyright (C) &lt;year&gt;  &lt;name of author&gt;</p>  <p class="smart">This library is free software; you can redistribute it and/or<br />     modify it under the terms of the GNU Lesser General Public<br />     License as published by the Free Software Foundation; either<br />     version 2.1 of the License, or (at your option) any later version.</p>  <p class="smart">This library is distributed in the hope that it will be useful,<br />     but WITHOUT ANY WARRANTY; without even the implied warranty of<br />     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU<br />     Lesser General Public License for more details.</p>  <p class="smart">You should have received a copy of the GNU Lesser General Public<br />     License along with this library; if not, write to the Free Software<br />     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</p>  <p class="smart">Also add information on how to contact you by electronic and paper mail.</p>  <p class="smart">You should also get your employer (if you work as a programmer) or your<br /> school, if any, to sign a &quot;copyright disclaimer&quot; for the library, if<br /> necessary.  Here is a sample; alter the names:</p>  <p class="smart">Yoyodyne, Inc., hereby disclaims all copyright interest in the<br />   library `Frob'' (a library for tweaking knobs) written by James Random Hacker.</p>  <p class="smart">&lt;signature of Ty Coon&gt;, 1 April 1990<br />   Ty Coon, President of Vice</p>  <p class="smart">That''s all there is to it!</p>  </div> ', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (18, 0, 18, 1, 2, 2, '2005-09-28 12:12:24', 'en', 'Download', '', '<p>You can download the current version at Berlios where you also will find the Smart3 Subversion repository.</p><p><a href="http://developer.berlios.de/projects/smart/" target="_self" title="Donwload Smart3">Download Smart3<br /> </a></p><p>The core Framework requires php5. The delivered modules require MySql 4.1</p><p>The size of the whole package is about 4mb. But the most space (3mb) is used by Tiny Mice and some Pear packages. The core framework without the modules is about 70kb.<br /> </p><p>Smart3 is developed under the Subversion version control. You can browse the repository <a href="http://svn.berlios.de/viewcvs/smart/smartframe/trunk/" target="_blank" title="Smart3 Subversion repository">here</a>.</p><p>For reporting bugs, suggestions and questions please use the Smart3 <a href="http://developer.berlios.de/forum/?group_id=1850" target="_blank" title="Smart3 Forum">forum</a>. </p>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (20, 1, 1, 2, 2, 1, '2005-09-27 14:12:54', 'en', 'English Doc', '', '<p>Take a look at the following diagram. It show you the SMART3 main design. SMART3, which was partly build on the <a class="smart" href="http://wact.sourceforge.net/index.php/ModelViewController" onclick="window.open(this.href, ''_self''); return false;">Model-View-Controller</a> principle, separate the business from the presentation logic. Or in other words; Data storage, accessing data, data presentation is done in clearly separated sections. Bad application designs mix those sections with no clear plan, which leads into code that is difficult to maintain with growing complexity.</p><p> </p><p> </p><p> </p><p> </p><p> </p><p><img width="589" height="583" border="0" src="data/navigation/-1278757693/smart3.gif" /><br /> </p> <div class="text"><p class="smart"> <br /> The controller takes care for that every thing in Smart3 is going on the right way. </p>  <h4 class="smart">The live cycle of a request:</h4> <p class="smart">A request is mostly related to how data should be represented (the view). Some data can be represented as a simple text page, html page, pdf, download or what ever. <br /> </p>  <p class="smart">Let''s look at the Smart3 processing of requests in more detail:</p>   <ul><li>initialisation of the system. see: /smart/includes/smart_core.php</li><li>Make instance of the requested <strong class="smart">view</strong> class. see: /views_smart</li><li>Execute the authentication method of this view class. Each view can have its own authentication</li><li>Execute the prepend method of this view class. Here you can include filters, such as spam boot filters or what ever you want.</li><li>Execute the perform method of this view class. It can include action calls, which execute modules actions. E.g. read or write data. Example: read data from the model and assign templates variables with this data</li><li>Render the view related template. See: templates_smart</li><li>Execute the append method of this view class. Here you can include filters, which performs on the rendered template.</li><li>Output the result</li></ul><br /> <p class="smart">SMART3 stands on 3 feeds:<br />  </p> <ul> <li>Actions</li><li>Views + Templates<br /> </li><li>Controller<br /> </li> </ul><br /> <h5>Views</h5>    <p class="smart">Here we assemble the demanded data and assign template variables, that the template needs to output. An other (alias) name for a view could be &quot;view helper&quot; or &quot;template helper&quot;. Furthermore, here we can define the template, which is associated with this view. Optionally launching: authentication, prepend filters, append filters. Don''t hit your head on the last items. A view consists of a php class which is executed by the controller. Look at the <a title="The View Class" href="?id_article=4&amp;view=article">views</a> doc for more details on this issue. In mvc, view and template are parts of the same component &quot;view&quot;.<br /> </p>      <h5>Templates</h5>  <p class="smart">The design of a web page is defined in templates. Smart3 use by default php as template language. In templates, php is mainly used to output (echo) the demanded data. You should keep as much as possible procedural code out of templates. The template language is php. But it is also possible to use an other template engine. More details <a title="The Template" href="?id_article=5&amp;view=article">here</a>.<br />  </p><h5>Actions</h5>  <p class="smart">The job of actions can be very different. But in a short cut: Here we accomplish the job request, which is directed to a <a href="?id_node=22" target="_self">module</a><span class="smart"> (the model</span>). This entire low level job can be very complex and difficult. Ex.: accessing data store. Actions are used like black boxes. You only have to know what should go in to receive an expected result.</p>Actions are the (super) glue that holds every thing in the system together. Actions are always directed to module actions classes through an intermediate methode of the model class action().<br /> <p class="smart"><strong>  Example:</strong><br /> In a view, an action (ex.: getChilds) is directed to the module &quot;navigation&quot;; Job to execute: &quot;give me all child nodes with status 2 (published) of the node ID defined in $_GET[''id_node'']&quot;. </p>   <p class="smart">Here the action code (black box input) of this example:<br />  </p> <pre class="smart">        $model-&gt;action( ''navigation'', ''getChilds'', <br />                        array(''result''  =&gt; &amp;$tplVar,<br />                              ''id_node'' =&gt; (int)$_GET[''id_node''],<br />                              ''status''  =&gt; 2));</pre>     <p class="smart">$tplVar is a reference to an array where the action store the demanded result. Further details <a href="?id_article=3&amp;view=article">here</a> .<br /> </p> <h5>Controller </h5> <p>The controller is the first point of the framework which receives the request and depending of its conception delegate further proceedures. Usually you dont care about the controller. Currently there are 2 controllers. One for public requests (index.php) and one for admin requests (admin.php). In a future release a cli (command line interface) controller will be added. </p>  </div> <p> </p>', 0, '', '-1278757693');
INSERT INTO `smart_navigation_node` VALUES (44, 0, 44, 1, 2, 1, '2005-09-28 14:29:52', 'en', 'Features', '', '<ul>   <li>Very simple implementation of the ModelViewController pattern</li>   <li>Each view can have its own authentication mechanism, prepended filters, appened filters and template render engine type.</li><li>Loose coupling between the view and the model (module actions)<br />   </li>    <li>View caching</li>   <li>Different controller types support</li>   <li>Fast</li><li>Moderated memory  consumtion<br /> </li>    <li>Module support</li><li>Plug&amp;Play of entier modules and its action classes</li>   <li>Rapide application development<br />   </li> </ul>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (22, 20, 1, 2, 2, 0, '2005-09-15 13:18:13', 'en', 'The Smart3 Modules', '', '<p>You can find all installed modules in the <strong>/modules</strong> folder. Each module provide a couple of action classes in the /modules/xxx/action folder which represents the model.</p><p>Furthermore each module can be delivered with a couple of views and templates if there are some administration task to accomplish which needs an interface for the interaction with the administrators.</p> <h6>Actions common to all modules </h6> <p>During the setup and init phase, the controller broadcasts action calls to all modules. Each module can optionally provide action classes which reacts on such calls. The file format and class name of those classes are:</p> <p>file name = Action[Modulename]<strong>Init</strong>.php &gt; class name = ActionModulename<strong>Init</strong>  </p> <p>file name = Action[Modulename]<strong>Setup</strong>.php &gt; class name = ActionModulename<strong>Setup</strong> </p>  <h6>Modules with special characteristics</h6> <p>When Smart3 is starting it first sends a broadcast <strong>init</strong> action to all modules. There is one module which receives always the first request in such a broadcast call. Usually it is the <strong>common module</strong>. You can change this module name in the /config/my_config.php file. The job of this module is to include and init all things which are required by the other modules. Example: Making an instance of a database and session class, making DB connection, starting a session, and much more. The common module provide no admin interface. It does some init stuff and provide a couple of general action classes which can be used by other modules.</p><p>When Smart3 is starting it checks if the installation was successfull done. If not the admin controller loads the main view of the <strong>setup module</strong>. You should see an installation page. After submit the form of this page the setup view sends a broadcast action call to all modules.&nbsp; Each modul can execute a setup action process.</p>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (23, 22, 1, 2, 2, 0, '2005-09-15 13:18:13', 'en', 'Navigation Module', '', '<p>The most important technical problem to solve on a web project are the links which connect each webpage to others. We can call such links also <strong>navigation nodes</strong>. The nodes are ordered in an hierachical tree structure.</p><p>Example:</p> <pre>Science<br />  --- Physics<br />  ------ Astronomy<br />  ------ Quantum physics<br />  --- Mathematics<br />  ------ Geometry<br />  ------ Fractals</pre> <p>The navigation modul contains:</p> <ul>   <li>Administration interface to create and modify such nodes</li>   <li>Action classes to get informations about the nodes and to modify them. (the navigation model) <br />   </li> </ul> Each node can have: <ul> <li><strong>Title </strong><br /></li><li><strong>Short text</strong> (optional)</li><li><strong>Main body text</strong> (optional)</li><li><strong>Logo</strong> (optional)</li><li><strong>Pictures</strong> (optional)</li><li><strong>Files</strong> (optional)</li> </ul> <p>Furthermore a node has the following attributes:<br /> </p> <ul> <li><strong>aktiv|inactive</strong> define if a node is visible an a webpage or not.</li><li><strong>Parent node</strong> The parent node<br /> </li><li><strong>View</strong> The public view to which a node is associated. (optional)</li> </ul> <h4>Node &gt; Public View</h4> <p>If you edit a node you can define which public view is associated with this node. This means, when a webpage visitor click on a link (node) which leads to a specific page, the controller asks the navigation model if there is a view associated with the demanded node. If yes, the controller loads the related view class and its template.</p> <p>But before you can assign a public view to a node you have to register the views which can be assigned to navigation nodes. Not every view has a node characteristic. Views can be used for many other jobs than those jobs related to nodes. So you have to go to the admin page&quot; <strong>register node related views</strong>&quot;. On this page you can see on the left side all public views (folder <strong>/views_xxx</strong>) and on the right side all registered views which can be associated with nodes.<br /> </p>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (25, 22, 1, 2, 2, 2, '2005-09-15 13:18:13', 'en', 'Misc Module', '', '<p>With this module you can manage textes outside the navigation nodes. Example: the text of the entry page. The entry page isnt part of any navigation node. An other example is the text which appears in the footer of every webpage. It is clear that this modules wasnt created to manage hundreds of textes.</p><p>The fields of a misc text:</p> <ul> <li><strong>Title </strong><br /></li><li><strong>Description</strong> (optional)</li><li><strong>Main Text Body</strong> (optional)</li><li><strong>Pictures</strong> (optional)</li><li><strong>Files</strong> (optional)</li> </ul> <p>A text can have the following attributes<br /> </p> <ul> <li><strong>aktiv|inactive</strong> define if a text apears on a webpage or not<br /> </li> </ul>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (37, 0, 37, 2, 2, 6, '2005-09-28 12:12:12', 'en', 'Links', '', '', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (38, 37, 37, 2, 2, 0, '2005-09-15 13:18:13', 'en', 'ModelViewController', '', '', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (39, 37, 37, 2, 2, 1, '2005-09-15 13:18:13', 'en', 'PHP Portals', '', '', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (40, 6, 2, 2, 2, 4, '2005-09-15 13:18:13', 'en', 'Link Modul', '', '<p>Mit diesem einfachen Modul kann man externe Link-Referenzen verwalten. D.h. es kann in jedem Navigationsknoten externe Links abgelegt werden. Dieses Modul ist ein Beispiel daf&uuml;r wie Inhalt mit Navigationsknoten verkn&uuml;pft werden kann. Ein Artikel-Modul w&uuml;rde vom Prinzip her genau so funktionieren.</p><p>Das Modul stellt eine Reihe von Actions zur verf&uuml;gung wovon eigentlich nur eine einzige f&uuml;r die &ouml;ffentlichen Views benutzt werden kann:</p> <h5>getLinks</h5> <p><strong>Beschreibung:</strong> F&uuml;llt ein Array mit dem Inhalt der Links die mit einem Navigationsknoten verkn&uuml;pft sind<br /> </p> <p><strong>Aufrufsyntax:</strong></p> <pre>$this-&gt;model-&gt;action(''link'', ''getLinks'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''status''  =&gt; array,       // optional<br />                               ''order''   =&gt; array,       // optional<br />                               ''fields''  =&gt; array(''title'',''url'',<br />                                                  ''description'',''status'') ));</pre>', 0, '', '');
INSERT INTO `smart_navigation_node` VALUES (41, 22, 1, 2, 2, 3, '2005-09-19 10:18:11', 'en', 'Links Module', '', '<p>With this simple module you can manage extern link references. You can add to each navigation node extern links. This module is an example of how to link content to a navigation node. Other modules like an article module would work the same way.<br /> </p> <p>This module provide a couple of action classes. But you need only one class to build public project:</p>  <h5>getLinks</h5>  <p><strong>Description:</strong> Fill an array with the content of links that are linked to a navigation node.<br /> </p>  <p><strong>Usage:</strong></p>  <pre>$this-&gt;model-&gt;action(''link'', ''getLinks'',<br />                         array(''id_node'' =&gt; integer,<br />                               ''result''  =&gt; &amp; array,<br />                               ''status''  =&gt; array,       // optional<br />                               ''order''   =&gt; array,       // optional<br />                               ''fields''  =&gt; array(''title'',''url'',<br />                                                  ''description'',''status'') ));</pre>', 0, '', '');

-- 
-- Dumping data for table `smart_navigation_view`
-- 

INSERT INTO `smart_navigation_view` VALUES (1, 'SimpleNode', '');
INSERT INTO `smart_navigation_view` VALUES (2, 'Node', '');
INSERT INTO `smart_navigation_view` VALUES (3, 'Sitemap', '');
INSERT INTO `smart_navigation_view` VALUES (4, 'SimpleNodeSmarty', '');
