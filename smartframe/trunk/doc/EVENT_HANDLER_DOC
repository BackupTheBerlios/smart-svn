How the event handler mechanism works?
------------------------------------------------

The file /admin/include/base.inc.php include a system event handler 
and the module event handlers, where each handler register it self by calling the method 
"register_handler" of the base class in admin/include/class.sfBase.php. 

Take a look at the event handler, for example this of the user module
/admin/modules/user/event_handler_admin.php to see how registering is done.

define ( 'MOD_USER' , 'USER);
This is the name of the handler. If you send from anyway a directed event to this 
handler you have to use the defined var 'MOD_USER'.
                    
if (FALSE == $B->register_handler( 
                            MOD_USER,
                            array ( 'module'        => MOD_USER,
                                      'event_handler' => 'user_event_handler') ))

Here this event handler is registered so that the event distributor base class 
(class.sfBase.php) know that this handler exists.                


function user_event_handler( $evt )
Followed by the event handler function it self.
This function and those of other modules are NEVER called directly but always 
through the methods of the base class.

Lets take an example:
Edit the /admin/index.php script. This is the main file of the admin section.

include( SF_BASE_DIR."/admin/include/base.inc.php" );
It includes the base init script.

$B->M( SF_AUTH_MODULE, EVT_AUTHENTICATE );
This method of the event class sends an directed event to the handler of the module, which 
takes the authentication part (user module). Variables passed to this method are defined
in /admin/defaults.php. The method M is calling the call-back (event handler) 
function of the module “user”. 

$B->B( EVT_INIT );
Here a init event is send to all handlers (broadcasting event). A module should check if it
is installed or if to run an install or upgrade procedure.

$B->B( EVT_LOGOUT );
Logout event is sent to all handlers. May doing clean ups ....

// check if the demanded module (handler) is registered else load default module
if( TRUE == $B->is_handler ($_REQUEST['m']) )
{
    $B->M( $_REQUEST['m'], EVT_LOAD_MODULE );
}
else
{
    $B->M( SF_DEFAULT_MODULE, EVT_LOAD_MODULE );
}


Even communications between modules can be done through such handlers.
You have to know the name of the handlers and which events they can handle.

Current event handlers are:

MOD_USER > user module
    events > 
                EVT_AUTHENTICATE 
                EVT_LOAD_MODULE
                EVT_INIT
                EVT_LOGOUT
                EVT_SETUP

MOD_ENTRY > entry module
    events > 
                EVT_LOAD_MODULE
                EVT_INIT
                EVT_LOGOUT

MOD_TEST > test module
    events > 
                EVT_LOAD_MODULE
                EVT_INIT
                EVT_LOGOUT