How the event handler mechanism works?
------------------------------------------------

The file /admin/include/base.inc.php include from line 60-80 a system event handler 
and the module event handlers, where each handler register it self by calling the method 
"register_handler" of the event class. 

Take a look at the event handler, for example 
/admin/modules/user/admin_event_handler.php to see how registering is done.

define ( 'EVT_HANDLER_USER' , 'user');
This is the name of the handler. If you send from anyway a directed event to this 
handler you have to use 'EVT_HANDLER_USER.


Here this event handler is registered so that the event distributor class know that 
this handler exists.                
$base->event->register_handler( EVT_HANDLER_USER,
               array ( "module"        => EVT_HANDLER_USER, 
                         "name"          => 'User',
                         "event_handler" => "user_event_handler") ); // name of the function


function user_event_handler( $evt )
Followed by the event handler function it self.
This function and those of other modules are NEVER called directly but always 
through the methods of the event class.

Lets take an example:
Edit the /admin/index.php script. This is the main file of the admin section.

include( BASE_DIR."/admin/include/base.inc.php" );
It includes the base init script. It include the Smarty class, register event handlers ,....

$base->event->directed_run( AUTH_MODULE, EVT_AUTHENTICATE );
This method of the event class sends an event to the handler of the module, which 
takes the authentication part (user module). Variables passed to this method are defined
in /admin/defaults.php. The method directed_run is calling the call-back (event handler) 
function of the module “user”. 

$base->event->broadcast_run( EVT_INIT );
Here a init event is send to all handlers and a module should check if it is installed and if 
not run an install or upgrade procedure.

$base->event->broadcast_run( EVT_LOGOUT );
Logout event is sent to all handlers. May doing clean ups ....

// check if the demanded module (handler) is registered else load default module
if( TRUE == $base->event->is_handler ($_REQUEST['m']) )
{
    $base->event->directed_run ( $_REQUEST['m'], EVT_LOAD_MODULE );
}
else
{
    $base->event->directed_run ( DEFAULT_MODULE, EVT_LOAD_MODULE );
}



Currently, in this demo all handler react not really on this events. You have to 
include some functionality depended of what the modules should do.

Even communications between modules can be done through such handlers.
You have to know the name of the handlers and which events they can handle

Current event handlers are:

EVT_HANDLER_USER > user module
    events > 
                EVT_AUTHENTICATE 
                EVT_LOAD_MODULE
                EVT_INIT
                EVT_LOGOUT
                EVT_SETUP

EVT_HANDLER_ENTRY > entry module
    events > 
                EVT_LOAD_MODULE
                EVT_INIT
                EVT_LOGOUT

EVT_HANDLER_TEST > test module
    events > 
                EVT_LOAD_MODULE
                EVT_INIT
                EVT_LOGOUT