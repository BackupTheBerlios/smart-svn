Events are a powerful mechanism, which gives to the system all its flexibility. You can define events as job commands, which are directed to module action classes. Events are released through a single global php function M(), which you can include in any part of the system.

Example and format of an event:
<code>
    M( MOD_NAVIGATION,
       'get_childs'
       array( 'node_id' => (int)$_REQUEST['node'],
              'result'  => 'tpl_nodes' ));
</code>

The first 2 arguments are always required. The first argument defines the module to which this event is directed. The second argument defines the module action class, which performs on this event call. The third argument is usually an array with variables the action class needs to perform on this event call. 

How the system reacts on the example event call?
* The event distributor loads the module action class file "/modules/navigation/actions/class.action_navigation_get_childs.php", 
* makes an instance of this class, 
* execute the validate() method of this class and if successfully 
* execute the perform() method of this class. The perform method store all child nodes of the node "node_id" in a variable $B->tpl_nodes. A template has only to walk through this array and output its content. $B serves as a variables container to pass variables around the system.

There is a second event type named **"Broadcast Event"**. Such an event is directed to all modules. 
Example:
<code>
    B( 'init' );
</code>

There are 2 possible arguments. The first is required. It defines the modules action classes, which should perform on this call. The second optional argument is a variable array with data the action classes need to perform on.
This event call is distributed to all modules. If such an action doesn't exists its simply ignored. In this example we send an init event to all modules.

You should keep in mind, that an event is always related to a module action class. See: [?view=node&node=150196115 Actions].

One characteristic of SMART is, that you haven't be award to include the right class files to run a event call. SMART does this job for you. If a module is registered you can use all its action classes through event calls from anywhere of the system. Even from inside action classes you can release event calls, which are directed to other modules.

+++ Extended format of event functions
**Module directed event:**
<code>
 M( MOD_XXX,           // Module (defined in module init files)
    'action_name',     // Module action name (string)     
    $data,             // Data passed to the action (mixed)
    $constructor_data, // Data passed to the action constructor (mixed)
    $force_instance    // Force a new action instance even if it exists (bool)
  );
</code>

The 2 first arguments are required. The 3 last arguments are optional. The third argument is passed to the action class perform() and validate() methode. The fourth argument is passed to the action class constructor if such a constructor support this. (Not every action classe needs constructor parameters.) 

Smart use existing action class instances. It is possible that in some action classes occurs conflicts when they are called twice in one script. If this happen, you should call the action classe with the last parameter TRUE, means force a new action class instance.

+++++ Returned codes of M()
# SF_NO_MODULE if such a module dosent exists and it triggers an error if SF_DEBUG is set. 
# SF_NO_VALID_ACTION if the validation of an action fails. 
# SF_NO_ACTION if a called module action file dosent exists, and it triggers an error if SF_DEBUG is set.

**Module broadcast event:**
<code>
 B( 'action_name',     // Module action name (string)
    $data,             // Data passed to the action (mixed)
    $constructor_data, // Data passed to the action constructor (mixed)
    $force_instance    // Force a new action instance even if it exists (bool)
  );
</code>

The first argument is required. The 3 last arguments are optional.

+++ Module action objects
Starting with SMART version 0.7 it is possible to fetch a module action object. 
<code>
$action = M_OBJ( MOD_NAVIGATION, 'get_node');
</code>

Here $action is an instance of the module action 'get_node'. May this would be helpful to solve more complex jobs.