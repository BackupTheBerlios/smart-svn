In action classes you can define the working behavior of a module. Those actions are units whose job is to perform on a event call. Those classes are only loaded on demande; means; when a event call was done. Compared to normal api classes, which can contains hundreds or thousands of code lines, the module action classes are small units, which performs on a singele job, and leads into lower memory waste.

Action classes are parts of a module and reside in /modules/xxx/actions folder. The file format of such an action classes is:
**class.action_xxx_yyy.php**
where xxx stands for the module name and yyy stands for the action name.

The event distributor, which loads and instantinate the required action class execute its validate() methode and if successfull its perform() methode. 

+++ How to create a new action class?

Example:
We need an action class, which should assign an variable with square root of a given number.

The event call for this action in a view class:

<code>
    if( FALSE == M( MOD_COMMON,
                    'get_square',
                    array( 'number' => 367,
                           'result' => 'tpl_square',
                           'error'  => 'tpl_error' )) )
    {
         echo $this->B->tpl_error;
    }
    else
    {
         echo "Square root of 367 = " . $this->B->tpl_square;
    }
</code>

Save the following code with file name class.action_common_get_square.php in the folder modules/common/actions. Thats it. You can now use the event call above from any point of the system.

<code>
class action_common_get_square extends action
{
    /**
     * perform on the request
     */
    function perform( & $data )
    {
        $this->B->$data['result']  = sqrt( $data['number'] );

        return TRUE;
    } 
    /**
     * validate the request
     */
    function validate( & $data )
    {
        if( !is_numeric($data['number']) )
        {
            $this->B->$data['error']  = 'Wrong number format';
            return FALSE;
        }

        return TRUE;
    }  
}
</code>