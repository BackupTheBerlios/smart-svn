A module provide a couple of action classes and optionaly views and templates to build the admin interface.

+++ The file and folder structure of a module

<code>
/modules/xxx/actions    -> folder required
/modules/xxx/templates  -> folder optional
/modules/xxx/views      -> folder optional
/modules/xxx/init.php   -> file required for a working module
</code>

The file init.php serves to register a module.

+++ SMART's init process
You can find in the index.php controller file an "init" event, which launch the global initialisation process. Some point of this process are important to understand for those devs who intend to build there own modules.

The init.php file of each module is loaded during the SMART init process. See: /smart/includes/core.inc.php. So, a working module require such an init file. Without, the systeme knows nothing about this module.

There is one module which is always required under a specific name:
The **common** module.

During the systeme init process, SMART launch an init broadcast event to all modules. Each module must provide an init action class **class.action_xxx_sys_init.php**, which is responsible for the own module initialisation. The **common** module is allways the first one in such a broadcast chain. The goal is, that in this module, you have to make all base initialisations, which are necessairy to get work your modules set. Example: Making database connection, Creating sessions ......
Furthermore, you have to check if the systeme setup was successfull done. If no, the common module have to launch a setup event. 
See: /modules/common/actions/class.action_common_sys_init.php

This is very important because SMART it self, without any module, has no build in high level functionalities.

Open "little JO's" common init file /modules/common/init.php in an editor. Scroll down to the point "Module SET  CONFIG". Here you have to define some config variables which are necessairy to get work the module set.